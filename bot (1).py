import discord
import random
import functools
import re
from urllib.parse import urlparse, parse_qs
from discord.ext import commands
from collections import defaultdict
from datetime import datetime, timedelta
import os
import asyncio
import aiohttp
import yt_dlp as youtube_dl
import yt_dlp
import discord
from discord import app_commands
from discord.ext import commands, tasks 

# # S·ª≠a ƒë·ªïi c·∫•u h√¨nh ytdl_format_options ƒë·ªÉ x·ª≠ l√Ω khi kh√¥ng c√≥ file cookies.txt
import os

# Dictionary to track the most recent mentions
# Dictionary l∆∞u tr·ªØ th·ªùi gian s·ª≠ d·ª•ng l·ªánh howgay cu·ªëi c√πng
howgay_cooldown = {}  # {user_id: last_used_time}
# Th√™m bi·∫øn whitelist v√†o ƒë·∫ßu file ho·∫∑c g·∫ßn nh·ªØng bi·∫øn global kh√°c
whitelist = set()  # T·∫°o m·ªôt t·∫≠p h·ª£p ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh xu
# Dictionary ƒë·ªÉ l∆∞u tr·ªØ c√°c c·∫£nh b√°o: {guild_id: {user_id: [list_of_warnings]}}
warnings = {}
# Structure: {pinged_id: [{pinger_id, timestamp, message_content, channel_id, message_id, jump_url}, ...]}
recent_pings = {}
MAX_PINGS_TRACKED = 25  # Maximum number of pings to track per user
active_giveaways = {}  # {message_id: {"prize": prize, "end_time": end_time, "host": host_id, "channel_id": channel_id}}
task_list = []
# Th√™m v√†o ƒë·∫ßu file, g·∫ßn c√°c bi·∫øn to√†n c·ª•c kh√°c
active_keys = {}  # {key: {"amount": amount, "uses": remaining_uses, "created_by": admin_id, "redeemed_by": [user_ids], "creation_time": timestamp}}
key_log = {}  # {user_id: [{"key": key_code, "time": timestamp, "amount": amount}]} - D√πng ƒë·ªÉ theo d√µi vi·ªác s·ª≠ d·ª•ng key

# Ki·ªÉm tra xem file cookies.txt c√≥ t·ªìn t·∫°i kh√¥ng
cookies_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'cookies.txt')
has_cookies_file = os.path.isfile(cookies_path)
# Th·ªëng k√™ ng∆∞·ªùi s·ª≠ d·ª•ng key
users_stats = {}
total_used_keys = 0
# C·∫•u h√¨nh youtube-dl
ytdl_format_options = {
    'format': 'bestaudio/best',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0',
    'external_downloader_args': ['-q', '-v'],
    'geo_bypass': True,
    'geo_bypass_country': 'US',
    'extractor_args': {
        'youtube': {
            'player_client': ['android', 'web', 'tv_embedded'],
            'hl': ['en-US'],
            'gl': ['US']
        }
    }
}

# Ch·ªâ th√™m cookiefile n·∫øu file t·ªìn t·∫°i
if has_cookies_file:
    ytdl_format_options['cookiefile'] = cookies_path
    print(f"‚úÖ ƒê√£ t√¨m th·∫•y cookies.txt t·∫°i {cookies_path}")
else:
    print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file cookies.txt t·∫°i {cookies_path}. Bot s·∫Ω ho·∫°t ƒë·ªông v·ªõi ch·ª©c nƒÉng h·∫°n ch·∫ø.")
    # T·∫°o file cookies tr·ªëng n·∫øu kh√¥ng t√¨m th·∫•y
    try:
        with open(cookies_path, 'w') as f:
            f.write("# HTTP Cookie File created by Discord Bot\n# This file was generated automatically\n\n")
        print(f"‚úÖ ƒê√£ t·∫°o file cookies.txt tr·ªëng t·∫°i {cookies_path}")
        ytdl_format_options['cookiefile'] = cookies_path
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ t·∫°o file cookies.txt: {str(e)}")
# ƒê·ªãnh nghƒ©a class YTDLSource
class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5, requester=None):
        super().__init__(source, volume)
        self.data = data
        self.title = data.get('title')
        self.url = data.get('url')
        self.requester = requester

    # S·ª≠a ƒë·ªïi ph∆∞∆°ng th·ª©c from_url trong YTDLSource
@classmethod
async def from_url(cls, url, *, loop=None, stream=False, ctx=None):
    loop = loop or asyncio.get_event_loop()
    
    # S·ª≠ d·ª•ng YT-DLP n·∫øu c√≥
    try:
        from yt_dlp import YoutubeDL
        print("‚úÖ ƒêang s·ª≠ d·ª•ng yt-dlp ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu...")
        
        # T·∫°o options v·ªõi c√°c t√πy ch·ªçn bypass n√¢ng cao
        enhanced_options = ytdl_format_options.copy()
        enhanced_options['extractor_args'] = {
            'youtube': {
                'player_client': ['android', 'web', 'tv_embedded'],
                'hl': ['en-US'],
                'gl': ['US']
            }
        }
        
        # Th√™m c√°c HTTP headers ƒë·ªÉ c·∫£i thi·ªán kh·∫£ nƒÉng truy c·∫≠p khi kh√¥ng c√≥ cookies
        enhanced_options['http_headers'] = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept-Language': 'en-US,en;q=0.9',
            'Origin': 'https://www.youtube.com',
            'Referer': 'https://www.youtube.com/'
        }
        
        yt_downloader = YoutubeDL(enhanced_options)
        
        # Th·ª≠ t·∫£i th√¥ng tin video
        try:
            partial = functools.partial(yt_downloader.extract_info, url, download=not stream)
            data = await loop.run_in_executor(None, partial)
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i video: {str(e)}")
            
            # Th·ª≠ l·∫°i v·ªõi c√°c t√πy ch·ªçn kh√°c n·∫øu g·∫∑p l·ªói
            try:
                # Tr√≠ch xu·∫•t video_id t·ª´ URL v√† th·ª≠ ph∆∞∆°ng ph√°p kh√°c
                parsed_url = urlparse(url)
                video_id = None
                
                if 'youtube.com' in url and 'watch' in url:
                    video_id = parse_qs(parsed_url.query).get('v', [None])[0]
                elif 'youtu.be' in url:
                    video_id = parsed_url.path.strip('/')
                
                if video_id:
                    print(f"üîÑ Th·ª≠ v·ªõi ph∆∞∆°ng ph√°p bypass v√† video_id: {video_id}")
                    alt_url = f"https://www.youtube.com/watch?v={video_id}&t=0s&app=desktop"
                    
                    # Th·ª≠ v·ªõi user agent di ƒë·ªông
                    mobile_options = enhanced_options.copy()
                    mobile_options['http_headers'] = {
                        'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1',
                        'Accept-Language': 'en-US,en;q=0.9',
                        'Origin': 'https://www.youtube.com',
                    }
                    
                    # Lo·∫°i b·ªè cookiefile n·∫øu v·∫´n g·∫∑p l·ªói
                    if 'cookiefile' in mobile_options:
                        del mobile_options['cookiefile']
                        print("üîÑ Th·ª≠ l·∫°i kh√¥ng d√πng cookies...")
                    
                    yt_mobile = YoutubeDL(mobile_options)
                    partial = functools.partial(yt_mobile.extract_info, alt_url, download=not stream)
                    data = await loop.run_in_executor(None, partial)
                    print("‚úÖ ƒê√£ s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p bypass v·ªõi user agent di ƒë·ªông th√†nh c√¥ng!")
                else:
                    raise Exception("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t video ID ƒë·ªÉ th·ª±c hi·ªán bypass")
            except Exception as second_error:
                print(f"‚ùå L·ªói khi th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø: {str(second_error)}")
                raise second_error
    
    except ImportError:
        # Fallback to youtube_dl if yt-dlp is not installed
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y yt-dlp, s·ª≠ d·ª•ng youtube_dl...")
        import youtube_dl
        ytdl = youtube_dl.YoutubeDL(ytdl_format_options)
        partial = functools.partial(ytdl.extract_info, url, download=not stream)
        data = await loop.run_in_executor(None, partial)
    
    if 'entries' in data:
        # ƒê√¢y l√† m·ªôt playlist
        data = data['entries'][0]
    
    filename = data['url'] if stream else yt_downloader.prepare_filename(data)
    
    # ƒê·ªãnh nghƒ©a ffmpeg_options n·∫øu ch∆∞a c√≥
    ffmpeg_options = {
        'options': '-vn',
        'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5'
    }
    
    source = await discord.FFmpegOpusAudio.from_probe(filename, **ffmpeg_options)
    
    return cls(source, data=data, requester=ctx.author if ctx else None)
# Th√™m h√†m play_next_song
async def play_next_song(guild_id, voice_client):
    """Ph√°t b√†i h√°t ti·∫øp theo trong h√†ng ƒë·ª£i"""
    if guild_id in music_queues and music_queues[guild_id]:
        # L·∫•y b√†i h√°t ti·∫øp theo
        next_song = music_queues[guild_id].pop(0)
        
        # Set callback cho khi b√†i h√°t k·∫øt th√∫c
        def after_playing(error):
            if error:
                print(f"L·ªói ph√°t nh·∫°c: {error}")
            asyncio.run_coroutine_threadsafe(play_next_song(guild_id, voice_client), bot.loop)
        
        # Ph√°t b√†i h√°t
        voice_client.play(next_song, after=after_playing)
        
        # G·ª≠i th√¥ng b√°o ƒë·∫øn k√™nh
        if hasattr(next_song, 'notify_channel'):
            embed = discord.Embed(
                title="‚ñ∂Ô∏è ƒêang ph√°t",
                description=f"**{next_song.title}**",
                color=discord.Color.green()
            )
            asyncio.run_coroutine_threadsafe(next_song.notify_channel.send(embed=embed), bot.loop)
    # X√≥a ph·∫ßn else ch·ª©a await voice_client.disconnect() ƒë·ªÉ bot kh√¥ng t·ª± ng·∫Øt k·∫øt n·ªëi
# Bi·∫øn ƒë·ªÉ theo d√µi h√†ng ƒë·ª£i v√† b√†i h√°t ƒëang ph√°t
music_queues = {}  # {guild_id: [song1, song2, ...]}
current_playing = {}  # {guild_id: current_song}


async def check_timeout_status(member):
    """
    Check if a member is timed out (compatible with all Discord.py versions)
    
    Args:
        member: The Discord member to check
    
    Returns:
        tuple: (is_timed_out, remaining_time_seconds, expiry_time)
        - is_timed_out: Boolean indicating if user is timed out
        - remaining_time_seconds: Seconds remaining in timeout, or 0 if not timed out
        - expiry_time: The datetime when timeout expires, or None if not timed out
    """
    try:
        # Try the direct attribute first (Discord.py 2.0+)
        if hasattr(member, 'communication_disabled_until'):
            timeout_until = member.communication_disabled_until
            if timeout_until is None:
                return False, 0, None
                
            # Check if timeout is in the future
            now = discord.utils.utcnow()
            if timeout_until > now:
                remaining = (timeout_until - now).total_seconds()
                return True, remaining, timeout_until
            return False, 0, None
        
        # Fallback for older Discord.py versions - check timeout role
        # Most servers have a "Timed Out" or similar role
        for role in member.roles:
            if role.name.lower() in ['timed out', 'timeout', 'muted']:
                # Can't determine exact time remaining in old versions
                # Assume 1 hour as default
                now = discord.utils.utcnow()
                expiry = now + timedelta(hours=1)
                return True, 3600, expiry
        
        return False, 0, None
    except Exception as e:
        print(f"Error checking timeout status: {str(e)}")
        return False, 0, None


# T·∫°o class ƒë·ªÉ l∆∞u th√¥ng tin b√†i h√°t
class SongInfo:
    def __init__(self, title, url, duration, thumbnail, requester=None):
        self.title = title
        self.url = url
        self.duration = duration
        self.thumbnail = thumbnail
        self.requester = requester
        self.volume = 0.5

# Dictionary ƒë·ªÉ l∆∞u tr·ªØ tin nh·∫Øn ƒë√£ x√≥a g·∫ßn nh·∫•t trong t·ª´ng k√™nh
# {channel_id: {"author": user, "content": content, "avatar": avatar_url, "time": deletion_time, "attachments": [urls]}}
snipe_messages = {}
deleted_messages = {}
afk_users = {}

# Dict ƒë·ªÉ l∆∞u l·ªãch s·ª≠ s·ª≠ d·ª•ng l·ªánh dms
dms_history = []  # Format: [{"sender": user_id, "receiver": member_id, "content": message, "time": timestamp, "channel_id": channel_id}]
MAX_DMS_HISTORY = 100  # S·ªë l∆∞·ª£ng tin nh·∫Øn t·ªëi ƒëa l∆∞u tr·ªØ


# Decorator ƒë·ªÉ ki·ªÉm tra quy·ªÅn ƒë·∫∑c bi·ªát
def special_roles_check():
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ quy·ªÅn ƒë·∫∑c bi·ªát kh√¥ng"""
    def predicate(ctx):
        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ID ƒë·∫∑c bi·ªát kh√¥ng
        if ctx.author.id in SPECIAL_ROLE_IDS:
            return True
        # Ki·ªÉm tra quy·ªÅn qu·∫£n tr·ªã vi√™n
        if ctx.author.guild_permissions.administrator:
            return True
        # N·∫øu kh√¥ng ph·∫£i l√† ID ƒë·∫∑c bi·ªát ho·∫∑c admin, ki·ªÉm tra c√°c quy·ªÅn kh√°c
        has_permission = (
            ctx.author.guild_permissions.manage_guild or
            ctx.author.guild_permissions.manage_channels or
            ctx.author.guild_permissions.manage_messages
        )
        return has_permission
    return commands.check(predicate)

# Dictionary ƒë·ªÉ theo d√µi l·∫ßn s·ª≠ d·ª•ng c√°c l·ªánh nh·∫°y c·∫£m c·ªßa ng∆∞·ªùi d√πng
admin_cmd_attempts = {}  # {user_id: {"count": attempts, "last_time": timestamp}}
ADMIN_CMD_THRESHOLD = 1  # S·ªë l·∫ßn th·ª≠ t·ªëi ƒëa trong kho·∫£ng th·ªùi gian
ADMIN_CMD_TIMEFRAME = 6000  # Kho·∫£ng th·ªùi gian theo d√µi (gi√¢y)
SPAM_TIMEOUT_DAYS = 7  # Th·ªùi gian timeout khi spam (ng√†y)
ANTI_SPAM_BOT_ID = 618702036992655381  # ID c·ªßa USERID 618702036992655381

def only_specific_user():
    async def predicate(ctx):
        # Only allow the specific user ID to use this command
        return ctx.author.id == 618702036992655381
    return commands.check(predicate)

# Th√™m bi·∫øn global ƒë·ªÉ l∆∞u tr·ªØ danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c whitelist
whitelisted_users = set()  # Ng∆∞·ªùi d√πng s·∫Ω lu√¥n th·∫Øng trong m·ªçi tr√≤ ch∆°i
# Th√™m bi·∫øn global ƒë·ªÉ l∆∞u danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p bypass l·ªánh dms
dms_bypass_list = set()

# ƒê·∫£m b·∫£o whitelisted_users l√† set ƒë·ªÉ tr√°nh l·ªói TypeError
if not isinstance(whitelisted_users, set):
    whitelisted_users = set()


def is_whitelisted(user_id):
    """Check if a user is in the whitelist"""
    return user_id in whitelisted_users


async def check_whitelist_status(ctx):
    """
    Ki·ªÉm tra v√† th√¥ng b√°o tr·∫°ng th√°i whitelist c·ªßa ng∆∞·ªùi d√πng
    """
    if ctx.author.id in whitelisted_users:
        embed = discord.Embed(
            title="‚ú® Whitelist Status",
            description=
            f"{ctx.author.mention} ƒëang trong whitelist.\nB·∫°n s·∫Ω c√≥ t·ª∑ l·ªá th·∫Øng cao h∆°n trong c√°c tr√≤ ch∆°i!",
            color=discord.Color.gold())
        await ctx.send(embed=embed)
        return True
    return False


def apply_whitelist_boost(ctx):
    """
    √Åp d·ª•ng tƒÉng t·ª∑ l·ªá th·∫Øng cho ng∆∞·ªùi d√πng trong whitelist
    """
    if ctx.author.id in whitelisted_users:
        print(
            f"DEBUG: √Åp d·ª•ng tƒÉng t·ª∑ l·ªá th·∫Øng cho ng∆∞·ªùi d√πng {ctx.author.id}")
        return random.choices([True, False], weights=[80, 20], k=1)[0]
    print(
        f"DEBUG: S·ª≠ d·ª•ng t·ª∑ l·ªá th·∫Øng th√¥ng th∆∞·ªùng cho ng∆∞·ªùi d√πng {ctx.author.id}"
    )
    return random.choices([True, False], weights=[30, 70], k=1)[0]


# S·ªë tin nh·∫Øn t·ªëi ƒëa ƒë∆∞·ª£c l∆∞u tr·ªØ m·ªói k√™nh
MAX_SNIPE_MESSAGES = 50
# Th·ªùi gian l∆∞u tr·ªØ tin nh·∫Øn ƒë√£ x√≥a (t√≠nh b·∫±ng gi√¢y)
SNIPE_EXPIRY_TIME = 86400  # 24 gi·ªù

# Th√™m h·∫±ng s·ªë cho ID k√™nh ch∆°i game
GAME_CHANNEL_ID = 1350478909216522252
GUILD_ID = 953918500970307594
GAME_CHANNEL_LINK = "https://discord.com/channels/953918500970307594/1350478909216522252"

# Admin IDs - th√™m ƒë·ªÉ tham chi·∫øu trong vayxu
ADMIN_IDS = [618702036992655381, 938071848321712198]

# Theo d√µi s·ªë l·∫ßn vi ph·∫°m k√™nh c·ªßa m·ªói ng∆∞·ªùi d√πng
channel_violation_count = defaultdict(int)
channel_violation_time = defaultdict(
    lambda: datetime.now() - timedelta(hours=1))
VIOLATION_THRESHOLD = 1  # Sau 1 l·∫ßn vi ph·∫°m s·∫Ω b·ªã timeout

# Th√™m th·ªùi gian ch·ªù ƒë·ªÉ ngƒÉn spam l·ªánh
command_cooldown = {}
COOLDOWN_TIME = 0  # Th·ªùi gian ch·ªù gi·ªØa c√°c l·ªánh (gi√¢y)


# X√°c th·ª±c cooldown
def check_cooldown(user_id):
    current_time = datetime.now()
    if user_id in command_cooldown:
        time_passed = (current_time -
                       command_cooldown[user_id]).total_seconds()
        if time_passed < COOLDOWN_TIME:
            return False, int(COOLDOWN_TIME - time_passed)
    command_cooldown[user_id] = current_time
    return True, 0

def admin_only():
    """Decorator ƒë·ªÉ gi·ªõi h·∫°n l·ªánh ch·ªâ cho admin ID 618702036992655381 v√† 938071848321712198 s·ª≠ d·ª•ng v√† timeout ng∆∞·ªùi kh√¥ng c√≥ quy·ªÅn"""
    async def predicate(ctx):
        # ID ch·ªß s·ªü h·ªØu - ch·ªâ nh·ªØng ng∆∞·ªùi n√†y m·ªõi c√≥ th·ªÉ d√πng l·ªánh
        OWNER_IDS = [618702036992655381, 938071848321712198, 882156430797459456]
        
        # Ki·ªÉm tra ID ng∆∞·ªùi g·ªçi l·ªánh
        if ctx.author.id in OWNER_IDS:
            return True
        else:
            # Hi·ªÉn th·ªã th√¥ng b√°o c·∫£nh b√°o
            embed = discord.Embed(
                title="‚õî PH√ÅT HI·ªÜN S·ª¨ D·ª§NG L·ªÜNH ADMIN TR√ÅI PH√âP",
                description=f"{ctx.author.mention} ƒë√£ c·ªë g·∫Øng s·ª≠ d·ª•ng l·ªánh admin v√† s·∫Ω b·ªã timeout 7 ng√†y ngay l·∫≠p t·ª©c!",
                color=discord.Color.dark_red()
            )
            await ctx.send(embed=embed)
            
            # Timeout user ngay l·∫≠p t·ª©c kh√¥ng c·∫ßn c·∫£nh b√°o
            try:
                # Timeout trong 7 ng√†y
                timeout_until = discord.utils.utcnow() + timedelta(days=SPAM_TIMEOUT_DAYS)
                await ctx.author.timeout(timeout_until, reason="S·ª≠ d·ª•ng l·ªánh admin tr√°i ph√©p")
            except discord.Forbidden:
                await ctx.send("‚ùå Kh√¥ng th·ªÉ timeout ng∆∞·ªùi d√πng do thi·∫øu quy·ªÅn!")
            except Exception as e:
                await ctx.send(f"‚ùå L·ªói khi timeout: {str(e)}")
            
            raise commands.MissingPermissions(['administrator'])
    return commands.check(predicate)

# T·∫°o decorator ch·ªâ d√†nh cho l·ªánh dms v·ªõi timeout ngay l·∫≠p t·ª©c
def dms_only():
    async def predicate(ctx):
        # ID ch·ªß s·ªü h·ªØu - ch·ªâ ng∆∞·ªùi n√†y m·ªõi c√≥ th·ªÉ d√πng l·ªánh
        OWNER_ID = 618702036992655381
        
        # Ki·ªÉm tra ID ng∆∞·ªùi g·ªçi l·ªánh ho·∫∑c bypass list
        if ctx.author.id == OWNER_ID or ctx.author.id in dms_bypass_list:
            return True
        
        # Hi·ªÉn th·ªã th√¥ng b√°o c·∫£nh b√°o
        embed = discord.Embed(
            title="‚õî PH√ÅT HI·ªÜN S·ª¨ D·ª§NG L·ªÜNH DMS TR√ÅI PH√âP",
            description=f"{ctx.author.mention} ƒë√£ c·ªë g·∫Øng s·ª≠ d·ª•ng l·ªánh `.dms` v√† s·∫Ω b·ªã timeout 7 ng√†y ngay l·∫≠p t·ª©c!",
            color=discord.Color.dark_red()
        )
        await ctx.send(embed=embed)
        
        # Timeout user ngay l·∫≠p t·ª©c kh√¥ng c·∫ßn c·∫£nh b√°o
        try:
            # T√¨m user v·ªõi ID ƒë√£ ch·ªâ ƒë·ªãnh ƒë·ªÉ x·ª≠ l√Ω timeout
            anti_spam_user = None
            for guild in ctx.bot.guilds:
                anti_spam_user = guild.get_member(ANTI_SPAM_BOT_ID)
                if anti_spam_user:
                    break
            
            # N·∫øu t√¨m th·∫•y user, g·ª≠i y√™u c·∫ßu timeout
            if anti_spam_user:
                command_msg = f"~timeout <@{ctx.author.id}> 7d C·ªë t√¨nh s·ª≠ d·ª•ng l·ªánh DMS tr√°i ph√©p"
                await ctx.send(command_msg)
            else:
                # T·ª± timeout n·∫øu kh√¥ng t√¨m th·∫•y user
                timeout_until = discord.utils.utcnow() + timedelta(days=SPAM_TIMEOUT_DAYS)
                await ctx.author.timeout(until=timeout_until, reason=f"S·ª≠ d·ª•ng l·ªánh DMS tr√°i ph√©p")
        except discord.Forbidden:
            await ctx.send("‚ùå Kh√¥ng th·ªÉ timeout ng∆∞·ªùi d√πng do thi·∫øu quy·ªÅn!")
        except Exception as e:
            await ctx.send(f"‚ùå L·ªói khi timeout: {str(e)}")
        
        return False
    return commands.check(predicate)

# T·∫°o decorator ƒë·ªÉ ki·ªÉm tra k√™nh
def check_channel():

    async def predicate(ctx):
        user_id = ctx.author.id
        current_time = datetime.now()

        # N·∫øu ƒë√∫ng k√™nh, reset vi ph·∫°m v√† cho ph√©p th·ª±c hi·ªán l·ªánh
        if ctx.channel.id == GAME_CHANNEL_ID:
            channel_violation_count[user_id] = 0
            return True

        # Ki·ªÉm tra th·ªùi gian t·ª´ l·∫ßn vi ph·∫°m cu·ªëi - gi·∫£m xu·ªëng 1 ph√∫t
        time_since_last_violation = current_time - channel_violation_time[
            user_id]
        # Reset s·ªë vi ph·∫°m n·∫øu ƒë√£ qua 1 ph√∫t
        if time_since_last_violation > timedelta(minutes=1):
            channel_violation_count[user_id] = 0

        # TƒÉng s·ªë l·∫ßn vi ph·∫°m v√† c·∫≠p nh·∫≠t th·ªùi gian vi ph·∫°m
        channel_violation_count[user_id] += 1
        channel_violation_time[user_id] = current_time

        # G·ª≠i c·∫£nh b√°o v√† timeout n·∫øu c·∫ßn
        if channel_violation_count[user_id] >= VIOLATION_THRESHOLD:
            try:
                # Timeout ng∆∞·ªùi d√πng 1 gi·ªù
                timeout_until = discord.utils.utcnow() + timedelta(hours=1)
                await ctx.author.timeout(
                    timeout_until,
                    reason="Spam l·ªánh game ·ªü k√™nh kh√¥ng ph√π h·ª£p")

                embed = discord.Embed(
                    title="‚õî Vi ph·∫°m k√™nh",
                    description=
                    f"{ctx.author.mention} ƒë√£ b·ªã timeout 1 gi·ªù v√¨ li√™n t·ª•c s·ª≠ d·ª•ng l·ªánh game trong k√™nh kh√¥ng ph√π h·ª£p.",
                    color=discord.Color.dark_red())
                embed.add_field(
                    name="‚ö†Ô∏è L∆∞u √Ω",
                    value=
                    f"Vui l√≤ng s·ª≠ d·ª•ng l·ªánh trong <#{GAME_CHANNEL_ID}>\n[Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ ƒëi ƒë·∫øn k√™nh ch∆°i game]({GAME_CHANNEL_LINK})",
                    inline=False)
                await ctx.send(embed=embed)
            except discord.Forbidden:
                await ctx.send("‚ö†Ô∏è Bot kh√¥ng c√≥ quy·ªÅn timeout ng∆∞·ªùi d√πng")
            except Exception as e:
                await ctx.send(f"‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi timeout: {str(e)}")
        else:
            # C·∫£nh b√°o th√¥ng th∆∞·ªùng
            embed = discord.Embed(
                title="‚ùå Sai k√™nh",
                description=
                f"Vui l√≤ng s·ª≠ d·ª•ng l·ªánh n√†y trong k√™nh <#{GAME_CHANNEL_ID}>",
                color=discord.Color.red())
            embed.add_field(
                name="‚ö†Ô∏è C·∫£nh b√°o",
                value=
                f"ƒê√¢y l√† l·∫ßn th·ª© {channel_violation_count[user_id]}/{VIOLATION_THRESHOLD}. N·∫øu ti·∫øp t·ª•c vi ph·∫°m, b·∫°n s·∫Ω b·ªã timeout 1 gi·ªù.",
                inline=False)
            embed.add_field(
                name="Li√™n k·∫øt nhanh",
                value=
                f"[Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ ƒëi ƒë·∫øn k√™nh ch∆°i game]({GAME_CHANNEL_LINK})",
                inline=False)
            await ctx.send(embed=embed)

        return False

    return commands.check(predicate)


# Kh·ªüi t·∫°o bot v√† l∆∞u ƒëi·ªÉm, s·ªë xu, th·ªùi gian ƒëƒÉng nh·∫≠p cu·ªëi c√πng
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix='.', intents=intents)

# Dictionary ƒë·ªÉ l∆∞u th·ªùi gian h·∫øt h·∫°n role
active_roles = {}  # {user_id: {role_id: expiry_time}}


async def check_expired_roles():
    while True:
        await asyncio.sleep(60)  # Ki·ªÉm tra m·ªói ph√∫t
        current_time = datetime.now()
        for user_id, roles in active_roles.copy().items():
            for role_id, expiry_time in roles.copy().items():
                if current_time >= expiry_time:
                    try:
                        guild = bot.get_guild(
                            YOUR_GUILD_ID
                        )  # Thay YOUR_GUILD_ID b·∫±ng ID server c·ªßa b·∫°n
                        member = await guild.fetch_member(user_id)
                        role = guild.get_role(role_id)
                        if role and role in member.roles:
                            await member.remove_roles(role)
                            del active_roles[user_id][role_id]
                            channel = guild.get_channel(
                                YOUR_CHANNEL_ID
                            )  # Thay YOUR_CHANNEL_ID b·∫±ng ID k√™nh th√¥ng b√°o
                            await channel.send(
                                f"Role {role.name} c·ªßa {member.mention} ƒë√£ h·∫øt h·∫°n!"
                            )
                    except Exception as e:
                        print(f"L·ªói khi x√≥a role: {e}")


# Th√™m d√≤ng n√†y ngay sau khi kh·ªüi t·∫°o bot
bot.remove_command('help')
points = defaultdict(int)  # L∆∞u ƒëi·ªÉm c·ªßa t·ª´ng ng∆∞·ªùi ch∆°i
currency = defaultdict(lambda: 100)  # M·ªói ng∆∞·ªùi ch∆°i b·∫Øt ƒë·∫ßu v·ªõi 100 xu
last_daily_claim = defaultdict(
    lambda: datetime.min)  # Th·ªùi gian nh·∫≠n th∆∞·ªüng h√†ng ng√†y c·ªßa ng∆∞·ªùi ch∆°i
blacklisted_users = set()  # L∆∞u ID ng∆∞·ªùi d√πng b·ªã ch·∫∑n
bank_interest_rate = 0.05  # 5% interest rate
bank_accounts = {}  # {user_id: {"balance": amount, "last_interest": datetime}}
bank_blacklist = set()  # Users banned from using the bank system
last_interest_time = defaultdict(
    lambda: datetime.now() - timedelta(days=1))  # Track last interest payment
vault = defaultdict(lambda: defaultdict(int)
                    )  # Nested defaultdict for guild_id -> user_id -> balance

# Theo d√µi vayxu
loans = {
}  # Dict l∆∞u th√¥ng tin vay: {user_id: {"amount": amount, "time": datetime}}
loan_violations = defaultdict(int)  # ƒê·∫øm s·ªë l·∫ßn vi ph·∫°m khi vay xu

# Th√™m v√†o ph·∫ßn ƒë·∫ßu file, sau c√°c import


# H√†m h·ªó tr·ª£ x·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
def parse_bet(bet_input, user_balance):
    """
    X·ª≠ l√Ω ƒë·∫ßu v√†o ƒë·∫∑t c∆∞·ª£c, h·ªó tr·ª£ t·ª´ kh√≥a 'all' ho·∫∑c c√°c t·ª´ kh√≥a t∆∞∆°ng t·ª±
    """
    # Danh s√°ch c√°c t·ª´ kh√≥a cho all-in
    all_in_keywords = [
        'all', 'tatca', 'max', 'a', 'allin', 'full', 'tat', 'het', 'allwin'
    ]

    # N·∫øu ƒë·∫ßu v√†o l√† None, tr·∫£ v·ªÅ None
    if bet_input is None:
        return None

    # X·ª≠ l√Ω all-in keywords
    if isinstance(bet_input, str):
        cleaned_input = bet_input.lower().replace(" ", "")
        if cleaned_input in all_in_keywords:
            return user_balance

    # Th·ª≠ chuy·ªÉn ƒë·ªïi th√†nh s·ªë
    try:
        bet_amount = int(bet_input)
        if bet_amount <= 0:
            return None
        return min(bet_amount,
                   user_balance)  # Gi·ªõi h·∫°n c∆∞·ª£c kh√¥ng v∆∞·ª£t qu√° s·ªë d∆∞
    except (ValueError, TypeError):
        return None


def check_bet(ctx, bet_amount):
    """
    Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa s·ªë ti·ªÅn c∆∞·ª£c
    Tr·∫£ v·ªÅ (bool, embed) - True v√† None n·∫øu h·ª£p l·ªá, False v√† embed th√¥ng b√°o l·ªói n·∫øu kh√¥ng h·ª£p l·ªá
    """
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        return False, embed

    if bet_amount <= 0:
        embed = discord.Embed(title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
                              description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.",
                              color=discord.Color.red())
        return False, embed

    if currency[ctx.author.id] < bet_amount:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß xu",
            description=
            f"B·∫°n c·∫ßn {bet_amount} xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c, nh∆∞ng ch·ªâ c√≥ {currency[ctx.author.id]} xu.",
            color=discord.Color.red())
        return False, embed

    return True, None


# Dictionary ƒë·ªÉ theo d√µi tr·∫°ng th√°i c√°c game b·ªã v√¥ hi·ªáu h√≥a
disabled_games = {
    'caropvp': False,  # Caro PvP
    'cl': False,  # Ch·∫µn l·∫ª
    'dd': False,  # ƒêi·ªÉm danh
    'poker': False,  # Poker
    'phom': False,  # Ph·ªèm
    'xidach': False,  # X√¨ d√°ch
    'tx': False,  # T√†i x·ªâu
    'pinggo': False,  # Ping go
    'maubinh': False,  # M·∫≠u binh
    'loto': False,  # L√¥ t√¥
    'bacaopvp': False,  # Ba c√†o PvP
    '777': False,  # M√°y quay x√®n 777
    'tungxu': False,  # Tung xu
    'coquaynga': False,  # C√¥ quay nga
    'fight': False,  # Fight
    'vayxu': False,  # Vay xu
    'shop': False,  # Shop
    'baucua': False,  # B·∫ßu cua
    'kbb': False,  # K√©o b√∫a bao
    'kbbpvp': False,  # K√©o b√∫a bao PvP 
    'phom': False,  # Ph·ªèm
    'hoidap': False,  # H·ªèi ƒë√°p
    'capxu': False,  # C·∫•p xu ng·∫´u nhi√™n
    'vqmm': False,  # V√≤ng quay may m·∫Øn
    'all': False  # T·∫•t c·∫£ game
}


# H√†m ki·ªÉm tra xem game c√≥ b·ªã v√¥ hi·ªáu h√≥a kh√¥ng
def is_game_disabled(game_name):
    """
    Ki·ªÉm tra xem m·ªôt game c·ª• th·ªÉ c√≥ b·ªã v√¥ hi·ªáu h√≥a kh√¥ng
    """
    return disabled_games.get('all', False) or disabled_games.get(
        game_name, False)


def check_game_enabled(game_name):
    async def predicate(ctx):
        # Ki·ªÉm tra game c√≥ b·ªã v√¥ hi·ªáu h√≥a kh√¥ng
        # N·∫øu ng∆∞·ªùi d√πng trong whitelist th√¨ v·∫´n c√≥ th·ªÉ ch∆°i ngay c·∫£ khi game b·ªã v√¥ hi·ªáu h√≥a
        if is_game_disabled(game_name) and not is_whitelisted(ctx.author.id):
            embed = discord.Embed(
                title="üö´ Game b·ªã t·∫Øt",
                description=f"Tr√≤ ch∆°i **{game_name}** hi·ªán ƒëang b·ªã v√¥ hi·ªáu h√≥a.",
                color=discord.Color.red())
            await ctx.send(embed=embed)
            return False
        
        # Ki·ªÉm tra blacklist
        if ctx.author.id in blacklisted_users:
            embed = discord.Embed(
                title="‚ùå T·ª´ ch·ªëi truy c·∫≠p",
                description="B·∫°n ƒë√£ b·ªã th√™m v√†o danh s√°ch ƒëen v√† kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
                color=discord.Color.red())
            await ctx.send(embed=embed)
            return False
            
        # L∆∞u tr·∫°ng th√°i whitelist v√†o ctx ƒë·ªÉ c√°c h√†m game c√≥ th·ªÉ truy c·∫≠p
        ctx.is_whitelisted = is_whitelisted(ctx.author.id)
        return True
        
    return commands.check(predicate)

    def decorator(func):

        @functools.wraps(func)
        async def wrapper(ctx, *args, **kwargs):
            if not await discord.utils.maybe_coroutine(predicate, ctx):
                return

            # Ki·ªÉm tra whitelist v√† √°p d·ª•ng c√°c h√†m rigged n·∫øu c·∫ßn thi·∫øt
            if ctx.author.id in whitelisted_users:
                print(
                    f"DEBUG: Ng∆∞·ªùi d√πng {ctx.author.id} ƒë∆∞·ª£c x√°c nh·∫≠n trong whitelist"
                )

                # T·∫°o m·ªôt m√¥i tr∆∞·ªùng c·ª•c b·ªô cho ng∆∞·ªùi d√πng whitelist
                # v·ªõi c√°c h√†m random ƒë√£ ƒë∆∞·ª£c ghi ƒë√®
                # X·ª≠ l√Ω whitelist
            if is_whitelisted(ctx.author.id):
                # L∆∞u c√°c h√†m random g·ªëc
                _original_random = random.random
                _original_randint = random.randint
                _original_choice = random.choice
                _original_choices = random.choices
                _original_sample = random.sample
                _original_shuffle = random.shuffle
                try:

                    # Ghi ƒë√® c√°c h√†m random ƒë·ªÉ ng∆∞·ªùi ch∆°i lu√¥n th·∫Øng
                    def rigged_random():
                        """H√†m random lu√¥n tr·∫£ v·ªÅ 0.99"""
                        return 0.99

                    def rigged_randint(a, b):
                        """H√†m randint lu√¥n tr·∫£ v·ªÅ gi√° tr·ªã c√≥ l·ª£i nh·∫•t"""
                        # T√πy ch·ªânh theo t·ª´ng tr√≤ ch∆°i
                        if game_name == 'tx':  # T√†i x·ªâu
                            choice = next(
                                (arg for arg in args if isinstance(arg, str)
                                 and arg.lower() in ['t', 'x', 'tai', 'xiu']),
                                None)
                            if choice:
                                if choice.lower() in ['t', 'tai']:
                                    # T√†i: t·ªïng 3 x√∫c x·∫Øc t·ª´ 11-18
                                    if a == 1 and b == 6:  # X√∫c x·∫Øc
                                        return 6  # Lu√¥n ra 6
                                else:  # X·ªâu
                                    # X·ªâu: t·ªïng 3 x√∫c x·∫Øc t·ª´ 3-10
                                    if a == 1 and b == 6:  # X√∫c x·∫Øc
                                        return 1  # Lu√¥n ra 1
                        elif game_name == 'cl':  # Ch·∫µn l·∫ª
                            choice = next(
                                (arg for arg in args if isinstance(arg, str)),
                                None)
                            if choice:
                                if choice in ['chan', 'chan2', 'chan3']:
                                    return b if b % 2 == 0 else b - 1  # ƒê·∫£m b·∫£o s·ªë ch·∫µn
                                else:
                                    return b if b % 2 != 0 else b - 1  # ƒê·∫£m b·∫£o s·ªë l·∫ª
                        return b  # M·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ gi√° tr·ªã cao nh·∫•t

                    def rigged_choice(seq):
                        """H√†m choice lu√¥n tr·∫£ v·ªÅ ph·∫ßn t·ª≠ c√≥ l·ª£i nh·∫•t"""
                        if game_name == 'kbb':
                            choice = next(
                                (arg for arg in args if isinstance(arg, str)
                                 and arg.lower() in ['keo', 'bua', 'bao']),
                                None)
                            if choice:
                                if choice.lower() == 'keo':
                                    return 'bao'  # K√©o th·∫Øng bao
                                elif choice.lower() == 'bua':
                                    return 'keo'  # B√∫a th·∫Øng k√©o
                                elif choice.lower() == 'bao':
                                    return 'bua'  # Bao th·∫Øng b√∫a
                        return seq[-1] if seq else _original_choice(seq)

                    def rigged_choices(population,
                                       weights=None,
                                       cum_weights=None,
                                       k=1):
                        """H√†m choices lu√¥n tr·∫£ v·ªÅ k·∫øt qu·∫£ th·∫Øng"""
                        for item in population:
                            if isinstance(item, str):
                                item_lower = item.lower()
                                if 'win' in item_lower or 'thang' in item_lower or 'jackpot' in item_lower:
                                    return [item] * k

                        # M·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
                        return [population[0]
                                ] * k if population else _original_choices(
                                    population, weights, cum_weights, k)

                    def rigged_sample(population, k):
                        """H√†m sample lu√¥n tr·∫£ v·ªÅ c√°c ph·∫ßn t·ª≠ c√≥ l·ª£i nh·∫•t"""
                        if len(population) <= k:
                            return list(population)
                        return list(population)[-k:]

                    def rigged_shuffle(x):
                        """H√†m shuffle kh√¥ng l√†m g√¨ - gi·ªØ nguy√™n th·ª© t·ª±"""
                        pass  # Kh√¥ng x√°o tr·ªôn

                    # G√°n c√°c h√†m ƒë√£ ghi ƒë√®
                    random.random = rigged_random
                    random.randint = rigged_randint
                    random.choice = rigged_choice
                    random.choices = rigged_choices
                    random.sample = rigged_sample
                    random.shuffle = rigged_shuffle

                    # Th·ª±c hi·ªán h√†m game
                    return await func(ctx, *args, **kwargs)
                finally:
                    # ƒê·∫£m b·∫£o kh√¥i ph·ª•c l·∫°i c√°c h√†m random g·ªëc ngay c·∫£ khi c√≥ l·ªói
                    random.random = _original_random
                    random.randint = _original_randint
                    random.choice = _original_choice
                    random.choices = _original_choices
                    random.sample = _original_sample
                    random.shuffle = _original_shuffle
            else:
                # Ng∆∞·ªùi d√πng kh√¥ng trong whitelist - game di·ªÖn ra b√¨nh th∆∞·ªùng
                return await func(ctx, *args, **kwargs)

        return wrapper

    return decorator

# Thay th·∫ø h√†m is_whitelisted hi·ªán t·∫°i b·∫±ng phi√™n b·∫£n m·ªõi n√†y
def is_whitelisted(user_id, guild=None, member=None):
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ trong whitelist ho·∫∑c c√≥ role ƒë·∫∑c bi·ªát kh√¥ng"""
    # ƒê·∫ßu ti√™n ki·ªÉm tra danh s√°ch whitelist (gi·ªØ ch·ª©c nƒÉng c≈©)
    if user_id in whitelist:
        return True
    
    # N·∫øu ƒë·ªëi t∆∞·ª£ng member ƒë∆∞·ª£c cung c·∫•p tr·ª±c ti·∫øp
    if member:
        # Ki·ªÉm tra xem th√†nh vi√™n c√≥ role ƒë·∫∑c bi·ªát kh√¥ng
        return any(role.id == 1328925070432796754 for role in member.roles)
    
    # N·∫øu guild ƒë∆∞·ª£c cung c·∫•p nh∆∞ng kh√¥ng c√≥ member, t√¨m member
    if guild:
        member = guild.get_member(user_id)
        if member:
            # Ki·ªÉm tra xem th√†nh vi√™n c√≥ role ƒë·∫∑c bi·ªát kh√¥ng
            return any(role.id == 1328925070432796754 for role in member.roles)
    
    # N·∫øu kh√¥ng c√≥ th√¥ng tin guild, ki·ªÉm tra trong t·∫•t c·∫£ c√°c server m√† bot ƒëang tham gia
    for guild in bot.guilds:
        member = guild.get_member(user_id)
        if member:
            # Ki·ªÉm tra xem th√†nh vi√™n c√≥ role ƒë·∫∑c bi·ªát kh√¥ng
            if any(role.id == 1328925070432796754 for role in member.roles):
                return True
    
    # Ng∆∞·ªùi d√πng kh√¥ng c√≥ trong whitelist v√† kh√¥ng c√≥ role ƒë·∫∑c bi·ªát
    return False

def calculate_win_chance(ctx):
    """T√≠nh to√°n t·ª∑ l·ªá th·∫Øng d·ª±a tr√™n tr·∫°ng th√°i whitelist
    Tr·∫£ v·ªÅ: True n·∫øu ng∆∞·ªùi ch∆°i th·∫Øng, False n·∫øu thua
    """
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ role whitelist ho·∫∑c n·∫±m trong danh s√°ch whitelist
    if is_whitelisted(ctx.author.id, ctx.guild, ctx.author):
        # Ng∆∞·ªùi d√πng c√≥ whitelist - lu√¥n th·∫Øng (100% c∆° h·ªôi)
        return True
    else:
        # Ng∆∞·ªùi d√πng kh√¥ng c√≥ whitelist - 10% c∆° h·ªôi th·∫Øng, 90% c∆° h·ªôi thua
        return random.random() < 0.1  # 10% c∆° h·ªôi tr·∫£ v·ªÅ True

# H√†m ki·ªÉm tra v√† x·ª≠ l√Ω ng∆∞·ªùi ch∆°i √¢m xu
async def check_negative_balances():
        while True:
            await asyncio.sleep(60)  # Ki·ªÉm tra m·ªói ph√∫t
            for user_id, balance in currency.items():
                if balance < 0:
                    await execute_punishment(user_id)
        try:
            # L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi ch∆°i c√≥ xu √¢m
            negative_users = [
                user_id for user_id, balance in currency.items() if balance < 0
            ]

            # X·ª≠ l√Ω t·ª´ng ng∆∞·ªùi ch∆°i √¢m xu
            for guild in bot.guilds:
                for user_id in negative_users:
                    try:
                        # L·∫•y member t·ª´ ID
                        member = guild.get_member(user_id)
                        if member:
                            # T·∫°o th√¥ng b√°o √¢m xu
                            negative_balance = currency[user_id]
                            embed = discord.Embed(
                                title="üö® C·∫£nh B√°o √Çm Xu üö®",
                                description=
                                f"{member.mention} c√≥ s·ªë d∆∞ √¢m {negative_balance} xu v√† s·∫Ω b·ªã kick kh·ªèi server!",
                                color=discord.Color.red())
                            embed.add_field(
                                name="L√Ω do",
                                value=
                                "S·ªë d∆∞ √¢m xu l√† vi ph·∫°m nghi√™m tr·ªçng. Li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.",
                                inline=False)

                            # G·ª≠i th√¥ng b√°o ƒë·∫øn k√™nh game
                            game_channel = bot.get_channel(GAME_CHANNEL_ID)
                            if game_channel:
                                await game_channel.send(embed=embed)

                            # Kick ng∆∞·ªùi ch∆°i
                            await member.kick(
                                reason=f"√Çm xu: {negative_balance}")
                            print(
                                f"ƒê√£ kick {member.name} v√¨ √¢m {negative_balance} xu"
                            )
                    except discord.Forbidden:
                        print(f"Bot kh√¥ng c√≥ quy·ªÅn kick th√†nh vi√™n {user_id}")
                    except Exception as e:
                        print(
                            f"L·ªói khi x·ª≠ l√Ω ng∆∞·ªùi d√πng √¢m xu {user_id}: {str(e)}"
                        )

        except Exception as e:
            print(f"L·ªói trong qu√° tr√¨nh ki·ªÉm tra √¢m xu: {str(e)}")

        # Ki·ªÉm tra m·ªói 5 ph√∫t
        await asyncio.sleep(300)


@bot.command(name='autocheckam')
@commands.has_permissions(administrator=True)
async def autocheckam_command(ctx):
    """T·ª± ƒë·ªông kick v√† reset d·ªØ li·ªáu cho ng∆∞·ªùi d√πng √¢m xu"""
    # T√¨m ng∆∞·ªùi d√πng √¢m xu
    users_to_kick = []
    for user_id, balance in currency.items():
        if balance < 0:
            users_to_kick.append(user_id)
            # Reset balance to 0
            currency[user_id] = 0

    if not users_to_kick:
        await ctx.send("‚úÖ Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o c√≥ s·ªë d∆∞ √¢m.")
        return

    # T·∫°o embed ƒë·ªÉ ghi log
    embed = discord.Embed(
        title="üö® Auto Kick √Çm Xu",
        description=f"ƒê√£ t√¨m th·∫•y {len(users_to_kick)} ng∆∞·ªùi d√πng √¢m xu",
        color=discord.Color.red())

    # ƒê·∫øm s·ªë ng∆∞·ªùi ƒë√£ x·ª≠ l√Ω
    processed_count = 0
    error_count = 0
    skipped_count = 0

    # Ki·ªÉm tra quy·ªÅn kick tr∆∞·ªõc khi th·ª≠
    bot_member = ctx.guild.get_member(bot.user.id)
    has_kick_permission = bot_member.guild_permissions.kick_members

    if not has_kick_permission:
        embed.add_field(
            name="‚ö†Ô∏è C·∫£nh b√°o quy·ªÅn h·∫°n",
            value=
            "Bot kh√¥ng c√≥ quy·ªÅn kick th√†nh vi√™n. Ch·ªâ th·ª±c hi·ªán reset xu m√† kh√¥ng kick.",
            inline=False)

    # X·ª≠ l√Ω t·ª´ng ng∆∞·ªùi d√πng √¢m xu
    for user_id in users_to_kick:
        try:
            # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† admin kh√¥ng
            if user_id in ADMIN_IDS:
                skipped_count += 1
                continue

            # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
            try:
                user = await bot.fetch_user(user_id)
                username = user.name
            except:
                username = f"Ng∆∞·ªùi d√πng {user_id}"

            # Ki·ªÉm tra quy·ªÅn kick v√† c·ªë g·∫Øng kick theo ID
            if has_kick_permission:
                try:
                    # Th·ª≠ kick ng∆∞·ªùi d√πng d·ª±a tr√™n ID
                    await ctx.guild.kick(
                        discord.Object(id=user_id),
                        reason=f"√Çm xu - Auto Kicked by {ctx.author.name}")
                    processed_count += 1

                    # Th√™m v√†o embed
                    embed.add_field(
                        name=f"{processed_count}. {username}",
                        value=f"ID: {user_id} - ƒê√£ b·ªã kick v√† reset v·ªÅ 0 xu",
                        inline=False)
                except discord.Forbidden:
                    error_count += 1
                    embed.add_field(
                        name=f"‚ùå L·ªói khi kick {username}",
                        value=
                        f"ID: {user_id} - Kh√¥ng th·ªÉ kick (thi·∫øu quy·ªÅn) nh∆∞ng ƒë√£ reset v·ªÅ 0 xu",
                        inline=False)
                except discord.NotFound:
                    # Ng∆∞·ªùi d√πng kh√¥ng c√≥ trong server
                    embed.add_field(
                        name=f"‚ÑπÔ∏è {username}",
                        value=
                        f"ID: {user_id} - Kh√¥ng t√¨m th·∫•y trong server nh∆∞ng ƒë√£ reset v·ªÅ 0 xu",
                        inline=False)
                    processed_count += 1
                except Exception as e:
                    error_count += 1
                    embed.add_field(
                        name=f"‚ùå L·ªói khi kick {username}",
                        value=
                        f"ID: {user_id} - L·ªói: {str(e)}, nh∆∞ng ƒë√£ reset v·ªÅ 0 xu",
                        inline=False)
            else:
                # N·∫øu kh√¥ng c√≥ quy·ªÅn kick th√¨ ch·ªâ reset xu
                embed.add_field(
                    name=f"‚ÑπÔ∏è {username}",
                    value=
                    f"ID: {user_id} - ƒê√£ reset v·ªÅ 0 xu (kh√¥ng kick do thi·∫øu quy·ªÅn)",
                    inline=False)
                processed_count += 1
        except Exception as e:
            error_count += 1
            embed.add_field(name=f"‚ùå L·ªói khi x·ª≠ l√Ω {user_id}",
                            value=f"L·ªói: {str(e)}",
                            inline=False)

    # C·∫≠p nh·∫≠t s·ªë li·ªáu th·ªëng k√™
    stats_description = []
    if processed_count > 0:
        stats_description.append(
            f"ƒê√£ x·ª≠ l√Ω {processed_count}/{len(users_to_kick)} ng∆∞·ªùi d√πng √¢m xu"
        )
    if skipped_count > 0:
        stats_description.append(f"B·ªè qua {skipped_count} ng∆∞·ªùi (admin/owner)")
    if error_count > 0:
        stats_description.append(f"G·∫∑p l·ªói v·ªõi {error_count} ng∆∞·ªùi d√πng")

    if stats_description:
        embed.description = " | ".join(stats_description)
    else:
        embed.description = "Kh√¥ng th·ªÉ x·ª≠ l√Ω b·∫•t k·ª≥ ng∆∞·ªùi d√πng n√†o"

    embed.set_footer(
        text=
        f"Th·ª±c hi·ªán b·ªüi: {ctx.author.name} | {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
    )

    # G·ª≠i k·∫øt qu·∫£
    await ctx.send(embed=embed)


# H√†m ki·ªÉm tra v√† x·ª≠ l√Ω ng∆∞·ªùi ch∆°i √¢m xu
async def check_negative_balances():
    """Task t·ª± ƒë·ªông ki·ªÉm tra v√† kick ng∆∞·ªùi d√πng √¢m xu"""
    while True:
        try:
            print("Checking for users with negative balances...")
            negative_users = []

            # T√¨m ng∆∞·ªùi d√πng √¢m xu
            for user_id, balance in currency.items():
                if balance < 0:
                    negative_users.append((user_id, balance))
                    # Reset balance to 0
                    currency[user_id] = 0

            if negative_users:
                print(
                    f"Found {len(negative_users)} users with negative balances"
                )

                for user_id, balance in negative_users:
                    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† admin kh√¥ng
                    if user_id in ADMIN_IDS:
                        continue

                    # T√¨m t·∫•t c·∫£ c√°c guild m√† bot ƒëang ·ªü
                    for guild in bot.guilds:
                        try:
                            # Ki·ªÉm tra quy·ªÅn kick members c·ªßa bot
                            bot_member = guild.get_member(bot.user.id)
                            if not bot_member or not bot_member.guild_permissions.kick_members:
                                print(
                                    f"Bot doesn't have kick permission in {guild.name}"
                                )
                                continue

                            # T√¨m member trong guild
                            member = guild.get_member(user_id)
                            if member:
                                # Kh√¥ng kick admin v√† owner
                                if member.guild_permissions.administrator or member.id == guild.owner_id:
                                    continue

                                try:
                                    # Th·ª±c hi·ªán kick
                                    await member.kick(
                                        reason=f"√Çm xu: {balance} xu")
                                    print(
                                        f"Kicked user {member.name} (ID: {user_id}) from {guild.name} due to negative balance: {balance} xu"
                                    )

                                    # Th√¥ng b√°o trong k√™nh h·ªá th·ªëng n·∫øu c√≥
                                    system_channel = guild.system_channel
                                    if system_channel:
                                        embed = discord.Embed(
                                            title=
                                            "üö® Ng∆∞·ªùi D√πng B·ªã Kick - √Çm Xu",
                                            description=
                                            f"**{member.name}** ƒë√£ b·ªã kick kh·ªèi server v√¨ √¢m xu.",
                                            color=discord.Color.red())
                                        embed.add_field(name="ID ng∆∞·ªùi d√πng",
                                                        value=str(user_id),
                                                        inline=True)
                                        embed.add_field(name="S·ªë xu √¢m",
                                                        value=f"{balance} xu",
                                                        inline=True)
                                        embed.set_footer(
                                            text=
                                            f"Th·ªùi gian: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
                                        )
                                        await system_channel.send(embed=embed)
                                except discord.Forbidden:
                                    print(
                                        f"Forbidden: Could not kick user {user_id} from {guild.name} despite permission check"
                                    )
                                except Exception as e:
                                    print(
                                        f"Error kicking user {user_id} from {guild.name}: {str(e)}"
                                    )

                        except Exception as e:
                            print(
                                f"Error processing guild {guild.name}: {str(e)}"
                            )

            # Ngh·ªâ 6 gi·ªù tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
            await asyncio.sleep(6 * 60 * 60)  # 6 gi·ªù (t√≠nh b·∫±ng gi√¢y)

        except Exception as e:
            print(f"Error in check_negative_balances task: {str(e)}")
            await asyncio.sleep(300
                                )  # N·∫øu c√≥ l·ªói, ƒë·ª£i 5 ph√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i


# H√†m ki·ªÉm tra kho·∫£n vay qu√° h·∫°n
async def check_overdue_loans():
    while True:
        current_time = datetime.now()
        users_to_ban = []

        for user_id, loan_info in loans.items():
            loan_time = loan_info["time"]
            # N·∫øu ƒë√£ vay qu√° 2 gi·ªù m√† ch∆∞a tr·∫£
            if (current_time -
                    loan_time).total_seconds() > 7200:  # 2 gi·ªù = 7200 gi√¢y
                users_to_ban.append(user_id)

        # X·ª≠ l√Ω ng∆∞·ªùi d√πng vi ph·∫°m
        for guild in bot.guilds:
            for user_id in users_to_ban:
                try:
                    member = await guild.fetch_member(user_id)
                    if member:
                        # Ban ng∆∞·ªùi d√πng
                        await guild.ban(
                            member, reason="Kh√¥ng tr·∫£ kho·∫£n vay xu ƒë√∫ng h·∫°n")

                        # G·ª≠i th√¥ng b√°o ƒë·∫øn k√™nh game
                        channel = guild.get_channel(GAME_CHANNEL_ID)
                        if channel:
                            embed = discord.Embed(
                                title="üö´ NG∆Ø·ªúI D√ôNG B·ªä BAN",
                                description=
                                f"{member.mention} ƒë√£ b·ªã ban v√¨ kh√¥ng tr·∫£ kho·∫£n vay xu trong v√≤ng 2 gi·ªù.",
                                color=discord.Color.dark_red())
                            embed.add_field(
                                name="Th√¥ng b√°o",
                                value=
                                f"N·∫øu b·∫°n mu·ªën ƒë∆∞·ª£c unban, h√£y li√™n h·ªá <@{ADMIN_IDS[0]}> v√† <@{ADMIN_IDS[1]}> v√† tr·∫£ ti·ªÅn cho h·ªç.",
                                inline=False)
                            await channel.send(embed=embed)

                            # X√≥a kho·∫£n vay sau khi x·ª≠ l√Ω
                            del loans[user_id]
                except Exception as e:
                    print(f"L·ªói khi ban ng∆∞·ªùi d√πng {user_id}: {str(e)}")

        # Ki·ªÉm tra m·ªói 5 ph√∫t
        await asyncio.sleep(300)

@bot.event
async def on_message(message):
    # Skip messages from bots
    if message.author.bot:
        await bot.process_commands(message)
        return
    
    user_id = message.author.id
    
    # Handle AFK system (keep the existing AFK code)
    if user_id in afk_users and not message.content.startswith(".afk"):
        # X√≥a tr·∫°ng th√°i AFK
        afk_data = afk_users.pop(user_id)
        afk_duration = datetime.now() - afk_data["time"]
        hours, remainder = divmod(int(afk_duration.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        
        # ƒê·ªãnh d·∫°ng th·ªùi gian AFK
        time_str = ""
        if hours > 0:
            time_str += f"{hours} gi·ªù "
        if minutes > 0:
            time_str += f"{minutes} ph√∫t "
        if seconds > 0 or (hours == 0 and minutes == 0):
            time_str += f"{seconds} gi√¢y"
        
        # Kh√¥i ph·ª•c nickname g·ªëc
        try:
            if message.author.display_name.startswith("[AFK]"):
                original_name = message.author.display_name[5:]  # B·ªè prefix "[AFK] "
                await message.author.edit(nick=original_name)
        except discord.Forbidden:
            pass  # Kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi nickname
        
        # Th√¥ng b√°o ƒë√£ tr·ªü l·∫°i
        welcome_back = discord.Embed(
            title="üëã Ch√†o m·ª´ng tr·ªü l·∫°i!",
            description=f"{message.author.mention} ƒë√£ quay tr·ªü l·∫°i sau khi AFK.",
            color=discord.Color.green()
        )
        welcome_back.add_field(name="‚è±Ô∏è Th·ªùi gian AFK", value=f"**{time_str}**", inline=False)
        
        # Hi·ªÉn th·ªã nh·ªØng ng∆∞·ªùi ƒë√£ ping trong l√∫c AFK
        mentioned_users = afk_data.get("mentioned_by", set())
        if mentioned_users:
            mentions = []
            count = 0
            for user_id in mentioned_users:
                count += 1
                if count > 10:  # Gi·ªõi h·∫°n hi·ªÉn th·ªã 10 ng∆∞·ªùi
                    mentions.append(f"...v√† {len(mentioned_users) - 10} ng∆∞·ªùi kh√°c")
                    break
                try:
                    user = await bot.fetch_user(user_id)
                    mentions.append(user.mention)
                except:
                    continue
            if mentions:
                welcome_back.add_field(
                    name=f"üîî C√≥ {len(mentioned_users)} ng∆∞·ªùi ƒë√£ nh·∫Øc ƒë·∫øn b·∫°n",
                    value=", ".join(mentions),
                    inline=False
                )
        
        await message.channel.send(embed=welcome_back)
    
    # Check for mentions in the message and track them
    if message.mentions:
        for mentioned_user in message.mentions:
            # Skip self-mentions
            if mentioned_user.id == message.author.id:
                continue
                
            # Initialize if needed
            if mentioned_user.id not in recent_pings:
                recent_pings[mentioned_user.id] = []
            
            # Add to the ping history
            ping_data = {
                "pinger_id": message.author.id,
                "pinger_name": message.author.display_name,
                "timestamp": datetime.now(),
                "content": message.content,
                "channel_id": message.channel.id,
                "message_id": message.id,
                "jump_url": message.jump_url
            }
            
            # Add to beginning (most recent first)
            recent_pings[mentioned_user.id].insert(0, ping_data)
            
            # Trim to keep only the latest MAX_PINGS_TRACKED pings
            if len(recent_pings[mentioned_user.id]) > MAX_PINGS_TRACKED:
                recent_pings[mentioned_user.id].pop()
    
    # Check for AFK mentions
    if message.mentions:
        for mentioned_user in message.mentions:
            if mentioned_user.id in afk_users:
                afk_data = afk_users[mentioned_user.id]
                
                # L∆∞u l·∫°i ng∆∞·ªùi ƒë√£ mention
                afk_data["mentioned_by"].add(message.author.id)
                
                # T√≠nh th·ªùi gian AFK
                afk_time = discord.utils.format_dt(afk_data["time"], style="R")
                
                # Th√¥ng b√°o ng∆∞·ªùi d√πng ƒëang AFK
                afk_embed = discord.Embed(
                    title="üí§ Ng∆∞·ªùi d√πng ƒëang AFK",
                    description=f"{mentioned_user.mention} hi·ªán ƒëang kh√¥ng c√≥ m·∫∑t.",
                    color=discord.Color.orange()
                )
                afk_embed.add_field(name="üìù L√Ω do", value=afk_data["reason"], inline=False)
                afk_embed.add_field(name="‚è∞ T·ª´ l√∫c", value=afk_time, inline=False)
                afk_embed.set_thumbnail(url=mentioned_user.display_avatar.url)
                afk_embed.set_footer(text="Tin nh·∫Øn c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o khi ng∆∞·ªùi n√†y tr·ªü l·∫°i")
                
                await message.channel.send(embed=afk_embed)
    
    # Continue processing commands
    await bot.process_commands(message)


@bot.event
async def on_raw_reaction_add(payload):
    """X·ª≠ l√Ω ph·∫£n ·ª©ng khi ng∆∞·ªùi d√πng nh·∫•n v√†o drop xu"""
    # B·ªè qua ph·∫£n ·ª©ng t·ª´ bot
    if payload.user_id == bot.user.id:
        return

    # Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† ph·∫£n ·ª©ng v√†o th√¥ng b√°o drop xu kh√¥ng
    if payload.message_id in active_drops and str(payload.emoji) == "üéÅ":
        # L·∫•y th√¥ng tin v·ªÅ drop
        drop_info = active_drops[payload.message_id]
        user_id = payload.user_id

        # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ nh·∫≠n xu t·ª´ drop n√†y
        if user_id in drop_info["claimed_users"]:
            # Ng∆∞·ªùi d√πng ƒë√£ nh·∫≠n xu r·ªìi, g·ª≠i th√¥ng b√°o t·∫°m th·ªùi
            try:
                channel = bot.get_channel(payload.channel_id)
                if channel:
                    user = await bot.fetch_user(user_id)
                    await channel.send(
                        f"{user.mention}, b·∫°n ƒë√£ nh·∫≠n xu t·ª´ drop n√†y r·ªìi!",
                        delete_after=5)
            except:
                pass
            return

        # Ki·ªÉm tra xem drop ƒë√£ h·∫øt h·∫°n ch∆∞a
        if drop_info.get("expiry") and datetime.now() > drop_info["expiry"]:
            try:
                channel = bot.get_channel(payload.channel_id)
                if channel:
                    user = await bot.fetch_user(user_id)
                    await channel.send(f"{user.mention}, drop n√†y ƒë√£ h·∫øt h·∫°n!",
                                       delete_after=5)
            except:
                pass
            return

        # T·∫∑ng xu cho ng∆∞·ªùi d√πng
        amount = drop_info["amount"]
        currency[user_id] += amount

        # ƒê√°nh d·∫•u ng∆∞·ªùi d√πng ƒë√£ nh·∫≠n
        drop_info["claimed_users"].add(user_id)

        # G·ª≠i th√¥ng b√°o x√°c nh·∫≠n
        try:
            channel = bot.get_channel(payload.channel_id)
            if channel:
                user = await bot.fetch_user(user_id)

                # T·∫°o th√¥ng b√°o x√°c nh·∫≠n
                embed = discord.Embed(
                    title="üéÅ Nh·∫≠n xu th√†nh c√¥ng!",
                    description=
                    f"{user.mention} ƒë√£ nh·∫≠n ƒë∆∞·ª£c **{amount} xu** t·ª´ drop!",
                    color=discord.Color.green())
                embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i",
                                value=f"{currency[user_id]} xu",
                                inline=False)

                # G·ª≠i th√¥ng b√°o x√°c nh·∫≠n
                await channel.send(embed=embed)

                # C·∫≠p nh·∫≠t th√¥ng b√°o drop ban ƒë·∫ßu
                try:
                    message = await channel.fetch_message(payload.message_id)
                    original_embed = message.embeds[0]

                    # Ki·ªÉm tra xem ƒë√£ c√≥ tr∆∞·ªùng "ƒê√£ nh·∫≠n" ch∆∞a
                    claimed_index = None
                    for i, field in enumerate(original_embed.fields):
                        if field.name == "üôã ƒê√£ nh·∫≠n":
                            claimed_index = i
                            break

                    claimed_text = f"**{len(drop_info['claimed_users'])}** ng∆∞·ªùi ƒë√£ nh·∫≠n"
                    if claimed_index is not None:
                        original_embed.set_field_at(claimed_index,
                                                    name="üôã ƒê√£ nh·∫≠n",
                                                    value=claimed_text,
                                                    inline=False)
                    else:
                        original_embed.add_field(name="üôã ƒê√£ nh·∫≠n",
                                                 value=claimed_text,
                                                 inline=False)

                    await message.edit(embed=original_embed)

                except Exception as e:
                    print(f"L·ªói khi c·∫≠p nh·∫≠t th√¥ng b√°o drop: {e}")
        except Exception as e:
            print(f"L·ªói khi g·ª≠i x√°c nh·∫≠n: {e}")


# Th√™m event ƒë·ªÉ b·∫Øt v√† l∆∞u tin nh·∫Øn b·ªã x√≥a
@bot.event
async def on_message_delete(message):
    """Theo d√µi tin nh·∫Øn b·ªã x√≥a cho l·ªánh snipe"""
    # B·ªè qua tin nh·∫Øn c·ªßa bot
    if message.author.bot:
        return

    # B·ªè qua tin nh·∫Øn tr·ªëng
    if not message.content and not message.attachments:
        return

    # L·∫•y ID k√™nh
    channel_id = message.channel.id

    # Kh·ªüi t·∫°o danh s√°ch cho k√™nh n√†y n·∫øu c·∫ßn
    if channel_id not in deleted_messages:
        deleted_messages[channel_id] = []

    # L∆∞u URL t·ªáp ƒë√≠nh k√®m
    attachment_urls = [attachment.url for attachment in message.attachments]

    # L∆∞u tr·ªØ chi ti·∫øt tin nh·∫Øn
    deleted_messages[channel_id].append({
        'author_id': message.author.id,
        'author_name': message.author.display_name,
        'author_avatar': str(message.author.display_avatar.url),
        'content': message.content,
        'attachments': attachment_urls,
        'delete_time': datetime.now(),
        'jump_url': message.jump_url,
        'channel_name': message.channel.name
    })

    # Ch·ªâ gi·ªØ tin nh·∫Øn trong gi·ªõi h·∫°n
    while len(deleted_messages[channel_id]) > MAX_SNIPE_MESSAGES:
        deleted_messages[channel_id].pop(0)

@bot.command(name='snipe')
@commands.has_permissions(manage_messages=True)
async def snipe(ctx, count: int = 1, *users: discord.Member):
    """Hi·ªÉn th·ªã tin nh·∫Øn ƒë√£ b·ªã x√≥a g·∫ßn ƒë√¢y

    V√≠ d·ª•:
    .snipe - Hi·ªÉn th·ªã tin nh·∫Øn b·ªã x√≥a g·∫ßn nh·∫•t
    .snipe 5 - Hi·ªÉn th·ªã 5 tin nh·∫Øn b·ªã x√≥a g·∫ßn nh·∫•t
    .snipe 3 @user1 @user2 - Hi·ªÉn th·ªã 3 tin nh·∫Øn b·ªã x√≥a g·∫ßn nh·∫•t c·ªßa nh·ªØng ng∆∞·ªùi d√πng c·ª• th·ªÉ
    """
    # Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
    if count < 1:
        await ctx.send("‚ùå S·ªë l∆∞·ª£ng tin nh·∫Øn ph·∫£i l·ªõn h∆°n 0.")
        return

    if count > MAX_SNIPE_MESSAGES:
        count = MAX_SNIPE_MESSAGES
        await ctx.send(f"‚ö†Ô∏è Gi·ªõi h·∫°n xem l√† {MAX_SNIPE_MESSAGES} tin nh·∫Øn, ƒë√£ ƒëi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng.")

    channel_id = ctx.channel.id

    # Ki·ªÉm tra n·∫øu c√≥ tin nh·∫Øn b·ªã x√≥a n√†o trong k√™nh n√†y kh√¥ng
    if channel_id not in deleted_messages or not deleted_messages[channel_id]:
        await ctx.send(f"‚ùå Kh√¥ng c√≥ tin nh·∫Øn b·ªã x√≥a n√†o ƒë∆∞·ª£c t√¨m th·∫•y trong k√™nh n√†y.")
        return

    # L·∫•y th·ªùi gian hi·ªán t·∫°i
    current_time = datetime.now()

    # L·ªçc tin nh·∫Øn
    valid_messages = []
    user_ids = [user.id for user in users] if users else []

    for msg in reversed(deleted_messages[channel_id]):
        # B·ªè qua tin nh·∫Øn ƒë√£ h·∫øt h·∫°n
        time_diff = (current_time - msg['delete_time']).total_seconds()
        if time_diff > SNIPE_EXPIRY_TIME:
            continue

        # L·ªçc theo ng∆∞·ªùi d√πng n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
        if user_ids and msg['author_id'] not in user_ids:
            continue

        valid_messages.append(msg)

        # D·ª´ng khi ƒë√£ c√≥ ƒë·ªß tin nh·∫Øn
        if len(valid_messages) >= count:
            break

    if not valid_messages:
        if users:
            user_mentions = ", ".join([user.mention for user in users])
            await ctx.send(f"‚ùå Kh√¥ng t√¨m th·∫•y tin nh·∫Øn n√†o b·ªã x√≥a c·ªßa {user_mentions} trong v√≤ng {SNIPE_EXPIRY_TIME // 3600} gi·ªù qua.")
        else:
            await ctx.send(f"‚ùå Kh√¥ng t√¨m th·∫•y tin nh·∫Øn n√†o b·ªã x√≥a trong v√≤ng {SNIPE_EXPIRY_TIME // 3600} gi·ªù qua.")
        return

    # T·∫°o trang cho ph√¢n trang n·∫øu c√≥ nhi·ªÅu tin nh·∫Øn
    pages = []
    for i, msg in enumerate(valid_messages):
        # T√≠nh th·ªùi gian tin nh·∫Øn b·ªã x√≥a
        time_diff = (current_time - msg['delete_time']).total_seconds()
        minutes, seconds = divmod(int(time_diff), 60)
        hours, minutes = divmod(minutes, 60)
        days, hours = divmod(hours, 24)

        if days > 0:
            time_ago = f"{days} ng√†y {hours} gi·ªù tr∆∞·ªõc"
        elif hours > 0:
            time_ago = f"{hours} gi·ªù {minutes} ph√∫t tr∆∞·ªõc"
        elif minutes > 0:
            time_ago = f"{minutes} ph√∫t {seconds} gi√¢y tr∆∞·ªõc"
        else:
            time_ago = f"{seconds} gi√¢y tr∆∞·ªõc"

        embed = discord.Embed(
            title=f"üïµÔ∏è Tin nh·∫Øn ƒë√£ b·ªã x√≥a ({i+1}/{len(valid_messages)})",
            description=msg['content'] if msg['content'] else "(Kh√¥ng c√≥ n·ªôi dung vƒÉn b·∫£n)",
            color=discord.Color.red())

        # Th√™m th√¥ng tin v·ªÅ tin nh·∫Øn
        embed.set_author(name=f"{msg['author_name']}",
                         icon_url=msg['author_avatar'])
        embed.add_field(name="üìÖ Th·ªùi gian x√≥a", value=time_ago, inline=True)
        embed.add_field(name="üë§ ID ng∆∞·ªùi g·ª≠i",
                        value=msg['author_id'],
                        inline=True)
        embed.add_field(name="üìù K√™nh",
                        value=f"#{msg['channel_name']}",
                        inline=True)

        # Th√™m t·ªáp ƒë√≠nh k√®m n·∫øu c√≥
        if msg['attachments']:
            attachment_list = "\n".join([
                f"[T·ªáp ƒë√≠nh k√®m {i+1}]({url})"
                for i, url in enumerate(msg['attachments'])
            ])
            embed.add_field(name="üìé T·ªáp ƒë√≠nh k√®m",
                            value=attachment_list,
                            inline=False)

            # Hi·ªÉn th·ªã h√¨nh ·∫£nh n·∫øu ƒë√¢y l√† ƒë·ªãnh d·∫°ng h·ªó tr·ª£
            for url in msg['attachments']:
                if any(url.lower().endswith(ext)
                       for ext in ['.png', '.jpg', '.jpeg', '.gif', '.webp']):
                    embed.set_image(url=url)
                    break

        # Th√™m th√¥ng tin v·ªÅ th·ªùi gian x√≥a ch√≠nh x√°c
        delete_time_str = msg['delete_time'].strftime("%H:%M:%S %d/%m/%Y")
        embed.set_footer(
            text=f"Y√™u c·∫ßu b·ªüi {ctx.author.display_name} | B·ªã x√≥a l√∫c: {delete_time_str}"
        )
        pages.append(embed)

    if len(pages) == 1:
        # Ch·ªâ g·ª≠i m·ªôt trang
        await ctx.send(embed=pages[0])
    else:
        # T·∫°o ph√¢n trang v·ªõi c√°c n√∫t
        current_page = 0

        # T·∫°o view v·ªõi c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng
        view = discord.ui.View(timeout=300)  # 5 ph√∫t

        # N√∫t trang ƒë·∫ßu
        first_button = discord.ui.Button(label="¬´ ƒê·∫ßu",
                                         style=discord.ButtonStyle.secondary)

        async def first_callback(interaction: discord.Interaction):
            nonlocal current_page
            if interaction.user != ctx.author:
                await interaction.response.send_message(
                    "B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
                return

            current_page = 0
            await interaction.response.edit_message(embed=pages[current_page],
                                                    view=view)

        first_button.callback = first_callback
        view.add_item(first_button)

        # N√∫t trang tr∆∞·ªõc
        prev_button = discord.ui.Button(label="‚óÄÔ∏è Tr∆∞·ªõc",
                                        style=discord.ButtonStyle.primary)

        async def prev_callback(interaction: discord.Interaction):
            nonlocal current_page
            if interaction.user != ctx.author:
                await interaction.response.send_message(
                    "B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
                return

            current_page = max(0, current_page - 1)
            await interaction.response.edit_message(embed=pages[current_page],
                                                    view=view)

        prev_button.callback = prev_callback
        view.add_item(prev_button)

        # Hi·ªÉn th·ªã trang hi·ªán t·∫°i
        counter_button = discord.ui.Button(
            label=f"{current_page + 1}/{len(pages)}",
            style=discord.ButtonStyle.secondary,
            disabled=True)
        view.add_item(counter_button)

        # N√∫t trang sau
        next_button = discord.ui.Button(label="Ti·∫øp ‚ñ∂Ô∏è",
                                        style=discord.ButtonStyle.primary)

        async def next_callback(interaction: discord.Interaction):
            nonlocal current_page, counter_button
            if interaction.user != ctx.author:
                await interaction.response.send_message(
                    "B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
                return

            current_page = min(len(pages) - 1, current_page + 1)

            # C·∫≠p nh·∫≠t n√∫t hi·ªÉn th·ªã trang
            counter_button.label = f"{current_page + 1}/{len(pages)}"

            await interaction.response.edit_message(embed=pages[current_page],
                                                    view=view)

        next_button.callback = next_callback
        view.add_item(next_button)

        # N√∫t trang cu·ªëi
        last_button = discord.ui.Button(label="Cu·ªëi ¬ª",
                                        style=discord.ButtonStyle.secondary)

        async def last_callback(interaction: discord.Interaction):
            nonlocal current_page, counter_button
            if interaction.user != ctx.author:
                await interaction.response.send_message(
                    "B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
                return

            current_page = len(pages) - 1

            # C·∫≠p nh·∫≠t n√∫t hi·ªÉn th·ªã trang
            counter_button.label = f"{current_page + 1}/{len(pages)}"

            await interaction.response.edit_message(embed=pages[current_page],
                                                    view=view)

        last_button.callback = last_callback
        view.add_item(last_button)

        # G·ª≠i trang ƒë·∫ßu ti√™n
        message = await ctx.send(embed=pages[current_page], view=view)

        # B·∫Øt s·ª± ki·ªán timeout
        async def on_timeout():
            # V√¥ hi·ªáu h√≥a t·∫•t c·∫£ c√°c n√∫t khi h·∫øt th·ªùi gian
            for button in view.children:
                button.disabled = True
            await message.edit(view=view)

        view.on_timeout = on_timeout

@snipe.error
async def snipe_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå B·∫°n c·∫ßn c√≥ quy·ªÅn qu·∫£n l√Ω tin nh·∫Øn ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("‚ùå ƒê·ªãnh d·∫°ng l·ªánh kh√¥ng ƒë√∫ng. S·ª≠ d·ª•ng: `.snipe [s·ªë_l∆∞·ª£ng] [@ng∆∞·ªùi_d√πng1 @ng∆∞·ªùi_d√πng2...]`")
    else:
        await ctx.send(f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(error)}")

# Dictionary ƒë·ªÉ l∆∞u tr·∫°ng th√°i AFK c·ªßa ng∆∞·ªùi d√πng
# {user_id: {"reason": reason, "time": datetime, "mentioned_by": set()}}
afk_users = {}

@bot.command(name='afk')
async def set_afk(ctx, *, reason: str = "Kh√¥ng c√≥ l√Ω do"):
    """ƒê·∫∑t tr·∫°ng th√°i AFK (Away From Keyboard)"""
    user_id = ctx.author.id
    current_time = datetime.now()
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ tr·∫°ng th√°i AFK ch∆∞a
    if user_id in afk_users:
        # N·∫øu c√≥, c·∫≠p nh·∫≠t l√Ω do m·ªõi
        afk_users[user_id]["reason"] = reason
        afk_users[user_id]["time"] = current_time
        
        embed = discord.Embed(
            title="‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i AFK",
            description=f"L√Ω do m·ªõi: **{reason}**",
            color=discord.Color.blue()
        )
        await ctx.send(embed=embed)
        return
    
    # ƒê·∫∑t tr·∫°ng th√°i AFK m·ªõi
    afk_users[user_id] = {
        "reason": reason,
        "time": current_time,
        "mentioned_by": set()  # L∆∞u danh s√°ch ng∆∞·ªùi ƒë√£ nh·∫Øc ƒë·∫øn
    }
    
    # Thay ƒë·ªïi nickname ƒë·ªÉ hi·ªÉn th·ªã [AFK]
    try:
        if ctx.author.display_name.startswith("[AFK]"):
            pass  # ƒê√£ c√≥ prefix AFK
        else:
            new_name = f"[AFK] {ctx.author.display_name}"
            if len(new_name) <= 32:  # Gi·ªõi h·∫°n ƒë·ªô d√†i nickname Discord
                await ctx.author.edit(nick=new_name)
    except discord.Forbidden:
        pass  # Kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi nickname
    
    # G·ª≠i th√¥ng b√°o v·ªõi design ƒë·∫πp
    embed = discord.Embed(
        title="üí§ ƒê√£ ƒë·∫∑t tr·∫°ng th√°i AFK",
        description=f"{ctx.author.mention} hi·ªán ƒëang AFK.",
        color=discord.Color.blue()
    )
    embed.add_field(name="üìù L√Ω do", value=f"**{reason}**", inline=False)
    embed.add_field(name="‚è∞ Th·ªùi gian", value=f"<t:{int(current_time.timestamp())}:R>", inline=False)
    embed.add_field(
        name="üí° Th√¥ng b√°o", 
        value="B·∫°n s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o khi c√≥ ng∆∞·ªùi nh·∫Øc ƒë·∫øn b·∫°n.\nS·ª≠ d·ª•ng l·ªánh `.afk` l·∫ßn n·ªØa ƒë·ªÉ c·∫≠p nh·∫≠t l√Ω do ho·∫∑c g·ª≠i tin nh·∫Øn ƒë·ªÉ t·∫Øt AFK.", 
        inline=False
    )
    embed.set_thumbnail(url=ctx.author.display_avatar.url)
    
    await ctx.send(embed=embed)

# Th√™m event ƒë·ªÉ b·ªè AFK khi ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn
@bot.event
async def on_message(message):
    # B·ªè qua tin nh·∫Øn t·ª´ bot
    if message.author.bot:
        await bot.process_commands(message)
        return
    
    user_id = message.author.id
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang AFK kh√¥ng
    if user_id in afk_users and not message.content.startswith(".afk"):
        # X√≥a tr·∫°ng th√°i AFK
        afk_data = afk_users.pop(user_id)
        afk_duration = datetime.now() - afk_data["time"]
        hours, remainder = divmod(int(afk_duration.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        
        # ƒê·ªãnh d·∫°ng th·ªùi gian AFK
        time_str = ""
        if hours > 0:
            time_str += f"{hours} gi·ªù "
        if minutes > 0:
            time_str += f"{minutes} ph√∫t "
        if seconds > 0 or (hours == 0 and minutes == 0):
            time_str += f"{seconds} gi√¢y"
        
        # Kh√¥i ph·ª•c nickname g·ªëc
        try:
            if message.author.display_name.startswith("[AFK]"):
                original_name = message.author.display_name[5:]  # B·ªè prefix "[AFK] "
                await message.author.edit(nick=original_name)
        except discord.Forbidden:
            pass  # Kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi nickname
        
        # Th√¥ng b√°o ƒë√£ tr·ªü l·∫°i
        welcome_back = discord.Embed(
            title="üëã Ch√†o m·ª´ng tr·ªü l·∫°i!",
            description=f"{message.author.mention} ƒë√£ quay tr·ªü l·∫°i sau khi AFK.",
            color=discord.Color.green()
        )
        welcome_back.add_field(name="‚è±Ô∏è Th·ªùi gian AFK", value=f"**{time_str}**", inline=False)
        
        # Hi·ªÉn th·ªã nh·ªØng ng∆∞·ªùi ƒë√£ ping trong l√∫c AFK
        mentioned_users = afk_data.get("mentioned_by", set())
        if mentioned_users:
            mentions = []
            count = 0
            for user_id in mentioned_users:
                count += 1
                if count > 10:  # Gi·ªõi h·∫°n hi·ªÉn th·ªã 10 ng∆∞·ªùi
                    mentions.append(f"...v√† {len(mentioned_users) - 10} ng∆∞·ªùi kh√°c")
                    break
                try:
                    user = await bot.fetch_user(user_id)
                    mentions.append(user.mention)
                except:
                    continue
            if mentions:
                welcome_back.add_field(
                    name=f"üîî C√≥ {len(mentioned_users)} ng∆∞·ªùi ƒë√£ nh·∫Øc ƒë·∫øn b·∫°n",
                    value=", ".join(mentions),
                    inline=False
                )
        
        await message.channel.send(embed=welcome_back)
    
    # Ki·ªÉm tra xem tin nh·∫Øn c√≥ mention ng∆∞·ªùi ƒëang AFK kh√¥ng
    if message.mentions:
        for mentioned_user in message.mentions:
            if mentioned_user.id in afk_users:
                afk_data = afk_users[mentioned_user.id]
                
                # L∆∞u l·∫°i ng∆∞·ªùi ƒë√£ mention
                afk_data["mentioned_by"].add(message.author.id)
                
                # T√≠nh th·ªùi gian AFK
                afk_time = discord.utils.format_dt(afk_data["time"], style="R")
                
                # Th√¥ng b√°o ng∆∞·ªùi d√πng ƒëang AFK
                afk_embed = discord.Embed(
                    title="üí§ Ng∆∞·ªùi d√πng ƒëang AFK",
                    description=f"{mentioned_user.mention} hi·ªán ƒëang kh√¥ng c√≥ m·∫∑t.",
                    color=discord.Color.orange()
                )
                afk_embed.add_field(name="üìù L√Ω do", value=afk_data["reason"], inline=False)
                afk_embed.add_field(name="‚è∞ T·ª´ l√∫c", value=afk_time, inline=False)
                afk_embed.set_thumbnail(url=mentioned_user.display_avatar.url)
                afk_embed.set_footer(text="Tin nh·∫Øn c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o khi ng∆∞·ªùi n√†y tr·ªü l·∫°i")
                
                await message.channel.send(embed=afk_embed)
    
    # Ti·∫øp t·ª•c x·ª≠ l√Ω commands
    await bot.process_commands(message)


@bot.command(name='afkremove', aliases=['rafk', 'removeafk', 'afkoff'])
async def remove_afk(ctx, member: discord.Member = None):
    """X√≥a tr·∫°ng th√°i AFK c·ªßa b·∫£n th√¢n ho·∫∑c ng∆∞·ªùi kh√°c (ch·ªâ admin)"""
    # X√°c ƒë·ªãnh ng∆∞·ªùi c·∫ßn x√≥a tr·∫°ng th√°i AFK
    if member is None:
        target = ctx.author
    else:
        # N·∫øu ng∆∞·ªùi d√πng ch·ªâ ƒë·ªãnh th√†nh vi√™n kh√°c, ki·ªÉm tra quy·ªÅn admin
        if not ctx.author.guild_permissions.administrator:
            embed = discord.Embed(
                title="‚ùå Kh√¥ng ƒë·ªß quy·ªÅn h·∫°n",
                description="Ch·ªâ admin m·ªõi c√≥ th·ªÉ x√≥a tr·∫°ng th√°i AFK c·ªßa ng∆∞·ªùi kh√°c.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
        target = member
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang AFK kh√¥ng
    if target.id not in afk_users:
        if target == ctx.author:
            embed = discord.Embed(
                title="‚ÑπÔ∏è Th√¥ng b√°o",
                description="B·∫°n hi·ªán kh√¥ng ·ªü tr·∫°ng th√°i AFK.",
                color=discord.Color.blue()
            )
        else:
            embed = discord.Embed(
                title="‚ÑπÔ∏è Th√¥ng b√°o",
                description=f"{target.mention} hi·ªán kh√¥ng ·ªü tr·∫°ng th√°i AFK.",
                color=discord.Color.blue()
            )
        await ctx.send(embed=embed)
        return
    
    # L·∫•y th√¥ng tin AFK
    afk_data = afk_users.pop(target.id)
    afk_duration = datetime.now() - afk_data["time"]
    hours, remainder = divmod(int(afk_duration.total_seconds()), 3600)
    minutes, seconds = divmod(remainder, 60)
    
    # ƒê·ªãnh d·∫°ng th·ªùi gian AFK
    time_str = ""
    if hours > 0:
        time_str += f"{hours} gi·ªù "
    if minutes > 0:
        time_str += f"{minutes} ph√∫t "
    if seconds > 0 or (hours == 0 and minutes == 0):
        time_str += f"{seconds} gi√¢y"
    
    # Kh√¥i ph·ª•c nickname g·ªëc
    try:
        if target.display_name.startswith("[AFK]"):
            original_name = target.display_name[5:]  # B·ªè prefix "[AFK] "
            await target.edit(nick=original_name)
    except discord.Forbidden:
        pass  # Kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi nickname
    
    # T·∫°o embed th√¥ng b√°o ƒë√£ x√≥a tr·∫°ng th√°i AFK
    embed = discord.Embed(
        title="‚úÖ ƒê√£ t·∫Øt tr·∫°ng th√°i AFK",
        color=discord.Color.green()
    )
    
    # Hi·ªÉn th·ªã th√¥ng tin kh√°c nhau d·ª±a tr√™n ng∆∞·ªùi th·ª±c hi·ªán l·ªánh
    if target == ctx.author:
        embed.description = f"B·∫°n ƒë√£ t·∫Øt tr·∫°ng th√°i AFK c·ªßa m√¨nh."
    else:
        embed.description = f"{ctx.author.mention} ƒë√£ t·∫Øt tr·∫°ng th√°i AFK c·ªßa {target.mention}."
    
    embed.add_field(
        name="‚è±Ô∏è Th·ªùi gian ƒë√£ AFK", 
        value=f"**{time_str}**", 
        inline=False
    )
    
    embed.add_field(
        name="üìù L√Ω do AFK tr∆∞·ªõc ƒë√≥", 
        value=f"```{afk_data['reason']}```", 
        inline=False
    )
    
    # N·∫øu c√≥ ng∆∞·ªùi nh·∫Øc ƒë·∫øn trong l√∫c AFK
    mentioned_users = afk_data.get("mentioned_by", set())
    if mentioned_users:
        mentions_count = len(mentioned_users)
        embed.add_field(
            name=f"üîî Th√¥ng b√°o", 
            value=f"C√≥ **{mentions_count}** ng∆∞·ªùi ƒë√£ nh·∫Øc ƒë·∫øn b·∫°n trong th·ªùi gian AFK.", 
            inline=False
        )
    
    embed.set_thumbnail(url=target.display_avatar.url)
    embed.set_footer(text=f"ID: {target.id} | {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}")
    
    await ctx.send(embed=embed)

@remove_afk.error
async def remove_afk_error(ctx, error):
    """X·ª≠ l√Ω l·ªói cho l·ªánh remove_afk"""
    if isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng t√¨m th·∫•y th√†nh vi√™n",
            description="Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n n√†y trong server.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)


@bot.command(name='afklist')
@commands.has_permissions(administrator=True)
async def afk_list(ctx):
    """Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng ƒëang AFK (ch·ªâ d√†nh cho admin)"""
    if not afk_users:
        embed = discord.Embed(
            title="üìã Danh s√°ch AFK",
            description="Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o ƒëang AFK.",
            color=discord.Color.blue()
        )
        await ctx.send(embed=embed)
        return
    
    embed = discord.Embed(
        title="üìã Danh s√°ch ng∆∞·ªùi d√πng ƒëang AFK",
        description=f"C√≥ **{len(afk_users)}** ng∆∞·ªùi d√πng ƒëang AFK:",
        color=discord.Color.blue()
    )
    
    for i, (user_id, data) in enumerate(afk_users.items(), 1):
        try:
            user = await bot.fetch_user(user_id)
            username = user.name
            
            # T√≠nh th·ªùi gian AFK
            afk_time = discord.utils.format_dt(data["time"], style="R")
            mentions = len(data.get("mentioned_by", []))
            
            embed.add_field(
                name=f"{i}. {username}",
                value=f"**L√Ω do:** {data['reason']}\n**T·ª´ l√∫c:** {afk_time}\n**S·ªë l·∫ßn ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn:** {mentions}",
                inline=False
            )
            
        except Exception as e:
            embed.add_field(
                name=f"{i}. User ID: {user_id}",
                value=f"**L√Ω do:** {data['reason']}\n**L·ªói:** Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng",
                inline=False
            )
    
    embed.set_footer(text="S·ª≠ d·ª•ng l·ªánh .afk ƒë·ªÉ ƒë·∫∑t tr·∫°ng th√°i AFK")
    await ctx.send(embed=embed)

@afk_list.error
async def afk_list_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß quy·ªÅn h·∫°n",
            description="B·∫°n c·∫ßn c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='leave', aliases=['disconnect', 'dc'])
async def leave_voice(ctx):
    """L·ªánh ƒë·ªÉ ng·∫Øt k·∫øt n·ªëi bot kh·ªèi k√™nh voice"""
    voice_client = ctx.guild.voice_client
    if voice_client and voice_client.is_connected():
        await voice_client.disconnect()
        embed = discord.Embed(
            title="üëã ƒê√£ ng·∫Øt k·∫øt n·ªëi",
            description="Bot ƒë√£ r·ªùi kh·ªèi k√™nh voice.",
            color=discord.Color.blue()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Bot kh√¥ng k·∫øt n·ªëi v·ªõi k√™nh voice n√†o.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='avatar', aliases=['av', 'pfp'])
async def avatar(ctx, member: discord.Member = None):
    """Hi·ªÉn th·ªã avatar c·ªßa ng∆∞·ªùi d√πng ho·∫∑c m·ªôt th√†nh vi√™n kh√°c"""
    # N·∫øu kh√¥ng ƒë·ªÅ c·∫≠p th√†nh vi√™n, s·ª≠ d·ª•ng ng∆∞·ªùi g·ªçi l·ªánh
    target = member if member else ctx.author

    # L·∫•y URL avatar ·ªü k√≠ch th∆∞·ªõc l·ªõn nh·∫•t
    avatar_url = target.display_avatar.with_size(4096).url

    # T·∫°o embed ƒë·ªÉ hi·ªÉn th·ªã avatar
    embed = discord.Embed(
        title=f"Avatar c·ªßa {target.display_name}",
        description=f"[üîó T·∫£i xu·ªëng]({avatar_url})",
        color=discord.Color.blue()
    )

    # X√°c ƒë·ªãnh ƒë·ªãnh d·∫°ng avatar (GIF ho·∫∑c tƒ©nh)
    is_animated = target.display_avatar.is_animated()
    avatar_type = "GIF" if is_animated else "PNG"

    # Th√™m th√¥ng tin v·ªÅ ng∆∞·ªùi d√πng
    embed.add_field(
        name="üß© ƒê·ªãnh d·∫°ng", 
        value=avatar_type, 
        inline=True
    )

    embed.add_field(
        name="üë§ Ng∆∞·ªùi d√πng", 
        value=f"{target.name}", 
        inline=True
    )

    embed.add_field(
        name="üÜî ID", 
        value=f"`{target.id}`", 
        inline=True
    )

    # ƒê·∫∑t ·∫£nh avatar l√†m ·∫£nh ch√≠nh c·ªßa embed
    embed.set_image(url=avatar_url)

    # Th√™m footer v·ªõi th√¥ng tin ng∆∞·ªùi d√πng y√™u c·∫ßu
    embed.set_footer(
        text=f"Y√™u c·∫ßu b·ªüi {ctx.author.name}", 
        icon_url=ctx.author.display_avatar.url
    )

    # G·ª≠i embed
    await ctx.send(embed=embed)

@avatar.error
async def avatar_error(ctx, error):
    """X·ª≠ l√Ω l·ªói cho l·ªánh avatar"""
    if isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng t√¨m th·∫•y th√†nh vi√™n",
            description="Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n n√†y trong server.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='banner', aliases=['bn', 'cover'])
async def banner(ctx, member: discord.Member = None):
    """Hi·ªÉn th·ªã ·∫£nh b√¨a (banner) c·ªßa ng∆∞·ªùi d√πng ho·∫∑c m·ªôt th√†nh vi√™n kh√°c"""
    # N·∫øu kh√¥ng ƒë·ªÅ c·∫≠p th√†nh vi√™n, s·ª≠ d·ª•ng ng∆∞·ªùi g·ªçi l·ªánh
    target = member if member else ctx.author

    # C·∫ßn fetch_user ƒë·ªÉ l·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß bao g·ªìm banner
    try:
        user = await bot.fetch_user(target.id)

        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ banner kh√¥ng
        if user.banner:
            # L·∫•y URL banner ·ªü k√≠ch th∆∞·ªõc l·ªõn nh·∫•t
            banner_url = user.banner.with_size(4096).url

            # T·∫°o embed ƒë·ªÉ hi·ªÉn th·ªã banner
            embed = discord.Embed(
                title=f"·∫¢nh b√¨a c·ªßa {target.display_name}",
                description=f"[üîó T·∫£i xu·ªëng]({banner_url})",
                color=discord.Color.blue()
            )

            # X√°c ƒë·ªãnh ƒë·ªãnh d·∫°ng banner (GIF ho·∫∑c tƒ©nh)
            is_animated = user.banner.is_animated()
            banner_type = "GIF" if is_animated else "PNG"

            # Th√™m th√¥ng tin v·ªÅ ng∆∞·ªùi d√πng
            embed.add_field(
                name="üß© ƒê·ªãnh d·∫°ng", 
                value=banner_type, 
                inline=True
            )

            embed.add_field(
                name="üë§ Ng∆∞·ªùi d√πng", 
                value=f"{target.name}", 
                inline=True
            )

            embed.add_field(
                name="üÜî ID", 
                value=f"`{target.id}`", 
                inline=True
            )

            # ƒê·∫∑t ·∫£nh banner l√†m ·∫£nh ch√≠nh c·ªßa embed
            embed.set_image(url=banner_url)

        else:
            # Ng∆∞·ªùi d√πng kh√¥ng c√≥ banner t√πy ch·ªânh
            # Ki·ªÉm tra xem c√≥ banner m√†u t·ª´ accent color kh√¥ng
            if user.accent_color:
                color_hex = str(user.accent_color)
                embed = discord.Embed(
                    title=f"·∫¢nh b√¨a c·ªßa {target.display_name}",
                    description="Ng∆∞·ªùi d√πng n√†y kh√¥ng c√≥ ·∫£nh b√¨a t√πy ch·ªânh, nh∆∞ng c√≥ m√†u n·ªÅn.",
                    color=user.accent_color
                )
                embed.add_field(
                    name="üé® M√†u n·ªÅn", 
                    value=f"`{color_hex}`", 
                    inline=True
                )
            else:
                embed = discord.Embed(
                    title=f"·∫¢nh b√¨a c·ªßa {target.display_name}",
                    description="Ng∆∞·ªùi d√πng n√†y kh√¥ng c√≥ ·∫£nh b√¨a t√πy ch·ªânh.",
                    color=discord.Color.light_grey()
                )

            embed.add_field(
                name="üë§ Ng∆∞·ªùi d√πng", 
                value=f"{target.name}", 
                inline=True
            )

            embed.add_field(
                name="üÜî ID", 
                value=f"`{target.id}`", 
                inline=True
            )

            # Hi·ªÉn th·ªã avatar l√†m h√¨nh ·∫£nh thay th·∫ø
            embed.set_image(url=target.display_avatar.with_size(1024).url)
            embed.add_field(
                name="‚ÑπÔ∏è Th√¥ng b√°o", 
                value="Hi·ªÉn th·ªã avatar thay v√¨ banner v√¨ ng∆∞·ªùi d√πng kh√¥ng c√≥ ·∫£nh b√¨a.", 
                inline=False
            )

        # Th√™m footer v·ªõi th√¥ng tin ng∆∞·ªùi d√πng y√™u c·∫ßu
        embed.set_footer(
            text=f"Y√™u c·∫ßu b·ªüi {ctx.author.name}", 
            icon_url=ctx.author.display_avatar.url
        )

        # G·ª≠i embed
        await ctx.send(embed=embed)

    except discord.NotFound:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
            description="Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng n√†y.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

    except Exception as e:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin ·∫£nh b√¨a: {str(e)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@banner.error
async def banner_error(ctx, error):
    """X·ª≠ l√Ω l·ªói cho l·ªánh banner"""
    if isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng t√¨m th·∫•y th√†nh vi√™n",
            description="Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n n√†y trong server.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='help')
async def help_redirect(ctx):
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n thay th·∫ø cho help command m·∫∑c ƒë·ªãnh"""
    embed = discord.Embed(
        title="ü§ñ H∆∞·ªõng D·∫´n Bot",
        description=
        f"D√πng `.help [t√™n nh√≥m]` ƒë·ªÉ xem chi ti·∫øt t·ª´ng nh√≥m l·ªánh.\nV√≠ d·ª•: `.help games`",
        color=discord.Color.blue())

    embed.add_field(name="üìú Nh√≥m l·ªánh c√≥ s·∫µn",
                    value="""
        `.help info` - C√°c l·ªánh th√¥ng tin
        `.help currency` - Qu·∫£n l√Ω xu
        `.help games` - Tr√≤ ch∆°i
        `.help admin` - L·ªánh admin
        `.help fun` - L·ªánh gi·∫£i tr√≠
        `.help inventory` - Qu·∫£n l√Ω kho ƒë·ªì
        """,
                    inline=False)

    embed.add_field(
        name="‚ö†Ô∏è L∆∞u √Ω",
        value=f"T·∫•t c·∫£ l·ªánh game ch·ªâ ho·∫°t ƒë·ªông trong <#{GAME_CHANNEL_ID}>",
        inline=False)

    embed.set_footer(text="Bot ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi STV Team")
    await ctx.send(embed=embed)


@bot.command(name='bank')
@check_channel()
async def bank_command(ctx, action: str = None, amount: int = None):
    """H·ªá th·ªëng ng√¢n h√†ng v·ªõi l√£i su·∫•t"""
    user_id = ctx.author.id

    # Check if user is blacklisted from banking
    if user_id in bank_blacklist:
        embed = discord.Embed(
            title="üè¶ Ng√¢n H√†ng",
            description=
            "B·∫°n ƒë√£ b·ªã ch·∫∑n kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng ng√¢n h√†ng. Vui l√≤ng li√™n h·ªá admin.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # If user is in the loan system, they can't use the bank
    if user_id in loans:
        embed = discord.Embed(
            title="üè¶ Ng√¢n H√†ng",
            description=
            "B·∫°n ƒëang c√≥ kho·∫£n vay ch∆∞a tr·∫£, kh√¥ng th·ªÉ s·ª≠ d·ª•ng ng√¢n h√†ng.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Help menu (no parameters or invalid action)
    if action is None or action.lower() not in [
            'g·ª≠i', 'gui', 'deposit', 'r√∫t', 'rut', 'withdraw', 'check', 'ki·ªÉm',
            'kiem'
    ]:
        embed = discord.Embed(
            title="üè¶ Ng√¢n H√†ng STV - H∆∞·ªõng D·∫´n",
            description="H·ªá th·ªëng ng√¢n h√†ng v·ªõi l√£i su·∫•t 5% m·ªói ng√†y.",
            color=discord.Color.blue())

        embed.add_field(
            name="üì• G·ª≠i ti·ªÅn",
            value="`.bank g·ª≠i [s·ªë xu]` - G·ª≠i xu v√†o ng√¢n h√†ng ƒë·ªÉ nh·∫≠n l√£i\n"
            "V√≠ d·ª•: `.bank g·ª≠i 1000`",
            inline=False)

        embed.add_field(name="üì§ R√∫t ti·ªÅn",
                        value="`.bank r√∫t [s·ªë xu]` - R√∫t xu t·ª´ ng√¢n h√†ng\n"
                        "V√≠ d·ª•: `.bank r√∫t 500`",
                        inline=False)

        embed.add_field(
            name="üìä Ki·ªÉm tra",
            value="`.bank check` - Ki·ªÉm tra s·ªë d∆∞ ng√¢n h√†ng v√† l√£i su·∫•t",
            inline=False)

        embed.add_field(name="üí° L∆∞u √Ω",
                        value="- L√£i su·∫•t: 5% m·ªói ng√†y\n"
                        "- L√£i ƒë∆∞·ª£c t√≠nh v√† th√™m v√†o t√†i kho·∫£n m·ªói 24 gi·ªù\n"
                        "- Kh√¥ng th·ªÉ s·ª≠ d·ª•ng ng√¢n h√†ng khi ƒëang c√≥ kho·∫£n vay",
                        inline=False)

        await ctx.send(embed=embed)
        return

    # Initialize bank account if not exists
    if user_id not in bank_accounts:
        bank_accounts[user_id] = {
            "balance": 0,
            "last_interest": datetime.now()
        }

    # Check for accumulated interest
    current_time = datetime.now()
    days_passed = (current_time - bank_accounts[user_id]["last_interest"]
                   ).total_seconds() / 86400

    if days_passed >= 1 and bank_accounts[user_id]["balance"] > 0:
        interest = int(bank_accounts[user_id]["balance"] * bank_interest_rate)
        bank_accounts[user_id]["balance"] += interest
        bank_accounts[user_id]["last_interest"] = current_time

        # Send interest notification
        interest_embed = discord.Embed(
            title="üí∞ L√£i Su·∫•t Ng√¢n H√†ng",
            description=f"B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c {interest} xu ti·ªÅn l√£i!",
            color=discord.Color.green())
        await ctx.send(embed=interest_embed)

    # Process deposit
    if action.lower() in ['g·ª≠i', 'gui', 'deposit']:
        if amount is None or amount <= 0:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Vui l√≤ng nh·∫≠p s·ªë xu h·ª£p l·ªá ƒë·ªÉ g·ª≠i.",
                color=discord.Color.red())
            await ctx.send(embed=embed)
            return

        if currency[user_id] < amount:
            embed = discord.Embed(
                title="‚ùå Kh√¥ng ƒë·ªß xu",
                description=
                f"B·∫°n kh√¥ng c√≥ ƒë·ªß xu. S·ªë d∆∞ hi·ªán t·∫°i: {currency[user_id]} xu.",
                color=discord.Color.red())
            await ctx.send(embed=embed)
            return

        # Process deposit
        currency[user_id] -= amount
        bank_accounts[user_id]["balance"] += amount

        embed = discord.Embed(title="‚úÖ G·ª≠i Ti·ªÅn Th√†nh C√¥ng",
                              description=f"ƒê√£ g·ª≠i {amount} xu v√†o ng√¢n h√†ng.",
                              color=discord.Color.green())
        embed.add_field(name="S·ªë d∆∞ ng√¢n h√†ng",
                        value=f"{bank_accounts[user_id]['balance']} xu",
                        inline=True)
        embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i",
                        value=f"{currency[user_id]} xu",
                        inline=True)
        embed.add_field(name="L√£i su·∫•t",
                        value=f"{bank_interest_rate*100}% m·ªói ng√†y",
                        inline=False)

        await ctx.send(embed=embed)

    # Process withdrawal
    elif action.lower() in ['r√∫t', 'rut', 'withdraw']:
        if amount is None or amount <= 0:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Vui l√≤ng nh·∫≠p s·ªë xu h·ª£p l·ªá ƒë·ªÉ r√∫t.",
                color=discord.Color.red())
            await ctx.send(embed=embed)
            return

        if bank_accounts[user_id]["balance"] < amount:
            embed = discord.Embed(
                title="‚ùå Kh√¥ng ƒë·ªß xu trong ng√¢n h√†ng",
                description=
                f"S·ªë xu trong ng√¢n h√†ng: {bank_accounts[user_id]['balance']} xu.",
                color=discord.Color.red())
            await ctx.send(embed=embed)
            return

        # Process withdrawal
        bank_accounts[user_id]["balance"] -= amount
        currency[user_id] += amount

        embed = discord.Embed(title="‚úÖ R√∫t Ti·ªÅn Th√†nh C√¥ng",
                              description=f"ƒê√£ r√∫t {amount} xu t·ª´ ng√¢n h√†ng.",
                              color=discord.Color.green())
        embed.add_field(name="S·ªë d∆∞ ng√¢n h√†ng",
                        value=f"{bank_accounts[user_id]['balance']} xu",
                        inline=True)
        embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i",
                        value=f"{currency[user_id]} xu",
                        inline=True)

        await ctx.send(embed=embed)

    # Check bank balance
    elif action.lower() in ['check', 'ki·ªÉm', 'kiem']:
        # Calculate time until next interest
        next_interest_time = bank_accounts[user_id][
            "last_interest"] + timedelta(days=1)
        time_until_interest = next_interest_time - datetime.now()
        hours, remainder = divmod(time_until_interest.seconds, 3600)
        minutes, _ = divmod(remainder, 60)

        # Calculate next interest amount
        next_interest = int(bank_accounts[user_id]["balance"] *
                            bank_interest_rate)

        embed = discord.Embed(
            title="üè¶ Th√¥ng Tin Ng√¢n H√†ng",
            description=
            f"Th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng c·ªßa {ctx.author.mention}",
            color=discord.Color.gold())
        embed.add_field(name="üí∞ S·ªë d∆∞ ng√¢n h√†ng",
                        value=f"{bank_accounts[user_id]['balance']} xu",
                        inline=False)
        embed.add_field(name="üìä L√£i su·∫•t",
                        value=f"{bank_interest_rate*100}% m·ªói ng√†y",
                        inline=True)
        embed.add_field(name="üí∏ L√£i d·ª± ki·∫øn",
                        value=f"{next_interest} xu",
                        inline=True)
        embed.add_field(name="‚è±Ô∏è Th·ªùi gian ƒë·∫øn k·ª≥ tr·∫£ l√£i ti·∫øp theo",
                        value=f"{hours} gi·ªù {minutes} ph√∫t",
                        inline=False)
        embed.set_footer(text="G·ª≠i ti·ªÅn v√†o ng√¢n h√†ng ƒë·ªÉ nh·∫≠n l√£i m·ªói ng√†y!")

        await ctx.send(embed=embed)


@bot.command(name='bankblview', aliases=['blbankview'])
@commands.has_permissions(administrator=True)
async def bank_blacklist_view(ctx):
    """Xem t·∫•t c·∫£ ng∆∞·ªùi d√πng trong blacklist ng√¢n h√†ng"""
    if not bank_blacklist:
        embed = discord.Embed(
            title="üè¶ Blacklist Ng√¢n H√†ng",
            description="Blacklist ng√¢n h√†ng hi·ªán ƒëang tr·ªëng.",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
        return

    embed = discord.Embed(
        title="üè¶ Blacklist Ng√¢n H√†ng",
        description=
        f"C√≥ {len(bank_blacklist)} ng∆∞·ªùi d√πng trong blacklist ng√¢n h√†ng:",
        color=discord.Color.red())

    # L·∫•y v√† hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng cho m·ªói ID trong blacklist
    for i, user_id in enumerate(bank_blacklist, 1):
        try:
            user = await bot.fetch_user(user_id)
            embed.add_field(name=f"{i}. {user.name}",
                            value=f"ID: {user_id}",
                            inline=False)
        except:
            embed.add_field(name=f"{i}. Ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh",
                            value=f"ID: {user_id}",
                            inline=False)

    embed.set_footer(
        text=
        "S·ª≠ d·ª•ng .blbank remove @ng∆∞·ªùi_d√πng ƒë·ªÉ x√≥a kh·ªèi blacklist ng√¢n h√†ng")
    await ctx.send(embed=embed)


@bank_blacklist_view.error
async def bank_blacklist_view_error(ctx, error):
    """Error handler for bank blacklist view command"""
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description=
            "B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.",
            color=discord.Color.red())
        await ctx.send(embed=embed)


@bot.command(name='bankxoa')
@commands.has_permissions(administrator=True)
async def bankxoa_command(ctx, member: discord.Member = None):
    """Cho ph√©p admin x√≥a t√†i kho·∫£n ng√¢n h√†ng c·ªßa ng∆∞·ªùi d√πng"""
    if member is None:
        embed = discord.Embed(
            title="‚ùì X√≥a T√†i Kho·∫£n Ng√¢n H√†ng",
            description=
            "Vui l√≤ng ch·ªâ ƒë·ªãnh m·ªôt th√†nh vi√™n. V√≠ d·ª•: `.bankxoa @ng∆∞·ªùi_d√πng`",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
        return

    # B·∫£o v·ªá ID admin ch√≠nh
    if member.id == 618702036992655381:
        embed = discord.Embed(
            title="üõ°Ô∏è B·∫£o V·ªá Admin",
            description="Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n ng√¢n h√†ng c·ªßa admin ch√≠nh!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    user_id = member.id

    # Check if user has a bank account
    if user_id not in bank_accounts:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng T√¨m Th·∫•y",
            description=f"{member.mention} kh√¥ng c√≥ t√†i kho·∫£n ng√¢n h√†ng.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Create confirmation buttons
    confirm_view = discord.ui.View(timeout=60)

    confirm_button = discord.ui.Button(label="X√°c nh·∫≠n x√≥a",
                                       style=discord.ButtonStyle.danger,
                                       emoji="‚úÖ")

    cancel_button = discord.ui.Button(label="H·ªßy b·ªè",
                                      style=discord.ButtonStyle.secondary,
                                      emoji="‚ùå")

    async def confirm_callback(interaction):
        if interaction.user != ctx.author:
            await interaction.response.send_message(
                "B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi d√πng l·ªánh n√†y!", ephemeral=True)
            return

        # Get balance before removing
        balance = bank_accounts[user_id]["balance"]

        # Remove the bank account
        del bank_accounts[user_id]

        # Update view
        confirm_view.clear_items()
        await interaction.response.edit_message(view=confirm_view)

        # Send success message
        success_embed = discord.Embed(
            title="‚úÖ X√≥a T√†i Kho·∫£n Th√†nh C√¥ng",
            description=f"ƒê√£ x√≥a t√†i kho·∫£n ng√¢n h√†ng c·ªßa {member.mention}.",
            color=discord.Color.green())
        success_embed.add_field(name="S·ªë d∆∞ ƒë√£ m·∫•t",
                                value=f"{balance} xu",
                                inline=False)
        success_embed.set_footer(text=f"Th·ª±c hi·ªán b·ªüi: {ctx.author.name}")

        await interaction.message.edit(embed=success_embed)

    async def cancel_callback(interaction):
        if interaction.user != ctx.author:
            await interaction.response.send_message(
                "B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi d√πng l·ªánh n√†y!", ephemeral=True)
            return

        # Update view
        confirm_view.clear_items()
        await interaction.response.edit_message(view=confirm_view)

        # Send cancel message
        cancel_embed = discord.Embed(
            title="‚ùå ƒê√£ H·ªßy",
            description="Thao t√°c x√≥a t√†i kho·∫£n ng√¢n h√†ng ƒë√£ b·ªã h·ªßy b·ªè.",
            color=discord.Color.grey())

        await interaction.message.edit(embed=cancel_embed)

    # Assign callbacks
    confirm_button.callback = confirm_callback
    cancel_button.callback = cancel_callback

    # Add buttons to view
    confirm_view.add_item(confirm_button)
    confirm_view.add_item(cancel_button)

    # Send confirmation message
    confirm_embed = discord.Embed(
        title="‚ö†Ô∏è X√°c Nh·∫≠n X√≥a T√†i Kho·∫£n",
        description=
        f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t√†i kho·∫£n ng√¢n h√†ng c·ªßa {member.mention}?",
        color=discord.Color.yellow())
    confirm_embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i",
                            value=f"{bank_accounts[user_id]['balance']} xu",
                            inline=False)
    confirm_embed.add_field(
        name="C·∫£nh b√°o",
        value=
        "Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c v√† to√†n b·ªô s·ªë xu trong t√†i kho·∫£n s·∫Ω b·ªã m·∫•t!",
        inline=False)

    await ctx.send(embed=confirm_embed, view=confirm_view)


@bot.command(name='blbank')
@commands.has_permissions(administrator=True)
async def blbank_command(ctx,
                         action: str = None,
                         member: discord.Member = None):
    """Cho ph√©p admin th√™m/x√≥a ng∆∞·ªùi d√πng kh·ªèi blacklist ng√¢n h√†ng"""
    if action is None or member is None or action.lower() not in [
            'add', 'remove'
    ]:
        embed = discord.Embed(
            title="‚ùì Blacklist Ng√¢n H√†ng - H∆∞·ªõng D·∫´n",
            description="Th√™m ho·∫∑c x√≥a ng∆∞·ªùi d√πng kh·ªèi blacklist ng√¢n h√†ng.\n"
            "Ng∆∞·ªùi d√πng trong blacklist kh√¥ng th·ªÉ s·ª≠ d·ª•ng ng√¢n h√†ng.",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.blbank add @ng∆∞·ªùi_d√πng` - Th√™m ng∆∞·ªùi d√πng v√†o blacklist\n"
            "`.blbank remove @ng∆∞·ªùi_d√πng` - X√≥a ng∆∞·ªùi d√πng kh·ªèi blacklist",
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = member.id
    action = action.lower()

    # B·∫£o v·ªá ID admin ch√≠nh
    if member.id == 618702036992655381 and action == 'add':
        embed = discord.Embed(
            title="üõ°Ô∏è B·∫£o V·ªá Admin",
            description="Kh√¥ng th·ªÉ th√™m admin ch√≠nh v√†o blacklist ng√¢n h√†ng!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if action == 'add':
        # First, check if user has a bank account and delete it
        if user_id in bank_accounts:
            balance = bank_accounts[user_id]["balance"]
            del bank_accounts[user_id]
            account_deleted = True
        else:
            balance = 0
            account_deleted = False

        # Add to blacklist
        bank_blacklist.add(user_id)

        embed = discord.Embed(
            title="‚úÖ ƒê√£ th√™m v√†o blacklist ng√¢n h√†ng",
            description=f"{member.mention} ƒë√£ b·ªã th√™m v√†o blacklist ng√¢n h√†ng.",
            color=discord.Color.green())

        if account_deleted:
            embed.add_field(name="T√†i kho·∫£n ƒë√£ b·ªã x√≥a",
                            value=f"S·ªë d∆∞ b·ªã m·∫•t: {balance} xu",
                            inline=False)

        await ctx.send(embed=embed)

    elif action == 'remove':
        if user_id in bank_blacklist:
            bank_blacklist.remove(user_id)
            embed = discord.Embed(
                title="‚úÖ ƒê√£ x√≥a kh·ªèi blacklist ng√¢n h√†ng",
                description=
                f"{member.mention} ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi blacklist ng√¢n h√†ng v√† c√≥ th·ªÉ s·ª≠ d·ª•ng ng√¢n h√†ng.",
                color=discord.Color.green())
        else:
            embed = discord.Embed(
                title="‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y",
                description=
                f"{member.mention} kh√¥ng c√≥ trong blacklist ng√¢n h√†ng.",
                color=discord.Color.yellow())

        await ctx.send(embed=embed)


@bot.command(name='bankcheck')
@commands.has_permissions(administrator=True)
async def bankcheck_command(ctx, member: discord.Member = None):
    """Cho ph√©p admin ki·ªÉm tra t√†i kho·∫£n ng√¢n h√†ng c·ªßa ng∆∞·ªùi ch∆°i"""
    if member is None:
        embed = discord.Embed(
            title="‚ùì Ki·ªÉm Tra Ng√¢n H√†ng",
            description=
            "Vui l√≤ng ch·ªâ ƒë·ªãnh m·ªôt th√†nh vi√™n. V√≠ d·ª•: `.bankcheck @ng∆∞·ªùi_d√πng`",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
        return

    user_id = member.id

    # Check if user is in bank blacklist
    in_blacklist = user_id in bank_blacklist

    # Check if user has a bank account
    if user_id not in bank_accounts:
        embed = discord.Embed(
            title="üè¶ Ki·ªÉm Tra Ng√¢n H√†ng",
            description=f"{member.mention} kh√¥ng c√≥ t√†i kho·∫£n ng√¢n h√†ng.",
            color=discord.Color.yellow())

        if in_blacklist:
            embed.add_field(
                name="‚ö†Ô∏è Ng∆∞·ªùi d√πng trong blacklist",
                value="Ng∆∞·ªùi d√πng n√†y ƒë√£ b·ªã ch·∫∑n s·ª≠ d·ª•ng ng√¢n h√†ng.",
                inline=False)

        await ctx.send(embed=embed)
        return

    # Calculate time until next interest
    next_interest_time = bank_accounts[user_id]["last_interest"] + timedelta(
        days=1)
    time_until_interest = next_interest_time - datetime.now()
    hours, remainder = divmod(time_until_interest.seconds, 3600)
    minutes, _ = divmod(remainder, 60)

    # Calculate next interest amount
    next_interest = int(bank_accounts[user_id]["balance"] * bank_interest_rate)

    embed = discord.Embed(
        title="üè¶ Th√¥ng Tin Ng√¢n H√†ng (Admin View)",
        description=f"Th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng c·ªßa {member.mention}",
        color=discord.Color.gold())

    if in_blacklist:
        embed.add_field(name="‚ö†Ô∏è NG∆Ø·ªúI D√ôNG TRONG BLACKLIST",
                        value="Ng∆∞·ªùi d√πng n√†y ƒë√£ b·ªã ch·∫∑n s·ª≠ d·ª•ng ng√¢n h√†ng.",
                        inline=False)

    embed.add_field(name="üí∞ S·ªë d∆∞ ng√¢n h√†ng",
                    value=f"{bank_accounts[user_id]['balance']} xu",
                    inline=False)
    embed.add_field(name="üìä L√£i su·∫•t",
                    value=f"{bank_interest_rate*100}% m·ªói ng√†y",
                    inline=True)
    embed.add_field(name="üí∏ L√£i d·ª± ki·∫øn",
                    value=f"{next_interest} xu",
                    inline=True)
    embed.add_field(name="‚è±Ô∏è Th·ªùi gian ƒë·∫øn k·ª≥ tr·∫£ l√£i ti·∫øp theo",
                    value=f"{hours} gi·ªù {minutes} ph√∫t",
                    inline=False)
    embed.add_field(
        name="üìÖ L·∫ßn nh·∫≠n l√£i cu·ªëi c√πng",
        value=
        f"{bank_accounts[user_id]['last_interest'].strftime('%d/%m/%Y %H:%M:%S')}",
        inline=False)

    embed.set_footer(text=f"User ID: {user_id} | Admin: {ctx.author.name}")

    await ctx.send(embed=embed)


@bankcheck_command.error
@blbank_command.error
@bankxoa_command.error
async def bank_admin_error(ctx, error):
    """Error handler for bank admin commands"""
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description=
            "B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(title="‚ùå Kh√¥ng T√¨m Th·∫•y",
                              description="Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n n√†y.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)


@bot.command(name='checkam', aliases=['camxu', 'amxu'])
@commands.has_permissions(administrator=True)
async def check_negative_balances_command(ctx):
    """Admin command to list all users with negative balances"""
    # Get all users with negative balances
    negative_users = [(user_id, balance)
                      for user_id, balance in currency.items() if balance < 0]

    if not negative_users:
        embed = discord.Embed(
            title="üíπ Ki·ªÉm Tra √Çm Xu",
            description="Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o ƒëang √¢m xu trong h·ªá th·ªëng.",
            color=discord.Color.green())
        await ctx.send(embed=embed)
        return

    # Sort by balance (most negative first)
    negative_users.sort(key=lambda x: x[1])

    # Create embed
    embed = discord.Embed(
        title="üö® Ng∆∞·ªùi D√πng √Çm Xu",
        description=f"C√≥ **{len(negative_users)}** ng∆∞·ªùi d√πng ƒëang √¢m xu:",
        color=discord.Color.red())

    # Add fields for each user, max 15 users per embed to avoid hitting the limit
    count = 0
    for user_id, balance in negative_users[:15]:
        count += 1
        try:
            user = await bot.fetch_user(user_id)
            username = user.name
        except:
            username = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"

        embed.add_field(name=f"{count}. {username}",
                        value=f"ID: {user_id}\nS·ªë √¢m: **{balance} xu**",
                        inline=True)

    if len(negative_users) > 15:
        embed.set_footer(
            text=
            f"Hi·ªÉn th·ªã 15/{len(negative_users)} ng∆∞·ªùi d√πng √¢m xu | S·ª≠ d·ª•ng .thihanhan ƒë·ªÉ x·ª≠ l√Ω"
        )
    else:
        embed.set_footer(
            text=
            "S·ª≠ d·ª•ng l·ªánh .thihinhan @ng∆∞·ªùi_d√πng [kick/ban] ƒë·ªÉ x·ª≠ l√Ω ng∆∞·ªùi d√πng √¢m xu"
        )

    await ctx.send(embed=embed)


@check_negative_balances_command.error
async def check_negative_balances_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description=
            "B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.",
            color=discord.Color.red())
        await ctx.send(embed=embed)


@bot.command(name='thihanhan', aliases=['punish', 'xulyam'])
@commands.has_permissions(administrator=True)
async def execute_punishment(ctx,
                             member: discord.Member = None,
                             action: str = None):
    """Admin command to punish users with negative balances"""
    if member is None or action is None:
        embed = discord.Embed(title="‚öñÔ∏è Thi H√†nh √Ån - H∆∞·ªõng D·∫´n",
                              description="X·ª≠ l√Ω ng∆∞·ªùi d√πng √¢m xu.",
                              color=discord.Color.blue())
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value=
            "`.thihanhan @ng∆∞·ªùi_d√πng [kick/ban]`\nV√≠ d·ª•: `.thihanhan @username kick`",
            inline=False)
        embed.add_field(
            name="C√°c h√¨nh ph·∫°t",
            value=
            "`kick` - ƒêu·ªïi ng∆∞·ªùi d√πng kh·ªèi server\n`ban` - C·∫•m ng∆∞·ªùi d√πng kh·ªèi server",
            inline=False)
        await ctx.send(embed=embed)
        return

    # Check if target is admin
    if member.guild_permissions.administrator or member.id in ADMIN_IDS:
        embed = discord.Embed(
            title="üõ°Ô∏è B·∫£o V·ªá Admin",
            description="Kh√¥ng th·ªÉ thi h√†nh √°n ƒë·ªëi v·ªõi admin!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    user_id = member.id
    balance = currency.get(user_id, 0)

    # Check if user has negative balance
    if balance >= 0:
        embed = discord.Embed(
            title="‚öñÔ∏è Thi H√†nh √Ån",
            description=
            f"{member.mention} kh√¥ng √¢m xu (s·ªë d∆∞: {balance} xu), kh√¥ng c·∫ßn thi h√†nh √°n.",
            color=discord.Color.yellow())
        await ctx.send(embed=embed)
        return

    # Check action type
    action = action.lower()
    if action not in ["kick", "ban"]:
        embed = discord.Embed(
            title="‚ùå L·ªói C√∫ Ph√°p",
            description="H√¨nh ph·∫°t ph·∫£i l√† `kick` ho·∫∑c `ban`.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Create confirmation buttons
    confirm_view = discord.ui.View(timeout=60)

    confirm_button = discord.ui.Button(label=f"X√°c nh·∫≠n {action.upper()}",
                                       style=discord.ButtonStyle.danger,
                                       emoji="‚öñÔ∏è")

    cancel_button = discord.ui.Button(label="H·ªßy b·ªè",
                                      style=discord.ButtonStyle.secondary,
                                      emoji="‚ùå")

    async def confirm_callback(interaction):
        if interaction.user != ctx.author:
            await interaction.response.send_message(
                "B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi d√πng l·ªánh n√†y!", ephemeral=True)
            return

        # Disable buttons
        confirm_view.clear_items()
        await interaction.response.edit_message(view=confirm_view)

        try:
            # Execute punishment
            reason = f"B·ªã {action} v√¨ √¢m {balance} xu | Th·ª±c hi·ªán b·ªüi {ctx.author.name}"

            if action == "kick":
                await member.kick(reason=reason)
                punishment_type = "KICK"
                success_message = f"{member.mention} ƒë√£ b·ªã ƒëu·ªïi kh·ªèi server!"
            else:  # ban
                await member.ban(reason=reason)
                punishment_type = "BAN"
                success_message = f"{member.mention} ƒë√£ b·ªã c·∫•m kh·ªèi server!"

            # Send success message
            success_embed = discord.Embed(
                title=f"‚öñÔ∏è ƒê√É THI H√ÄNH √ÅN: {punishment_type}",
                description=success_message,
                color=discord.Color.green())
            success_embed.add_field(
                name="Ng∆∞·ªùi vi ph·∫°m",
                value=f"**{member.name}** (ID: {member.id})",
                inline=True)
            success_embed.add_field(name="S·ªë d∆∞ √¢m",
                                    value=f"**{balance} xu**",
                                    inline=True)
            success_embed.add_field(name="L√Ω do",
                                    value="√Çm xu trong h·ªá th·ªëng",
                                    inline=False)
            success_embed.set_footer(
                text=
                f"Th·ª±c hi·ªán b·ªüi: {ctx.author.name} | {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
            )

            await interaction.message.edit(embed=success_embed)

            # Also send to game channel for visibility
            game_channel = ctx.guild.get_channel(GAME_CHANNEL_ID)
            if game_channel and game_channel != ctx.channel:
                await game_channel.send(embed=success_embed)

        except discord.Forbidden:
            error_embed = discord.Embed(
                title="‚ùå L·ªói Quy·ªÅn H·∫°n",
                description=f"Bot kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ {action} ng∆∞·ªùi d√πng n√†y!",
                color=discord.Color.red())
            await interaction.message.edit(embed=error_embed)
        except Exception as e:
            error_embed = discord.Embed(
                title="‚ùå L·ªói",
                description=f"Kh√¥ng th·ªÉ th·ª±c hi·ªán l·ªánh: {str(e)}",
                color=discord.Color.red())
            await interaction.message.edit(embed=error_embed)

    async def cancel_callback(interaction):
        if interaction.user != ctx.author:
            await interaction.response.send_message(
                "B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi d√πng l·ªánh n√†y!", ephemeral=True)
            return

        # Disable buttons
        confirm_view.clear_items()
        await interaction.response.edit_message(view=confirm_view)

        # Send cancel message
        cancel_embed = discord.Embed(
            title="‚ùå ƒê√£ H·ªßy",
            description="L·ªánh thi h√†nh √°n ƒë√£ b·ªã h·ªßy b·ªè.",
            color=discord.Color.grey())
        await interaction.message.edit(embed=cancel_embed)

    # Assign callbacks
    confirm_button.callback = confirm_callback
    cancel_button.callback = cancel_callback

    # Add buttons to view
    confirm_view.add_item(confirm_button)
    confirm_view.add_item(cancel_button)

    # Send confirmation message
    confirm_embed = discord.Embed(
        title="‚öñÔ∏è X√°c Nh·∫≠n Thi H√†nh √Ån",
        description=
        f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën **{action.upper()}** {member.mention}?",
        color=discord.Color.yellow())
    confirm_embed.add_field(name="Ng∆∞·ªùi vi ph·∫°m",
                            value=f"**{member.name}** (ID: {member.id})",
                            inline=True)
    confirm_embed.add_field(name="S·ªë d∆∞ √¢m",
                            value=f"**{balance} xu**",
                            inline=True)
    confirm_embed.add_field(
        name="C·∫£nh b√°o",
        value="H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c sau khi th·ª±c hi·ªán!",
        inline=False)

    await ctx.send(embed=confirm_embed, view=confirm_view)


@execute_punishment.error
async def execute_punishment_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description=
            "B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng T√¨m Th·∫•y",
            description="Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n n√†y trong server.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(title="‚ùå L·ªói",
                              description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
                              color=discord.Color.red())
        await ctx.send(embed=embed)


# √Åp d·ª•ng check cho c√°c game commands
@bot.command(name='cl', aliases=['chanle'])
@check_channel()
@check_game_enabled('cl')
async def chan_le(ctx, choice: str = None, bet: str = None):
    """Tr√≤ ch∆°i ch·∫µn l·∫ª v·ªõi nhi·ªÅu ch·∫ø ƒë·ªô"""
    if choice is None or bet is None:
        embed = discord.Embed(
            title="üé≤ Ch·∫µn L·∫ª - H∆∞·ªõng D·∫´n",
            description="Ch∆°i ch·∫µn l·∫ª ƒë·ªÉ nh·∫≠n th∆∞·ªüng.\nV√≠ d·ª•: `.cl chan 50` ho·∫∑c `.cl le all`",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°c l·ª±a ch·ªçn",
            value="- `chan`: ƒê·∫∑t c∆∞·ª£c s·ªë ch·∫µn (x1)\n- `le`: ƒê·∫∑t c∆∞·ª£c s·ªë l·∫ª (x1)\n"
                  "- `chan2`: ƒê·∫∑t c∆∞·ª£c s·ªë ch·∫µn (x2.5, kh√≥ h∆°n)\n- `le2`: ƒê·∫∑t c∆∞·ª£c s·ªë l·∫ª (x2.5, kh√≥ h∆°n)\n"
                  "- `chan3`: ƒê·∫∑t c∆∞·ª£c s·ªë ch·∫µn (x3.5, r·∫•t kh√≥)\n- `le3`: ƒê·∫∑t c∆∞·ª£c s·ªë l·∫ª (x3.5, r·∫•t kh√≥)",
            inline=False)
        embed.add_field(
            name="ƒê·∫∑t c∆∞·ª£c",
            value="Nh·∫≠p s·ªë xu ho·∫∑c `all` ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c t·∫•t c·∫£ xu",
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra s·ªë ti·ªÅn c∆∞·ª£c
    if bet_amount <= 0:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[user_id] < bet_amount:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß xu",
            description=f"B·∫°n c·∫ßn {bet_amount} xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c, nh∆∞ng ch·ªâ c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # X√°c ƒë·ªãnh lo·∫°i c∆∞·ª£c v√† t·ª∑ l·ªá th·∫Øng
    choice = choice.lower()
    valid_choices = {
        'chan': {'type': 'even', 'multiplier': 1, 'difficulty': 'normal'}, 
        'le': {'type': 'odd', 'multiplier': 1, 'difficulty': 'normal'},
        'chan2': {'type': 'even', 'multiplier': 2.5, 'difficulty': 'hard'},
        'le2': {'type': 'odd', 'multiplier': 2.5, 'difficulty': 'hard'},
        'chan3': {'type': 'even', 'multiplier': 3.5, 'difficulty': 'very hard'},
        'le3': {'type': 'odd', 'multiplier': 3.5, 'difficulty': 'very hard'}
    }

    if choice not in valid_choices:
        embed = discord.Embed(
            title="‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng ch·ªçn m·ªôt trong c√°c l·ª±a ch·ªçn: chan, le, chan2, le2, chan3, le3",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    bet_type = valid_choices[choice]['type']
    multiplier = valid_choices[choice]['multiplier']
    difficulty = valid_choices[choice]['difficulty']

    # Hi·ªáu ·ª©ng ƒëang quay
    loading_embed = discord.Embed(
        title="üé≤ ƒêANG QUAY S·ªê",
        description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c {bet_amount} xu v√†o {choice.upper()}",
        color=discord.Color.blue())
    loading_embed.add_field(
        name="Th√¥ng tin ƒë·∫∑t c∆∞·ª£c", 
        value=f"Lo·∫°i c∆∞·ª£c: {choice}\nT·ª∑ l·ªá th·∫Øng: x{multiplier}\nƒê·ªô kh√≥: {difficulty}",
        inline=False)
    loading_embed.set_footer(text="ƒêang quay s·ªë...")
    loading_msg = await ctx.send(embed=loading_embed)

    # Animation quay s·ªë
    for i in range(3):
        await asyncio.sleep(0.7)
        roll_embed = discord.Embed(
            title=f"üé≤ ƒêANG QUAY S·ªê {'.' * (i + 1)}",
            description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c {bet_amount} xu v√†o {choice.upper()}",
            color=discord.Color.gold())
        roll_embed.add_field(
            name="‚è≥ ƒêang x√°c ƒë·ªãnh k·∫øt qu·∫£", 
            value=f"{'üîÑ' * (i + 1)}",
            inline=False)
        await loading_msg.edit(embed=roll_embed)

    # X√°c ƒë·ªãnh k·∫øt qu·∫£
    # T·∫°o c∆° ch·∫ø x√°c ƒë·ªãnh th·∫Øng thua c√¥ng b·∫±ng d·ª±a tr√™n ƒë·ªô kh√≥
    win_chance = 0
    if difficulty == 'normal':
        win_chance = 48  # 48% c∆° h·ªôi th·∫Øng
    elif difficulty == 'hard':
        win_chance = 35  # 35% c∆° h·ªôi th·∫Øng
    else:  # very hard
        win_chance = 25  # 25% c∆° h·ªôi th·∫Øng

    # Thi√™n v·ªã ng∆∞·ªùi ch∆°i trong whitelist n·∫øu c√≥
    if is_whitelisted(user_id):
        win_chance = 100  # Lu√¥n th·∫Øng

    # Quy·∫øt ƒë·ªãnh th·∫Øng thua
    player_wins = random.randint(1, 100) <= win_chance

    # T·∫°o k·∫øt qu·∫£ s·ªë ng·∫´u nhi√™n
    result_number = random.randint(1, 100)

    # ƒê·∫£m b·∫£o k·∫øt qu·∫£ ph√π h·ª£p v·ªõi k·∫øt qu·∫£ th·∫Øng thua ƒë√£ quy·∫øt ƒë·ªãnh
    is_even = result_number % 2 == 0
    
    if player_wins:
        if (bet_type == 'even' and not is_even) or (bet_type == 'odd' and is_even):
            # ƒêi·ªÅu ch·ªânh k·∫øt qu·∫£ n·∫øu c·∫ßn
            result_number = result_number + 1 if bet_type == 'even' else result_number + (1 if is_even else 0)
    else:
        if (bet_type == 'even' and is_even) or (bet_type == 'odd' and not is_even):
            # ƒêi·ªÅu ch·ªânh k·∫øt qu·∫£ n·∫øu c·∫ßn
            result_number = result_number + 1 if bet_type == 'even' else result_number + (1 if not is_even else 0)

    # X√°c ƒë·ªãnh l·∫°i is_even sau khi ƒëi·ªÅu ch·ªânh k·∫øt qu·∫£
    is_even = result_number % 2 == 0
    result_type = "CH·∫¥N" if is_even else "L·∫∫"

    # X√°c ƒë·ªãnh th·∫Øng thua
    player_won = (bet_type == 'even' and is_even) or (bet_type == 'odd' and not is_even)

    # T√≠nh to√°n ti·ªÅn th∆∞·ªüng
    if player_won:
        winnings = int(bet_amount * multiplier)
        currency[user_id] += winnings - bet_amount
        result_color = discord.Color.green()
        result_title = "üéâ TH·∫ÆNG!"
        result_desc = f"Ch√∫c m·ª´ng! B·∫°n ƒë√£ th·∫Øng **{winnings} xu** (x{multiplier})!"
    else:
        currency[user_id] -= bet_amount
        result_color = discord.Color.red()
        result_title = "‚ùå THUA!"
        result_desc = f"R·∫•t ti·∫øc! B·∫°n ƒë√£ thua **{bet_amount} xu**."

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    result_embed = discord.Embed(
        title=result_title,
        description=result_desc,
        color=result_color)
    
    result_embed.add_field(
        name="üé≤ K·∫øt qu·∫£", 
        value=f"**{result_number}** ({result_type})",
        inline=True)
    
    result_embed.add_field(
        name="üí∞ ƒê·∫∑t c∆∞·ª£c", 
        value=f"{choice.upper()}: {bet_amount} xu",
        inline=True)
    
    result_embed.add_field(
        name="üíº S·ªë d∆∞ hi·ªán t·∫°i",
        value=f"{currency[user_id]} xu",
        inline=False)
    
    await loading_msg.edit(embed=result_embed)


@bot.command(name='dd')
@check_channel()
@check_game_enabled('dd')
async def daily_task(ctx):
    """Nhi·ªám v·ª• h√†ng ng√†y ƒë·ªÉ nh·∫≠n xu."""
    # Kh√¥ng cho ph√©p chuy·ªÉn xu t·ª´ ƒëi·ªÉm danh
    if ctx.author.id in loans:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng th·ªÉ ƒëi·ªÉm danh",
            description=
            "B·∫°n ƒë√£ vay xu v√† ch∆∞a tr·∫£. Kh√¥ng th·ªÉ nh·∫≠n xu t·ª´ ƒëi·ªÉm danh cho ƒë·∫øn khi tr·∫£ h·∫øt n·ª£.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    current_time = datetime.now()
    last_claim = last_daily_claim[ctx.author.id]
    time_difference = current_time - last_claim

    if time_difference >= timedelta(days=1):
        reward = random.randint(20, 50)
        currency[ctx.author.id] += reward
        last_daily_claim[ctx.author.id] = current_time

        # Th√¥ng b√°o th√†nh c√¥ng b·∫±ng embed
        task_embed = discord.Embed(
            title="Nhi·ªám v·ª• h√†ng ng√†y üèÜ",
            description=
            f"{ctx.author.mention}, b·∫°n ƒë√£ ho√†n th√†nh nhi·ªám v·ª• v√† nh·∫≠n ƒë∆∞·ª£c {reward} xu!\nS·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n l√† {currency[ctx.author.id]} xu.",
            color=discord.Color.green())
    else:
        # T√≠nh to√°n th·ªùi gian c√≤n l·∫°i
        remaining_time = timedelta(days=1) - time_difference
        hours, remainder = divmod(remaining_time.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        # Th√¥ng b√°o khi nhi·ªám v·ª• ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh trong ng√†y
        task_embed = discord.Embed(
            title="Nhi·ªám v·ª• h√†ng ng√†y üèÜ",
            description=
            f"{ctx.author.mention}, b·∫°n ƒë√£ ho√†n th√†nh nhi·ªám v·ª• h√¥m nay. H√£y quay l·∫°i sau {hours} gi·ªù {minutes} ph√∫t ƒë·ªÉ nh·∫≠n th∆∞·ªüng ti·∫øp!",
            color=discord.Color.red())

    await ctx.send(embed=task_embed)

@bot.command(name='xemxu', aliases=['mybalance', 'mycash', 'myxu'])
async def check_my_currency(ctx):
    """Cho ph√©p ng∆∞·ªùi d√πng t·ª± ki·ªÉm tra s·ªë xu c·ªßa m√¨nh"""
    # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    user = ctx.author
    user_id = user.id
    
    # Ki·ªÉm tra n·∫øu user c√≥ trong h·ªá th·ªëng ti·ªÅn t·ªá
    if user_id not in currency:
        currency[user_id] = 0  # Kh·ªüi t·∫°o s·ªë d∆∞ b·∫±ng 0 n·∫øu ng∆∞·ªùi d√πng ch∆∞a c√≥ t√†i kho·∫£n
    
    # T·∫°o embed hi·ªÉn th·ªã th√¥ng tin t√†i ch√≠nh
    embed = discord.Embed(
        title="üí∞ Th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n",
        description=f"Th√¥ng tin xu c·ªßa {user.mention}",
        color=discord.Color.gold()
    )
    
    # Hi·ªÉn th·ªã s·ªë xu hi·ªán c√≥
    embed.add_field(
        name="üíµ Xu hi·ªán c√≥",
        value=f"**{currency[user_id]:,}** xu",
        inline=False
    )
    
    # Ki·ªÉm tra v√† hi·ªÉn th·ªã s·ªë xu trong ng√¢n h√†ng
    bank_balance = 0
    if hasattr(bot, 'bank_accounts') and user_id in bot.bank_accounts:
        bank_balance = bot.bank_accounts[user_id]["balance"]
        
        # Hi·ªÉn th·ªã th√¥ng tin l√£i su·∫•t n·∫øu c√≥
        if hasattr(bot, 'bank_interest_rate'):
            next_interest = int(bank_balance * bot.bank_interest_rate)
            
            # T√≠nh th·ªùi gian ƒë·∫øn khi nh·∫≠n l√£i
            next_interest_time = bot.bank_accounts[user_id]["last_interest"] + timedelta(days=1)
            time_until_interest = next_interest_time - datetime.now()
            hours, remainder = divmod(time_until_interest.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            
            embed.add_field(
                name="üè¶ Ng√¢n h√†ng",
                value=f"**{bank_balance:,}** xu\nL√£i d·ª± ki·∫øn: **{next_interest:,}** xu\nTh·ªùi gian nh·∫≠n l√£i: **{hours}h {minutes}m**",
                inline=True
            )
        else:
            embed.add_field(
                name="üè¶ Ng√¢n h√†ng",
                value=f"**{bank_balance:,}** xu",
                inline=True
            )
    else:
        embed.add_field(
            name="üè¶ Ng√¢n h√†ng",
            value="**0** xu",
            inline=True
        )
    
    # Ki·ªÉm tra v√† hi·ªÉn th·ªã k√©t s·∫Øt
    vault_balance = 0
    guild_id = ctx.guild.id
    if hasattr(bot, 'vault') and guild_id in bot.vault and user_id in bot.vault[guild_id]:
        vault_balance = bot.vault[guild_id][user_id]
        embed.add_field(
            name="üîí K√©t s·∫Øt",
            value=f"**{vault_balance:,}** xu",
            inline=True
        )
    else:
        embed.add_field(
            name="üîí K√©t s·∫Øt",
            value="**0** xu",
            inline=True
        )
    
    # T√≠nh t·ªïng t√†i s·∫£n
    total_assets = currency[user_id] + bank_balance + vault_balance
    
    # Ki·ªÉm tra kho·∫£n vay n·∫øu c√≥
    if hasattr(bot, 'loans') and user_id in bot.loans:
        loan_amount = bot.loans[user_id]["amount"]
        loan_time = bot.loans[user_id]["time"]
        time_elapsed = (datetime.now() - loan_time).total_seconds()
        time_remaining = max(0, 7200 - time_elapsed)  # 2 gi·ªù = 7200 gi√¢y
        
        hours_remaining = int(time_remaining // 3600)
        minutes_remaining = int((time_remaining % 3600) // 60)
        seconds_remaining = int(time_remaining % 60)
        
        status = "‚è≥ ƒêang trong th·ªùi h·∫°n" if time_remaining > 0 else "‚ö†Ô∏è **QU√Å H·∫†N**"
        
        embed.add_field(
            name="üí∏ Kho·∫£n vay",
            value=f"**{loan_amount:,}** xu\nTr·∫°ng th√°i: {status}\n" + 
            (f"Th·ªùi gian c√≤n l·∫°i: **{hours_remaining}h {minutes_remaining}m {seconds_remaining}s**" if time_remaining > 0 else "**C·∫¶N TR·∫¢ NGAY L·∫¨P T·ª®C**"),
            inline=False
        )
        
        # Tr·ª´ kho·∫£n vay kh·ªèi t·ªïng t√†i s·∫£n
        total_assets -= loan_amount
    
    # Hi·ªÉn th·ªã t·ªïng t√†i s·∫£n
    embed.add_field(
        name="üíé T·ªïng t√†i s·∫£n",
        value=f"**{total_assets:,}** xu",
        inline=False
    )
    
    # Hi·ªÉn th·ªã x·∫øp h·∫°ng t√†i s·∫£n (n·∫øu c√≥ th·ªÉ t√≠nh ƒë∆∞·ª£c)
    if hasattr(bot, 'calculate_rank') and callable(getattr(bot, 'calculate_rank', None)):
        rank = bot.calculate_rank(user_id, ctx.guild.id)
        if rank:
            embed.add_field(
                name="üèÜ X·∫øp h·∫°ng",
                value=f"#{rank} trong m√°y ch·ªß",
                inline=True
            )
    
    # Th√™m m·ªôt s·ªë th√¥ng tin h·ªØu √≠ch
    embed.add_field(
        name="üí° M·∫πo",
        value="S·ª≠ d·ª•ng `.xu gui <s·ªë xu>` ƒë·ªÉ g·ª≠i ti·ªÅn v√†o ng√¢n h√†ng v√† nh·∫≠n l√£i su·∫•t h√†ng ng√†y!",
        inline=False
    )
    
    # Th√™m avatar ng∆∞·ªùi d√πng
    embed.set_thumbnail(url=user.display_avatar.url)
    
    # Th√™m th·ªùi gian c·∫≠p nh·∫≠t
    embed.set_footer(text=f"C·∫≠p nh·∫≠t: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}")
    
    # G·ª≠i embed
    await ctx.send(embed=embed)
    
    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng c√≥ th√†nh t√≠ch li√™n quan ƒë·∫øn ti·ªÅn t·ªá
    if total_assets >= 1000000 and not bot.has_achievement(user_id, "millionaire"):
        await bot.add_achievement(ctx, user_id, "millionaire", "üí∞ Tri·ªáu ph√∫", "ƒê·∫°t t·ªïng t√†i s·∫£n 1,000,000 xu")
    elif total_assets >= 10000000 and not bot.has_achievement(user_id, "multimillionaire"):
        await bot.add_achievement(ctx, user_id, "multimillionaire", "üíé ƒê·∫°i gia", "ƒê·∫°t t·ªïng t√†i s·∫£n 10,000,000 xu")

@check_my_currency.error
async def check_my_currency_error(ctx, error):
    """X·ª≠ l√Ω l·ªói cho l·ªánh check_my_currency"""
    embed = discord.Embed(
        title="‚ùå L·ªói",
        description=f"ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra s·ªë xu: {str(error)}",
        color=discord.Color.red()
    )
    await ctx.send(embed=embed)

@bot.command(name='baocaoxu', aliases=['mystats', 'xuinfo'])
async def currency_report(ctx):
    """T·∫°o b√°o c√°o chi ti·∫øt v·ªÅ t√¨nh h√¨nh t√†i ch√≠nh c·ªßa ng∆∞·ªùi d√πng"""
    user = ctx.author
    user_id = user.id
    
    # Ki·ªÉm tra n·∫øu user c√≥ trong h·ªá th·ªëng ti·ªÅn t·ªá
    if user_id not in currency:
        currency[user_id] = 0

    embed = discord.Embed(
        title="üìä B√°o c√°o t√†i ch√≠nh",
        description=f"Th√¥ng tin chi ti·∫øt t√†i ch√≠nh c·ªßa {user.mention}",
        color=discord.Color.teal()
    )
    
    # S·ªë d∆∞ hi·ªán t·∫°i
    embed.add_field(
        name="üíµ S·ªë d∆∞ hi·ªán t·∫°i",
        value=f"**{currency[user_id]:,}** xu",
        inline=False
    )
    
    # Th·ªëng k√™ giao d·ªãch n·∫øu c√≥
    if hasattr(bot, 'transaction_history') and user_id in bot.transaction_history:
        transactions = bot.transaction_history[user_id]
        
        # T√≠nh t·ªïng thu nh·∫≠p v√† chi ti√™u
        total_income = sum(amount for amount in transactions['income'] if isinstance(amount, (int, float)))
        total_expense = sum(amount for amount in transactions['expense'] if isinstance(amount, (int, float)))
        
        embed.add_field(
            name="üìà T·ªïng thu nh·∫≠p",
            value=f"**{total_income:,}** xu",
            inline=True
        )
        
        embed.add_field(
            name="üìâ T·ªïng chi ti√™u",
            value=f"**{total_expense:,}** xu",
            inline=True
        )
        
        embed.add_field(
            name="üíπ Ch√™nh l·ªách",
            value=f"**{total_income - total_expense:,}** xu",
            inline=True
        )
        
        # Giao d·ªãch g·∫ßn ƒë√¢y
        if transactions['recent']:
            recent_transactions = transactions['recent'][-5:]  # 5 giao d·ªãch g·∫ßn nh·∫•t
            recent_text = "\n".join([f"‚Ä¢ {txn['type']}: **{txn['amount']:,}** xu - {txn['description']}" 
                                    for txn in recent_transactions])
            
            embed.add_field(
                name="üïí Giao d·ªãch g·∫ßn ƒë√¢y",
                value=recent_text or "Kh√¥ng c√≥ giao d·ªãch n√†o",
                inline=False
            )
    
    # Th√¥ng tin ng√¢n h√†ng chi ti·∫øt
    if hasattr(bot, 'bank_accounts') and user_id in bot.bank_accounts:
        bank_data = bot.bank_accounts[user_id]
        
        # T√≠nh to√°n l√£i su·∫•t
        interest_rate = getattr(bot, 'bank_interest_rate', 0.01)  # M·∫∑c ƒë·ªãnh 1% n·∫øu kh√¥ng c√≥
        daily_interest = int(bank_data["balance"] * interest_rate)
        monthly_interest = daily_interest * 30
        
        # Ng√†y t·∫°o t√†i kho·∫£n ng√¢n h√†ng n·∫øu c√≥
        account_age = "Kh√¥ng x√°c ƒë·ªãnh"
        if "created_at" in bank_data:
            days_since_creation = (datetime.now() - bank_data["created_at"]).days
            account_age = f"{days_since_creation} ng√†y"
        
        # T·ªïng l√£i ƒë√£ nh·∫≠n
        total_interest_earned = bank_data.get("total_interest_earned", 0)
        
        bank_info = (
            f"**{bank_data['balance']:,}** xu\n"
            f"L√£i su·∫•t: **{interest_rate*100}%** m·ªói ng√†y\n"
            f"L√£i h√†ng ng√†y: **{daily_interest:,}** xu\n"
            f"L√£i ∆∞·ªõc t√≠nh/th√°ng: **{monthly_interest:,}** xu\n"
            f"T·ªïng l√£i ƒë√£ nh·∫≠n: **{total_interest_earned:,}** xu\n"
            f"Tu·ªïi t√†i kho·∫£n: **{account_age}**"
        )
        
        embed.add_field(
            name="üè¶ Th√¥ng tin ng√¢n h√†ng",
            value=bank_info,
            inline=False
        )
    
    # Bi·ªÉu ƒë·ªì xu theo th·ªùi gian (g·ª£i √Ω, kh√¥ng th·ªÉ hi·ªán trong embed)
    embed.add_field(
        name="üìà Bi·ªÉu ƒë·ªì xu",
        value="S·ª≠ d·ª•ng l·ªánh `.xuchart` ƒë·ªÉ xem bi·ªÉu ƒë·ªì xu theo th·ªùi gian",
        inline=False
    )
    
    # Th√™m avatar ng∆∞·ªùi d√πng
    embed.set_thumbnail(url=user.display_avatar.url)
    
    # Th√™m footer
    embed.set_footer(text=f"S·ª≠ d·ª•ng .xuhelp ƒë·ªÉ xem c√°c l·ªánh li√™n quan ƒë·∫øn qu·∫£n l√Ω xu | {datetime.now().strftime('%d/%m/%Y')}")
    
    await ctx.send(embed=embed)

@currency_report.error
async def currency_report_error(ctx, error):
    """X·ª≠ l√Ω l·ªói cho l·ªánh currency_report"""
    embed = discord.Embed(
        title="‚ùå L·ªói",
        description=f"ƒê√£ x·∫£y ra l·ªói khi t·∫°o b√°o c√°o t√†i ch√≠nh: {str(error)}",
        color=discord.Color.red()
    )
    await ctx.send(embed=embed)

@bot.command(name='sendxu')
@check_channel()
async def sendxu(ctx, member: discord.Member, amount: int):
    """Cho ph√©p ng∆∞·ªùi d√πng chuy·ªÉn xu cho ng∆∞·ªùi ch∆°i kh√°c."""
    sender_id = ctx.author.id
    receiver_id = member.id

    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi g·ª≠i ƒëang c√≥ kho·∫£n vay
    if sender_id in loans:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng th·ªÉ chuy·ªÉn xu",
            description=
            "B·∫°n ƒëang c√≥ kho·∫£n vay ch∆∞a tr·∫£ n√™n kh√¥ng th·ªÉ chuy·ªÉn xu cho ng∆∞·ªùi kh√°c.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if amount <= 0:
        await ctx.send("S·ªë l∆∞·ª£ng xu ph·∫£i l·ªõn h∆°n 0.")
        return

    if currency[sender_id] < amount:
        await ctx.send("B·∫°n kh√¥ng c√≥ ƒë·ªß xu ƒë·ªÉ chuy·ªÉn.")
        return

    currency[sender_id] -= amount
    currency[receiver_id] += amount
    embed = discord.Embed(
        title="Chuy·ªÉn Xu",
        description=
        f"{ctx.author.display_name} ƒë√£ chuy·ªÉn {amount} xu cho {member.display_name}. S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n: {currency[sender_id]}",
        color=discord.Color.blue())
    await ctx.send(embed=embed)


@bot.command(name='vayxu')
@check_channel()
@check_game_enabled('vayxu')
async def loan_xu(ctx, amount: int = None):
    """Cho ph√©p ng∆∞·ªùi d√πng vay xu (ph·∫£i tr·∫£ trong 2 gi·ªù)"""
    if amount is None:
        embed = discord.Embed(
            title="üè¶ Vay Xu - H∆∞·ªõng D·∫´n",
            description="Vay xu v·ªõi l√£i su·∫•t 0%. Ph·∫£i tr·∫£ trong v√≤ng 2 gi·ªù.",
            color=discord.Color.blue())
        embed.add_field(name="C√°ch d√πng", value="`.vayxu [s·ªë xu]`\nV√≠ d·ª•: `.vayxu 500`", inline=False)
        embed.add_field(name="Gi·ªõi h·∫°n", value="- M·ªói ng∆∞·ªùi ch·ªâ ƒë∆∞·ª£c vay **1 l·∫ßn duy nh·∫•t**\n- S·ªë ti·ªÅn t·ªëi ƒëa: 1000 xu", inline=False)
        embed.add_field(name="C·∫£nh b√°o", value="‚ö†Ô∏è Spam l·ªánh vay s·∫Ω b·ªã timeout 7 ng√†y!", inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ c·ªë g·∫Øng vay nhi·ªÅu l·∫ßn (ph√°t hi·ªán spam)
    if user_id in loan_violations and loan_violations[user_id] >= 3:
        # T·∫°o embed c·∫£nh b√°o
        embed = discord.Embed(
            title="‚õî PH√ÅT HI·ªÜN SPAM L·ªÜNH VAY XU",
            description=f"{ctx.author.mention} ƒë√£ c·ªë g·∫Øng spam l·ªánh vay xu v√† s·∫Ω b·ªã timeout 7 ng√†y!",
            color=discord.Color.dark_red()
        )
        await ctx.send(embed=embed)
        
        # Timeout user
        try:
            timeout_until = discord.utils.utcnow() + timedelta(days=SPAM_TIMEOUT_DAYS)
            await ctx.author.timeout(timeout_until, reason="Spam l·ªánh vay xu")
            
            # G·ª≠i th√¥ng b√°o cho admin
            admin_embed = discord.Embed(
                title="üö® ƒê√£ timeout ng∆∞·ªùi d√πng spam l·ªánh vay xu",
                description=f"Ng∆∞·ªùi d√πng: {ctx.author.mention} (ID: {ctx.author.id})\nTh·ªùi gian: 7 ng√†y\nL√Ω do: Spam l·ªánh vay xu ({loan_violations[user_id]} l·∫ßn)",
                color=discord.Color.dark_red()
            )
            await ctx.send(embed=admin_embed)
            
        except discord.Forbidden:
            await ctx.send("‚ùå Kh√¥ng th·ªÉ timeout ng∆∞·ªùi d√πng do thi·∫øu quy·ªÅn!")
        except Exception as e:
            await ctx.send(f"‚ùå L·ªói khi timeout: {str(e)}")
        
        return

    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ c√≥ kho·∫£n vay
    if user_id in loans:
        # TƒÉng s·ªë l·∫ßn vi ph·∫°m
        loan_violations[user_id] = loan_violations.get(user_id, 0) + 1
        
        embed = discord.Embed(
            title="‚ùå Kh√¥ng th·ªÉ vay",
            description=f"B·∫°n ƒë√£ c√≥ kho·∫£n vay ch∆∞a tr·∫£. H√£y tr·∫£ l·∫°i kho·∫£n vay hi·ªán t·∫°i tr∆∞·ªõc khi vay ti·∫øp.",
            color=discord.Color.red())
        embed.add_field(
            name="Kho·∫£n vay hi·ªán t·∫°i", 
            value=f"{loans[user_id]['amount']} xu", 
            inline=True)
        embed.add_field(
            name="C·∫£nh b√°o", 
            value=f"‚ö†Ô∏è ƒê√¢y l√† l·∫ßn th·ª© {loan_violations[user_id]}/3 b·∫°n c·ªë g·∫Øng vay khi ƒë√£ c√≥ n·ª£.\nL·∫ßn th·ª© 3 s·∫Ω b·ªã timeout 7 ng√†y!", 
            inline=False)
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra s·ªë l∆∞·ª£ng
    if amount <= 0:
        embed = discord.Embed(title="‚ùå L·ªói",
                              description="S·ªë l∆∞·ª£ng xu vay ph·∫£i l·ªõn h∆°n 0.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra gi·ªõi h·∫°n vay (t·ªëi ƒëa 1000 xu)
    if amount > 1000:
        embed = discord.Embed(
            title="‚ùå V∆∞·ª£t gi·ªõi h·∫°n",
            description="B·∫°n ch·ªâ c√≥ th·ªÉ vay t·ªëi ƒëa 1000 xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Th√™m kho·∫£n vay
    loans[user_id] = {"amount": amount, "time": datetime.now()}
    currency[user_id] += amount

    embed = discord.Embed(
        title="üè¶ Vay Xu Th√†nh C√¥ng",
        description=f"{ctx.author.mention} ƒë√£ vay {amount} xu. H√£y tr·∫£ l·∫°i trong v√≤ng 2 gi·ªù ƒë·ªÉ tr√°nh b·ªã ban.",
        color=discord.Color.green())
    embed.add_field(
        name="‚ö†Ô∏è L∆∞u √Ω",
        value="- B·∫°n **ch·ªâ ƒë∆∞·ª£c vay 1 l·∫ßn duy nh·∫•t** cho ƒë·∫øn khi tr·∫£ h·∫øt\n- B·∫°n kh√¥ng th·ªÉ chuy·ªÉn xu vay cho ng∆∞·ªùi kh√°c\n- Vay th√™m khi ch∆∞a tr·∫£ s·∫Ω b·ªã coi l√† spam v√† b·ªã timeout",
        inline=False)
    embed.add_field(
        name="üîÑ C√°ch tr·∫£ xu",
        value=f"S·ª≠ d·ª•ng l·ªánh `.traxu {amount}` ƒë·ªÉ tr·∫£ kho·∫£n vay\nC·∫ßn tr·∫£ ƒë√∫ng s·ªë xu ƒë√£ vay: **{amount} xu**",
        inline=False)
    embed.set_footer(text="H·∫°n tr·∫£: 2 gi·ªù t·ª´ th·ªùi ƒëi·ªÉm vay")
    await ctx.send(embed=embed)

@bot.command(name='traxu')
@check_channel()
async def repay_loan(ctx, amount: int = None):
    """Cho ph√©p ng∆∞·ªùi d√πng tr·∫£ kho·∫£n vay xu - ph·∫£i tr·∫£ ƒë·ªß s·ªë ti·ªÅn ƒë√£ vay"""
    if amount is None:
        embed = discord.Embed(
            title="üè¶ Tr·∫£ Xu - H∆∞·ªõng D·∫´n",
            description="Tr·∫£ l·∫°i kho·∫£n vay c·ªßa b·∫°n.",
            color=discord.Color.blue())
        embed.add_field(name="C√°ch d√πng", value="`.traxu [s·ªë xu]`\nV√≠ d·ª•: `.traxu 500`", inline=False)
        embed.add_field(name="L∆∞u √Ω", value="‚ö†Ô∏è B·∫°n ph·∫£i tr·∫£ ƒë·ªß v√† ƒë√∫ng s·ªë ti·ªÅn ƒë√£ vay trong m·ªôt l·∫ßn duy nh·∫•t", inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng kh√¥ng c√≥ kho·∫£n vay
    if user_id not in loans:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng c√≥ kho·∫£n vay",
            description="B·∫°n kh√¥ng c√≥ kho·∫£n vay n√†o c·∫ßn tr·∫£.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # L·∫•y th√¥ng tin kho·∫£n vay
    loan_amount = loans[user_id]["amount"]
    
    # Ki·ªÉm tra s·ªë ti·ªÅn tr·∫£ c√≥ ƒë√∫ng kh√¥ng
    if amount != loan_amount:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng ƒë√∫ng",
            description=f"B·∫°n ph·∫£i tr·∫£ ƒë√∫ng {loan_amount} xu. Kh√¥ng th·ªÉ tr·∫£ nhi·ªÅu h∆°n ho·∫∑c √≠t h∆°n.",
            color=discord.Color.red())
        embed.add_field(name="Kho·∫£n vay c·ªßa b·∫°n", value=f"{loan_amount} xu", inline=True)
        embed.add_field(name="S·ªë ti·ªÅn b·∫°n ƒëang tr·∫£", value=f"{amount} xu", inline=True)
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra s·ªë d∆∞
    if currency[user_id] < amount:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß xu",
            description=f"B·∫°n kh√¥ng c√≥ ƒë·ªß xu ƒë·ªÉ tr·∫£ kho·∫£n vay. B·∫°n c·∫ßn {amount} xu.",
            color=discord.Color.red())
        embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i", value=f"{currency[user_id]} xu", inline=True)
        embed.add_field(name="C√≤n thi·∫øu", value=f"{amount - currency[user_id]} xu", inline=True)
        await ctx.send(embed=embed)
        return

    # Tr·∫£ kho·∫£n vay
    currency[user_id] -= amount
    del loans[user_id]  # X√≥a kho·∫£n vay
    
    # X√≥a vi ph·∫°m n·∫øu c√≥
    if user_id in loan_violations:
        del loan_violations[user_id]

    embed = discord.Embed(
        title="‚úÖ Tr·∫£ Xu Th√†nh C√¥ng",
        description=f"{ctx.author.mention} ƒë√£ tr·∫£ {amount} xu v√† kh√¥ng c√≤n n·ª£.",
        color=discord.Color.green())
    embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i", value=f"{currency[user_id]} xu", inline=True)
    embed.set_footer(text="C·∫£m ∆°n b·∫°n ƒë√£ tr·∫£ n·ª£ ƒë√∫ng h·∫°n!")
    await ctx.send(embed=embed)

@bot.command(name='checkvay')
@admin_only()
async def check_loans_command(ctx, user: discord.Member = None):
    """Ki·ªÉm tra th√¥ng tin vay xu c·ªßa ng∆∞·ªùi d√πng ho·∫∑c to√†n b·ªô h·ªá th·ªëng"""
    # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ai ƒëang vay
    if not loans:
        embed = discord.Embed(
            title="üè¶ Ki·ªÉm tra kho·∫£n vay",
            description="Kh√¥ng c√≥ kho·∫£n vay n√†o trong h·ªá th·ªëng.",
            color=discord.Color.green())
        await ctx.send(embed=embed)
        return
    
    current_time = datetime.now()
    
    # N·∫øu cung c·∫•p user c·ª• th·ªÉ, ch·ªâ hi·ªÉn th·ªã th√¥ng tin c·ªßa ng∆∞·ªùi ƒë√≥
    if user:
        user_id = user.id
        if user_id not in loans:
            embed = discord.Embed(
                title="üè¶ Ki·ªÉm tra kho·∫£n vay",
                description=f"{user.mention} kh√¥ng c√≥ kho·∫£n vay n√†o.",
                color=discord.Color.blue())
            await ctx.send(embed=embed)
            return
        
        loan_info = loans[user_id]
        loan_amount = loan_info["amount"]
        loan_time = loan_info["time"]
        time_elapsed = (current_time - loan_time).total_seconds()
        time_remaining = max(0, 7200 - time_elapsed)  # 2 gi·ªù = 7200 gi√¢y
        
        hours_remaining = int(time_remaining // 3600)
        minutes_remaining = int((time_remaining % 3600) // 60)
        seconds_remaining = int(time_remaining % 60)
        
        status = "‚úÖ ƒêang trong th·ªùi h·∫°n" if time_remaining > 0 else "‚ùó **QU√Å H·∫†N**"
        
        embed = discord.Embed(
            title="üè¶ Th√¥ng tin kho·∫£n vay",
            description=f"Th√¥ng tin kho·∫£n vay c·ªßa {user.mention}",
            color=discord.Color.blue() if time_remaining > 0 else discord.Color.red())
        
        embed.add_field(name="S·ªë xu ƒë√£ vay", value=f"{loan_amount} xu", inline=True)
        embed.add_field(name="Th·ªùi gian vay", value=f"<t:{int(loan_time.timestamp())}:R>", inline=True)
        embed.add_field(name="Tr·∫°ng th√°i", value=status, inline=False)
        
        if time_remaining > 0:
            embed.add_field(name="Th·ªùi gian c√≤n l·∫°i", value=f"{hours_remaining} gi·ªù {minutes_remaining} ph√∫t {seconds_remaining} gi√¢y", inline=False)
        else:
            overdue_time = -time_remaining
            overdue_hours = int(overdue_time // 3600)
            overdue_minutes = int((overdue_time % 3600) // 60)
            embed.add_field(name="Qu√° h·∫°n", value=f"{overdue_hours} gi·ªù {overdue_minutes} ph√∫t", inline=False)
            embed.add_field(name="‚ö†Ô∏è H√†nh ƒë·ªông ƒë·ªÅ xu·∫•t", value="S·ª≠ d·ª•ng l·ªánh `.xulyvay @user [kick/ban]` ƒë·ªÉ x·ª≠ l√Ω ng∆∞·ªùi d√πng vi ph·∫°m.", inline=False)
            
        embed.set_thumbnail(url=user.display_avatar.url)
        embed.set_footer(text=f"ID: {user_id}")
        
        await ctx.send(embed=embed)
        return
    
    # N·∫øu kh√¥ng cung c·∫•p user c·ª• th·ªÉ, hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ kho·∫£n vay
    embed = discord.Embed(
        title="üè¶ Danh s√°ch kho·∫£n vay",
        description=f"C√≥ **{len(loans)}** kho·∫£n vay trong h·ªá th·ªëng",
        color=discord.Color.gold())
    
    # Ph√¢n lo·∫°i kho·∫£n vay th√†nh 'ƒëang trong th·ªùi h·∫°n' v√† 'qu√° h·∫°n'
    active_loans = []
    overdue_loans = []
    
    for user_id, loan_info in loans.items():
        loan_time = loan_info["time"]
        time_elapsed = (current_time - loan_time).total_seconds()
        time_remaining = max(0, 7200 - time_elapsed)
        
        try:
            user = await bot.fetch_user(user_id)
            username = user.name
        except:
            username = f"Ng∆∞·ªùi d√πng {user_id}"
        
        loan_data = {
            'user_id': user_id,
            'username': username,
            'amount': loan_info["amount"],
            'time_remaining': time_remaining,
            'loan_time': loan_time
        }
        
        if time_remaining > 0:
            active_loans.append(loan_data)
        else:
            overdue_loans.append(loan_data)
    
    # Hi·ªÉn th·ªã kho·∫£n vay qu√° h·∫°n tr∆∞·ªõc
    if overdue_loans:
        overdue_text = ""
        for idx, loan in enumerate(sorted(overdue_loans, key=lambda x: x['time_remaining']), 1):
            overdue_time = -loan['time_remaining']
            hours = int(overdue_time // 3600)
            minutes = int((overdue_time % 3600) // 60)
            overdue_text += f"{idx}. **{loan['username']}** - {loan['amount']} xu - Qu√° h·∫°n **{hours}h {minutes}m**\n"
        
        embed.add_field(name="‚ùó KHO·∫¢N VAY QU√Å H·∫†N", value=overdue_text, inline=False)
        embed.add_field(name="‚ö†Ô∏è H√†nh ƒë·ªông ƒë·ªÅ xu·∫•t", 
                       value="S·ª≠ d·ª•ng l·ªánh `.xulyvay @user [kick/ban]` ho·∫∑c `.autoxlvay` ƒë·ªÉ x·ª≠ l√Ω t·∫•t c·∫£.", 
                       inline=False)
    
    # Hi·ªÉn th·ªã kho·∫£n vay ƒëang ho·∫°t ƒë·ªông
    if active_loans:
        active_text = ""
        for idx, loan in enumerate(sorted(active_loans, key=lambda x: x['time_remaining']), 1):
            hours = int(loan['time_remaining'] // 3600)
            minutes = int((loan['time_remaining'] % 3600) // 60)
            active_text += f"{idx}. **{loan['username']}** - {loan['amount']} xu - C√≤n l·∫°i **{hours}h {minutes}m**\n"
        
        embed.add_field(name="‚úÖ KHO·∫¢N VAY ƒêANG HO·∫†T ƒê·ªòNG", value=active_text, inline=False)
    
    embed.set_footer(text=f"S·ª≠ d·ª•ng .checkvay @user ƒë·ªÉ xem chi ti·∫øt t·ª´ng ng∆∞·ªùi")
    await ctx.send(embed=embed)

@bot.command(name='xulyvay')
@admin_only()
async def punish_loan_defaulter(ctx, member: discord.Member = None, action: str = None):
    """X·ª≠ l√Ω ng∆∞·ªùi d√πng kh√¥ng tr·∫£ kho·∫£n vay ƒë√∫ng h·∫°n"""
    if member is None or action is None:
        embed = discord.Embed(
            title="‚öñÔ∏è X·ª≠ l√Ω vi ph·∫°m kho·∫£n vay - H∆∞·ªõng d·∫´n",
            description="X·ª≠ l√Ω ng∆∞·ªùi d√πng kh√¥ng tr·∫£ kho·∫£n vay ƒë√∫ng h·∫°n",
            color=discord.Color.blue())
        
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.xulyvay @ng∆∞·ªùi_d√πng [kick/ban]`\nV√≠ d·ª•: `.xulyvay @username kick`",
            inline=False)
        
        embed.add_field(
            name="C√°c h√¨nh ph·∫°t",
            value="`kick` - ƒêu·ªïi ng∆∞·ªùi d√πng kh·ªèi server\n`ban` - C·∫•m ng∆∞·ªùi d√πng kh·ªèi server",
            inline=False)
        
        embed.set_footer(text="Ch·ªâ s·ª≠ d·ª•ng cho nh·ªØng ng∆∞·ªùi ƒë√£ qu√° h·∫°n tr·∫£ kho·∫£n vay")
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra xem target c√≥ ph·∫£i admin kh√¥ng
    if member.guild_permissions.administrator or member.id in ADMIN_IDS:
        embed = discord.Embed(
            title="üõ°Ô∏è B·∫£o v·ªá Admin",
            description="Kh√¥ng th·ªÉ x·ª≠ l√Ω kho·∫£n vay c·ªßa admin!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    user_id = member.id
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ kho·∫£n vay kh√¥ng
    if user_id not in loans:
        embed = discord.Embed(
            title="‚ùì Kh√¥ng c√≥ kho·∫£n vay",
            description=f"{member.mention} kh√¥ng c√≥ kho·∫£n vay n√†o trong h·ªá th·ªëng.",
            color=discord.Color.yellow())
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra xem kho·∫£n vay c√≥ qu√° h·∫°n kh√¥ng
    loan_info = loans[user_id]
    loan_time = loan_info["time"]
    loan_amount = loan_info["amount"]
    current_time = datetime.now()
    time_elapsed = (current_time - loan_time).total_seconds()
    time_remaining = 7200 - time_elapsed  # 2 gi·ªù = 7200 gi√¢y
    
    if time_remaining > 0:
        hours = int(time_remaining // 3600)
        minutes = int((time_remaining % 3600) // 60)
        
        embed = discord.Embed(
            title="‚è∞ Ch∆∞a qu√° h·∫°n",
            description=f"Kho·∫£n vay c·ªßa {member.mention} ch∆∞a qu√° h·∫°n.",
            color=discord.Color.yellow())
        
        embed.add_field(name="Th·ªùi gian c√≤n l·∫°i", 
                       value=f"{hours} gi·ªù {minutes} ph√∫t", 
                       inline=False)
        
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra h√†nh ƒë·ªông h·ª£p l·ªá
    action = action.lower()
    if action not in ["kick", "ban"]:
        embed = discord.Embed(
            title="‚ùå L·ªói c√∫ ph√°p",
            description="H√†nh ƒë·ªông ph·∫£i l√† `kick` ho·∫∑c `ban`.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # T·∫°o view x√°c nh·∫≠n v·ªõi c√°c n√∫t
    confirm_view = discord.ui.View(timeout=60)
    
    confirm_button = discord.ui.Button(
        label=f"X√°c nh·∫≠n {action.upper()}",
        style=discord.ButtonStyle.danger,
        emoji="‚öñÔ∏è")
    
    cancel_button = discord.ui.Button(
        label="H·ªßy b·ªè",
        style=discord.ButtonStyle.secondary,
        emoji="‚ùå")
    
    async def confirm_callback(interaction):
        if interaction.user != ctx.author:
            await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
            return
        
        # V√¥ hi·ªáu h√≥a c√°c n√∫t
        confirm_view.clear_items()
        await interaction.response.edit_message(view=confirm_view)
        
        try:
            # X·ª≠ l√Ω ng∆∞·ªùi d√πng v√† x√≥a kho·∫£n vay
            reason = f"Vi ph·∫°m kh√¥ng tr·∫£ kho·∫£n vay {loan_amount} xu | Th·ª±c hi·ªán b·ªüi {ctx.author.name}"
            
            if action == "kick":
                await member.kick(reason=reason)
                punishment_type = "KICK"
                success_message = f"{member.mention} ƒë√£ b·ªã ƒëu·ªïi kh·ªèi server!"
            else:  # ban
                await member.ban(reason=reason)
                punishment_type = "BAN"
                success_message = f"{member.mention} ƒë√£ b·ªã c·∫•m kh·ªèi server!"
            
            # X√≥a kho·∫£n vay
            del loans[user_id]
            
            # G·ª≠i th√¥ng b√°o th√†nh c√¥ng
            success_embed = discord.Embed(
                title=f"‚öñÔ∏è ƒê√É X·ª¨ L√ù: {punishment_type}",
                description=success_message,
                color=discord.Color.green())
            
            success_embed.add_field(name="Ng∆∞·ªùi vi ph·∫°m", 
                                  value=f"**{member.name}** (ID: {member.id})", 
                                  inline=True)
            
            success_embed.add_field(name="Kho·∫£n vay", 
                                  value=f"**{loan_amount} xu**", 
                                  inline=True)
            
            overdue_time = -time_remaining
            overdue_hours = int(overdue_time // 3600)
            overdue_minutes = int((overdue_time % 3600) // 60)
            
            success_embed.add_field(name="Qu√° h·∫°n", 
                                  value=f"{overdue_hours} gi·ªù {overdue_minutes} ph√∫t", 
                                  inline=False)
            
            success_embed.set_footer(text=f"Th·ª±c hi·ªán b·ªüi: {ctx.author.name} | {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
            
            await interaction.message.edit(embed=success_embed)
            
            # G·ª≠i th√¥ng b√°o ƒë·∫øn k√™nh game
            game_channel = ctx.guild.get_channel(GAME_CHANNEL_ID)
            if game_channel and game_channel != ctx.channel:
                await game_channel.send(embed=success_embed)
            
        except discord.Forbidden:
            error_embed = discord.Embed(
                title="‚ùå L·ªói quy·ªÅn h·∫°n",
                description=f"Bot kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ {action} ng∆∞·ªùi d√πng n√†y!",
                color=discord.Color.red())
            await interaction.message.edit(embed=error_embed)
        
        except Exception as e:
            error_embed = discord.Embed(
                title="‚ùå L·ªói",
                description=f"Kh√¥ng th·ªÉ th·ª±c hi·ªán l·ªánh: {str(e)}",
                color=discord.Color.red())
            await interaction.message.edit(embed=error_embed)
    
    async def cancel_callback(interaction):
        if interaction.user != ctx.author:
            await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
            return
        
        # V√¥ hi·ªáu h√≥a c√°c n√∫t
        confirm_view.clear_items()
        await interaction.response.edit_message(view=confirm_view)
        
        # G·ª≠i th√¥ng b√°o h·ªßy
        cancel_embed = discord.Embed(
            title="‚ùå ƒê√£ h·ªßy",
            description="L·ªánh x·ª≠ l√Ω kho·∫£n vay ƒë√£ b·ªã h·ªßy b·ªè.",
            color=discord.Color.dark_gray())
        await interaction.message.edit(embed=cancel_embed)
    
    # G√°n callbacks
    confirm_button.callback = confirm_callback
    cancel_button.callback = cancel_callback
    
    # Th√™m n√∫t v√†o view
    confirm_view.add_item(confirm_button)
    confirm_view.add_item(cancel_button)
    
    # Hi·ªÉn th·ªã th√¥ng tin qu√° h·∫°n
    overdue_time = -time_remaining
    overdue_hours = int(overdue_time // 3600)
    overdue_minutes = int((overdue_time % 3600) // 60)
    
    # T·∫°o embed x√°c nh·∫≠n
    confirm_embed = discord.Embed(
        title="‚öñÔ∏è X√°c nh·∫≠n x·ª≠ l√Ω kho·∫£n vay",
        description=f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën **{action.upper()}** {member.mention} v√¨ qu√° h·∫°n tr·∫£ kho·∫£n vay?",
        color=discord.Color.gold())
    
    confirm_embed.add_field(name="Ng∆∞·ªùi vi ph·∫°m", 
                          value=f"**{member.name}** (ID: {member.id})", 
                          inline=True)
    
    confirm_embed.add_field(name="Kho·∫£n vay", 
                          value=f"**{loan_amount} xu**", 
                          inline=True)
    
    confirm_embed.add_field(name="Qu√° h·∫°n", 
                          value=f"{overdue_hours} gi·ªù {overdue_minutes} ph√∫t", 
                          inline=False)
    
    confirm_embed.add_field(name="C·∫£nh b√°o", 
                          value="Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c sau khi th·ª±c hi·ªán!", 
                          inline=False)
    
    await ctx.send(embed=confirm_embed, view=confirm_view)

@bot.command(name='autoxlvay')
@admin_only()
async def auto_punish_loan_defaulters(ctx, action: str = "kick"):
    """T·ª± ƒë·ªông x·ª≠ l√Ω t·∫•t c·∫£ nh·ªØng ng∆∞·ªùi vi ph·∫°m kho·∫£n vay"""
    # Ki·ªÉm tra h√†nh ƒë·ªông h·ª£p l·ªá
    action = action.lower()
    if action not in ["kick", "ban"]:
        embed = discord.Embed(
            title="‚ùå L·ªói c√∫ ph√°p",
            description="H√†nh ƒë·ªông ph·∫£i l√† `kick` ho·∫∑c `ban`.\nV√≠ d·ª•: `.autoxlvay ban`",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra xem c√≥ kho·∫£n vay qu√° h·∫°n n√†o kh√¥ng
    current_time = datetime.now()
    defaulters = []
    
    for user_id, loan_info in loans.items():
        loan_time = loan_info["time"]
        time_elapsed = (current_time - loan_time).total_seconds()
        
        if time_elapsed > 7200:  # Qu√° 2 gi·ªù
            defaulters.append({
                "user_id": user_id,
                "amount": loan_info["amount"],
                "elapsed": time_elapsed
            })
    
    if not defaulters:
        embed = discord.Embed(
            title="‚úÖ Kh√¥ng c√≥ vi ph·∫°m",
            description="Kh√¥ng c√≥ kho·∫£n vay n√†o qu√° h·∫°n trong h·ªá th·ªëng.",
            color=discord.Color.green())
        await ctx.send(embed=embed)
        return
    
    # T·∫°o view x√°c nh·∫≠n v·ªõi c√°c n√∫t
    confirm_view = discord.ui.View(timeout=60)
    
    confirm_button = discord.ui.Button(
        label=f"X√°c nh·∫≠n {action.upper()} {len(defaulters)} ng∆∞·ªùi",
        style=discord.ButtonStyle.danger,
        emoji="‚öñÔ∏è")
    
    cancel_button = discord.ui.Button(
        label="H·ªßy b·ªè",
        style=discord.ButtonStyle.secondary,
        emoji="‚ùå")
    
    async def confirm_callback(interaction):
        if interaction.user != ctx.author:
            await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
            return
        
        # V√¥ hi·ªáu h√≥a c√°c n√∫t
        confirm_view.clear_items()
        await interaction.response.edit_message(view=confirm_view)
        
        # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
        processing_embed = discord.Embed(
            title="‚öôÔ∏è ƒêang x·ª≠ l√Ω",
            description=f"ƒêang {action} {len(defaulters)} ng∆∞·ªùi vi ph·∫°m kho·∫£n vay...",
            color=discord.Color.blue())
        await interaction.message.edit(embed=processing_embed)
        
        # X·ª≠ l√Ω t·ª´ng ng∆∞·ªùi m·ªôt
        processed = 0
        failed = 0
        skipped = 0
        
        result_text = ""
        
        for idx, defaulter in enumerate(defaulters, 1):
            user_id = defaulter["user_id"]
            loan_amount = defaulter["amount"]
            
            try:
                # Ki·ªÉm tra xem c√≥ ph·∫£i admin kh√¥ng
                if user_id in ADMIN_IDS:
                    skipped += 1
                    result_text += f"{idx}. ID: {user_id} - **B·ªé QUA** (Admin)\n"
                    continue
                
                # L·∫•y th√†nh vi√™n v√† x·ª≠ l√Ω
                try:
                    member = await ctx.guild.fetch_member(user_id)
                    
                    if member:
                        reason = f"T·ª± ƒë·ªông {action}: Vi ph·∫°m kh√¥ng tr·∫£ kho·∫£n vay {loan_amount} xu"
                        
                        if action == "kick":
                            await member.kick(reason=reason)
                            result_text += f"{idx}. {member.name} - **ƒê√É KICK** - {loan_amount} xu\n"
                        else:  # ban
                            await member.ban(reason=reason)
                            result_text += f"{idx}. {member.name} - **ƒê√É BAN** - {loan_amount} xu\n"
                        
                        # X√≥a kho·∫£n vay
                        del loans[user_id]
                        processed += 1
                        
                    else:
                        result_text += f"{idx}. ID: {user_id} - **KH√îNG T√åM TH·∫§Y** - {loan_amount} xu\n"
                        del loans[user_id]  # X√≥a kho·∫£n vay v√¨ ng∆∞·ªùi d√πng kh√¥ng c√≤n trong server
                        processed += 1
                
                except discord.Forbidden:
                    result_text += f"{idx}. ID: {user_id} - **L·ªñI QUY·ªÄN** - {loan_amount} xu\n"
                    failed += 1
                
                except Exception as e:
                    result_text += f"{idx}. ID: {user_id} - **L·ªñI: {str(e)}** - {loan_amount} xu\n"
                    failed += 1
            
            except Exception as e:
                result_text += f"{idx}. ID: {user_id} - **L·ªñI: {str(e)}** - {loan_amount} xu\n"
                failed += 1
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        result_embed = discord.Embed(
            title=f"‚öñÔ∏è K·∫øt qu·∫£ x·ª≠ l√Ω kho·∫£n vay qu√° h·∫°n ({action.upper()})",
            description=f"ƒê√£ x·ª≠ l√Ω {processed}/{len(defaulters)} ng∆∞·ªùi vi ph·∫°m",
            color=discord.Color.green())
        
        if skipped > 0:
            result_embed.add_field(name="S·ªë ng∆∞·ªùi b·ªè qua", value=f"{skipped} (Admin/Owner)", inline=True)
        
        if failed > 0:
            result_embed.add_field(name="S·ªë ng∆∞·ªùi l·ªói", value=str(failed), inline=True)
        
        # Chia k·∫øt qu·∫£ th√†nh nhi·ªÅu ph·∫ßn n·∫øu qu√° d√†i
        if len(result_text) > 1000:
            chunks = [result_text[i:i+1000] for i in range(0, len(result_text), 1000)]
            for i, chunk in enumerate(chunks):
                result_embed.add_field(name=f"Chi ti·∫øt (Ph·∫ßn {i+1}/{len(chunks)})", value=chunk, inline=False)
        else:
            result_embed.add_field(name="Chi ti·∫øt", value=result_text, inline=False)
        
        result_embed.set_footer(text=f"Th·ª±c hi·ªán b·ªüi: {ctx.author.name} | {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        
        await interaction.message.edit(embed=result_embed)
        
        # G·ª≠i th√¥ng b√°o ƒë·∫øn k√™nh game
        game_channel = ctx.guild.get_channel(GAME_CHANNEL_ID)
        if game_channel and game_channel != ctx.channel:
            summary_embed = discord.Embed(
                title=f"‚öñÔ∏è X·ª≠ l√Ω vi ph·∫°m kho·∫£n vay",
                description=f"ƒê√£ {action} {processed} ng∆∞·ªùi kh√¥ng tr·∫£ kho·∫£n vay ƒë√∫ng h·∫°n.",
                color=discord.Color.red())
            summary_embed.set_footer(text=f"Th·ª±c hi·ªán b·ªüi: {ctx.author.name}")
            await game_channel.send(embed=summary_embed)
    
    async def cancel_callback(interaction):
        if interaction.user != ctx.author:
            await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
            return
        
        # V√¥ hi·ªáu h√≥a c√°c n√∫t
        confirm_view.clear_items()
        await interaction.response.edit_message(view=confirm_view)
        
        # G·ª≠i th√¥ng b√°o h·ªßy
        cancel_embed = discord.Embed(
            title="‚ùå ƒê√£ h·ªßy",
            description="L·ªánh x·ª≠ l√Ω t·ª± ƒë·ªông ƒë√£ b·ªã h·ªßy b·ªè.",
            color=discord.Color.dark_gray())
        await interaction.message.edit(embed=cancel_embed)
    
    # G√°n callbacks
    confirm_button.callback = confirm_callback
    cancel_button.callback = cancel_callback
    
    # Th√™m n√∫t v√†o view
    confirm_view.add_item(confirm_button)
    confirm_view.add_item(cancel_button)
    
    # T·∫°o danh s√°ch ng∆∞·ªùi vi ph·∫°m
    defaulters_list = ""
    for idx, defaulter in enumerate(defaulters[:15], 1):  # Hi·ªÉn th·ªã t·ªëi ƒëa 15 ng∆∞·ªùi
        user_id = defaulter["user_id"]
        loan_amount = defaulter["amount"]
        elapsed_time = defaulter["elapsed"]
        
        hours = int(elapsed_time // 3600)
        minutes = int((elapsed_time % 3600) // 60)
        
        try:
            user = await bot.fetch_user(user_id)
            username = user.name
        except:
            username = f"Ng∆∞·ªùi d√πng {user_id}"
        
        defaulters_list += f"{idx}. **{username}** - {loan_amount} xu - Qu√° h·∫°n **{hours}h {minutes}m**\n"
    
    if len(defaulters) > 15:
        defaulters_list += f"... v√† {len(defaulters) - 15} ng∆∞·ªùi kh√°c"
    
    # T·∫°o embed x√°c nh·∫≠n
    confirm_embed = discord.Embed(
        title=f"‚öñÔ∏è X√°c nh·∫≠n x·ª≠ l√Ω t·ª± ƒë·ªông ({action.upper()})",
        description=f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën {action} **{len(defaulters)} ng∆∞·ªùi** vi ph·∫°m kho·∫£n vay?",
        color=discord.Color.red())
    
    confirm_embed.add_field(name="Danh s√°ch vi ph·∫°m", value=defaulters_list, inline=False)
    
    confirm_embed.add_field(name="‚ö†Ô∏è C·∫£nh b√°o", 
                          value="Thao t√°c n√†y s·∫Ω x·ª≠ l√Ω t·∫•t c·∫£ ng∆∞·ªùi vi ph·∫°m v√† kh√¥ng th·ªÉ ho√†n t√°c!", 
                          inline=False)
    
    await ctx.send(embed=confirm_embed, view=confirm_view)

@bot.command(name='bxhxu')
@check_channel()
async def bxhxu(ctx):
    """Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng xu c·ªßa ng∆∞·ªùi ch∆°i."""
    sorted_currency = sorted(currency.items(),
                             key=lambda x: x[1],
                             reverse=True)
    embed = discord.Embed(title="üèÜ B·∫£ng X·∫øp H·∫°ng Xu üí∞",
                          description="Top ng∆∞·ªùi ch∆°i c√≥ nhi·ªÅu xu nh·∫•t",
                          color=discord.Color.gold())

    if sorted_currency:
        top_players = []
        rank = 1

        for user_id, balance in sorted_currency:
            if rank > 10:  # Ch·ªâ l·∫•y top 10
                break

            try:
                member = await ctx.guild.fetch_member(user_id)
                if member:  # Ch·ªâ hi·ªÉn th·ªã th√†nh vi√™n c√≤n trong server
                    medal = ["ü•á", "ü•à", "ü•â"][rank -
                                            1] if rank <= 3 else f"{rank}."
                    top_players.append((medal, member.display_name, balance))
                    rank += 1
            except discord.NotFound:
                continue  # B·ªè qua ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i

        if top_players:
            for medal, name, balance in top_players:
                embed.add_field(name=f"{medal} {name}",
                                value=f"**{balance} xu**",
                                inline=False)
        else:
            embed.description = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o trong server."
    else:
        embed.description = "Ch∆∞a c√≥ ai trong b·∫£ng x·∫øp h·∫°ng."

    embed.set_footer(text="H√£y tham gia c√°c tr√≤ ch∆°i ƒë·ªÉ c√≥ c∆° h·ªôi l√™n top!")
    embed.set_thumbnail(url=ctx.guild.icon.url if ctx.guild.icon else None)

    await ctx.send(embed=embed)


@bot.command(name='txu')
@commands.has_permissions(administrator=True)
async def txu(ctx, member: discord.Member = None, amount: str = None):
    """Cho ph√©p qu·∫£n tr·ªã vi√™n t·∫∑ng xu cho ng∆∞·ªùi ch∆°i."""
    if member is None or amount is None:
        embed = discord.Embed(
            title="ü™ô T·∫∑ng Xu - H∆∞·ªõng D·∫´n",
            description="Cho ph√©p admin t·∫∑ng xu cho th√†nh vi√™n.",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.txu @ng∆∞·ªùi_d√πng [s·ªë xu]`\nV√≠ d·ª•: `.txu @username 100`",
            inline=False)
        embed.add_field(
            name="L∆∞u √Ω",
            value=
            "- Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y\n- S·ªë xu ph·∫£i l√† s·ªë d∆∞∆°ng",
            inline=False)
        await ctx.send(embed=embed)
        return

    try:
        # Chuy·ªÉn ƒë·ªïi s·ªë xu th√†nh s·ªë nguy√™n
        amount_int = int(amount)

        if amount_int <= 0:
            embed = discord.Embed(title="‚ùå L·ªói",
                                  description="S·ªë l∆∞·ª£ng xu ph·∫£i l·ªõn h∆°n 0.",
                                  color=discord.Color.red())
            await ctx.send(embed=embed)
            return

        # T·∫∑ng xu cho ng∆∞·ªùi ch∆°i
        currency[member.id] += amount_int

        embed = discord.Embed(
            title="‚úÖ T·∫∑ng Xu Th√†nh C√¥ng",
            description=
            f"{member.display_name} ƒë√£ nh·∫≠n ƒë∆∞·ª£c {amount_int} xu t·ª´ {ctx.author.display_name}.",
            color=discord.Color.green())
        embed.add_field(name="S·ªë d∆∞ m·ªõi",
                        value=f"{currency[member.id]} xu",
                        inline=False)
        embed.set_thumbnail(url=member.display_avatar.url)
        embed.set_footer(
            text=f"Admin: {ctx.author.name} | ID: {ctx.author.id}")

        await ctx.send(embed=embed)

    except ValueError:
        embed = discord.Embed(title="‚ùå L·ªói",
                              description="S·ªë xu ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)


@bot.command(name='trxu')
@commands.has_permissions(administrator=True)
async def trxu(ctx, member: discord.Member = None, amount: str = None):
    """Cho ph√©p qu·∫£n tr·ªã vi√™n tr·ª´ xu t·ª´ t√†i kho·∫£n c·ªßa th√†nh vi√™n."""
    if member is None or amount is None:
        embed = discord.Embed(
            title="ü™ô Tr·ª´ Xu - H∆∞·ªõng D·∫´n",
            description="Cho ph√©p admin tr·ª´ xu c·ªßa th√†nh vi√™n.",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value=
            "`.trxu @ng∆∞·ªùi_d√πng [s·ªë xu/all]`\nV√≠ d·ª•: `.trxu @username 100` ho·∫∑c `.trxu @username all`",
            inline=False)
        embed.add_field(name="Tham s·ªë ƒë·∫∑c bi·ªát",
                        value="- `all`: Tr·ª´ t·∫•t c·∫£ xu c·ªßa ng∆∞·ªùi d√πng",
                        inline=False)
        embed.add_field(
            name="L∆∞u √Ω",
            value=
            "- Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y\n- S·ªë xu ph·∫£i l√† s·ªë d∆∞∆°ng\n- Kh√¥ng th·ªÉ tr·ª´ xu c·ªßa admin ch√≠nh",
            inline=False)
        await ctx.send(embed=embed)
        return

    # B·∫£o v·ªá ID admin ch√≠nh
    if member.id == 618702036992655381:
        embed = discord.Embed(title="üõ°Ô∏è B·∫£o V·ªá Admin",
                              description="Kh√¥ng th·ªÉ tr·ª´ xu c·ªßa admin ch√≠nh!",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p 'all'
    if amount.lower() == 'all':
        current_balance = currency.get(member.id, 0)

        if current_balance <= 0:
            embed = discord.Embed(
                title="‚ùå Kh√¥ng th·ªÉ tr·ª´ xu",
                description=
                f"{member.display_name} hi·ªán kh√¥ng c√≥ xu n√†o ƒë·ªÉ tr·ª´.",
                color=discord.Color.red())
            await ctx.send(embed=embed)
            return

        # T·∫°o view x√°c nh·∫≠n
        confirm_view = discord.ui.View(timeout=30)

        confirm_button = discord.ui.Button(label="X√°c nh·∫≠n",
                                           style=discord.ButtonStyle.danger,
                                           emoji="‚úÖ")

        cancel_button = discord.ui.Button(label="H·ªßy b·ªè",
                                          style=discord.ButtonStyle.secondary,
                                          emoji="‚ùå")

        async def confirm_callback(interaction):
            if interaction.user != ctx.author:
                await interaction.response.send_message(
                    "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
                return

            # Tr·ª´ t·∫•t c·∫£ xu
            old_balance = currency[member.id]
            currency[member.id] = 0

            result_embed = discord.Embed(
                title="‚úÖ ƒê√£ Tr·ª´ T·∫•t C·∫£ Xu",
                description=
                f"ƒê√£ tr·ª´ to√†n b·ªô {old_balance} xu c·ªßa {member.display_name}.",
                color=discord.Color.green())
            result_embed.add_field(name="S·ªë d∆∞ c≈©",
                                   value=f"{old_balance} xu",
                                   inline=True)
            result_embed.add_field(name="S·ªë d∆∞ m·ªõi", value="0 xu", inline=True)
            result_embed.set_thumbnail(url=member.display_avatar.url)
            result_embed.set_footer(
                text=f"Admin: {ctx.author.name} | ID: {ctx.author.id}")

            # V√¥ hi·ªáu h√≥a c√°c n√∫t
            confirm_view.clear_items()
            await interaction.response.edit_message(embed=result_embed,
                                                    view=confirm_view)

        async def cancel_callback(interaction):
            if interaction.user != ctx.author:
                await interaction.response.send_message(
                    "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
                return

            cancel_embed = discord.Embed(
                title="‚ùå ƒê√£ H·ªßy",
                description="Thao t√°c tr·ª´ xu ƒë√£ ƒë∆∞·ª£c h·ªßy b·ªè.",
                color=discord.Color.grey())

            # V√¥ hi·ªáu h√≥a c√°c n√∫t
            confirm_view.clear_items()
            await interaction.response.edit_message(embed=cancel_embed,
                                                    view=confirm_view)

        confirm_button.callback = confirm_callback
        cancel_button.callback = cancel_callback

        confirm_view.add_item(confirm_button)
        confirm_view.add_item(cancel_button)

        # T·∫°o embed x√°c nh·∫≠n
        confirm_embed = discord.Embed(
            title="‚ö†Ô∏è X√°c nh·∫≠n tr·ª´ t·∫•t c·∫£ xu",
            description=
            f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tr·ª´ t·∫•t c·∫£ xu ({current_balance} xu) c·ªßa {member.display_name}?",
            color=discord.Color.yellow())
        confirm_embed.set_footer(
            text="L∆∞u √Ω: Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c!")

        await ctx.send(embed=confirm_embed, view=confirm_view)
        return

    try:
        # Chuy·ªÉn ƒë·ªïi s·ªë xu th√†nh s·ªë nguy√™n
        amount_int = int(amount)

        if amount_int <= 0:
            embed = discord.Embed(title="‚ùå L·ªói",
                                  description="S·ªë l∆∞·ª£ng xu ph·∫£i l·ªõn h∆°n 0.",
                                  color=discord.Color.red())
            await ctx.send(embed=embed)
            return

        # Ki·ªÉm tra s·ªë d∆∞ hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
        if currency.get(member.id, 0) >= amount_int:
            currency[member.id] -= amount_int
            embed = discord.Embed(
                title="‚úÖ ƒê√£ Tr·ª´ Xu",
                description=
                f"ƒê√£ tr·ª´ {amount_int} xu t·ª´ t√†i kho·∫£n c·ªßa {member.display_name}.",
                color=discord.Color.green())
            embed.add_field(name="S·ªë d∆∞ m·ªõi",
                            value=f"{currency[member.id]} xu",
                            inline=False)
            embed.set_thumbnail(url=member.display_avatar.url)
            embed.set_footer(
                text=f"Admin: {ctx.author.name} | ID: {ctx.author.id}")
        else:
            embed = discord.Embed(
                title="‚ùå Kh√¥ng ƒë·ªß xu",
                description=
                f"{member.display_name} kh√¥ng c√≥ ƒë·ªß xu. S·ªë xu hi·ªán t·∫°i: {currency.get(member.id, 0)} xu.",
                color=discord.Color.red())
            embed.add_field(
                name="G·ª£i √Ω",
                value=
                "B·∫°n c√≥ th·ªÉ d√πng `.trxu @ng∆∞·ªùi_d√πng all` ƒë·ªÉ tr·ª´ t·∫•t c·∫£ xu.",
                inline=False)

        await ctx.send(embed=embed)

    except ValueError:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="S·ªë xu ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)


@trxu.error
async def trxu_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description=
            "B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng T√¨m Th·∫•y",
            description="Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n n√†y trong server.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    elif isinstance(error, commands.BadArgument):
        embed = discord.Embed(
            title="‚ùå L·ªói Tham S·ªë",
            description=
            "H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ nh·∫Øc ƒë·∫øn th√†nh vi√™n h·ª£p l·ªá v√† ch·ªâ ƒë·ªãnh s·ªë xu ch√≠nh x√°c.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(title="‚ùå L·ªói Kh√¥ng X√°c ƒê·ªãnh",
                              description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
                              color=discord.Color.red())
        await ctx.send(embed=embed)


@txu.error
async def txu_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description=
            "B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng T√¨m Th·∫•y",
            description="Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n n√†y trong server.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    elif isinstance(error, commands.BadArgument):
        embed = discord.Embed(
            title="‚ùå L·ªói Tham S·ªë",
            description=
            "H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ nh·∫Øc ƒë·∫øn th√†nh vi√™n h·ª£p l·ªá v√† ch·ªâ ƒë·ªãnh s·ªë xu ch√≠nh x√°c.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(title="‚ùå L·ªói Kh√¥ng X√°c ƒê·ªãnh",
                              description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
                              color=discord.Color.red())
        await ctx.send(embed=embed)


@bot.command(name='napxu')
@commands.has_permissions(administrator=True)
async def napxu(ctx, member: discord.Member = None, amount: int = None):
    """Cho ph√©p qu·∫£n tr·ªã vi√™n th√™m xu v√†o t√†i kho·∫£n c·ªßa th√†nh vi√™n."""
    if member is None or amount is None:
        embed = discord.Embed(
            title="üí∞ N·∫°p Xu - H∆∞·ªõng D·∫´n",
            description="Cho ph√©p admin th√™m xu v√†o t√†i kho·∫£n c·ªßa th√†nh vi√™n.",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.napxu @ng∆∞·ªùi_d√πng [s·ªë xu]`\nV√≠ d·ª•: `.napxu @username 100`",
            inline=False)
        embed.add_field(
            name="L∆∞u √Ω",
            value=
            "- Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y\n- S·ªë xu ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng",
            inline=False)
        await ctx.send(embed=embed)
        return

    if amount <= 0:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="S·ªë l∆∞·ª£ng xu ph·∫£i l·ªõn h∆°n 0.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # N·∫°p xu cho ng∆∞·ªùi ch∆°i
    currency[member.id] = currency.get(member.id, 0) + amount

    embed = discord.Embed(
        title="‚úÖ N·∫°p Xu Th√†nh C√¥ng",
        description=
        f"ƒê√£ th√™m **{amount} xu** v√†o t√†i kho·∫£n c·ªßa {member.mention}.",
        color=discord.Color.green())
    embed.add_field(name="S·ªë d∆∞ m·ªõi",
                    value=f"{currency[member.id]} xu",
                    inline=False)
    embed.set_thumbnail(url=member.display_avatar.url)
    embed.set_footer(text=f"Admin: {ctx.author.name} | ID: {ctx.author.id}")

    await ctx.send(embed=embed)


@napxu.error
async def napxu_error(ctx, error):
    """X·ª≠ l√Ω l·ªói cho l·ªánh napxu"""
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description=
            "B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng T√¨m Th·∫•y",
            description="Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n n√†y trong server.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    elif isinstance(error, commands.BadArgument):
        embed = discord.Embed(
            title="‚ùå L·ªói Tham S·ªë",
            description=
            "H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ nh·∫Øc ƒë·∫øn th√†nh vi√™n h·ª£p l·ªá v√† ch·ªâ ƒë·ªãnh s·ªë xu ch√≠nh x√°c.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói Kh√¥ng X√°c ƒê·ªãnh",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
            color=discord.Color.red())
        await ctx.send(embed=embed)


@bot.command(name='rutxu')
@check_channel()
async def withdraw_from_vault(ctx, amount: int = None):
    if amount is None:
        embed = discord.Embed(
            title="Thi·∫øu th√¥ng tin",
            description="B·∫°n c·∫ßn nh·∫≠p s·ªë xu mu·ªën r√∫t. V√≠ d·ª•: `.rutxu 50`.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id
    guild_id = ctx.guild.id
    user_name = ctx.author.display_name

    if amount <= 0:
        embed = discord.Embed(title="L·ªói",
                              description="S·ªë l∆∞·ª£ng xu r√∫t ph·∫£i l·ªõn h∆°n 0.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if vault[guild_id][user_id] >= amount:
        vault[guild_id][user_id] -= amount
        currency[user_id] += amount
        embed = discord.Embed(
            title="R√∫t Xu Th√†nh C√¥ng",
            description=
            f"**{user_name}** (`ID: {user_id}`) ƒë√£ r√∫t **{amount} xu** t·ª´ k√©t.\nS·ªë xu hi·ªán t·∫°i trong k√©t l√† **{vault[guild_id][user_id]} xu**.",
            color=discord.Color.green())
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="R√∫t Xu Th·∫•t B·∫°i",
            description=
            f"**{user_name}** (`ID: {user_id}`) kh√¥ng c√≥ ƒë·ªß xu trong k√©t ƒë·ªÉ r√∫t.",
            color=discord.Color.red())
        await ctx.send(embed=embed)


@bot.command(name='rutket')
@commands.has_permissions(
    manage_guild=True
)  # Ch·ªâ cho ph√©p ng∆∞·ªùi c√≥ quy·ªÅn qu·∫£n l√Ω server s·ª≠ d·ª•ng l·ªánh n√†y
async def withdraw_from_vault(ctx, amount: int):
    user_id = ctx.author.id
    username = ctx.author.display_name
    guild_id = ctx.guild.id

    # Ki·ªÉm tra s·ªë l∆∞·ª£ng xu c·∫ßn r√∫t c√≥ h·ª£p l·ªá kh√¥ng
    if amount <= 0:
        embed = discord.Embed(title="L·ªói",
                              description="S·ªë l∆∞·ª£ng xu ph·∫£i l·ªõn h∆°n 0.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ ƒë·ªß xu trong k√©t ƒë·ªÉ r√∫t kh√¥ng
    if vault.get(guild_id, {}).get(user_id, 0) >= amount:
        vault[guild_id][user_id] -= amount
        currency[user_id] += amount
        embed = discord.Embed(
            title="R√∫t Xu Th√†nh C√¥ng",
            description=
            f"{username} (`ID: {user_id}`) ƒë√£ r√∫t **{amount} xu** t·ª´ k√©t.\nS·ªë xu hi·ªán t·∫°i trong k√©t l√† **{vault[guild_id][user_id]} xu**.",
            color=discord.Color.green())
    else:
        embed = discord.Embed(
            title="R√∫t Xu Th·∫•t B·∫°i",
            description=
            f"Kh√¥ng ƒë·ªß xu trong k√©t ƒë·ªÉ r√∫t. S·ªë xu hi·ªán t·∫°i trong k√©t c·ªßa b·∫°n l√† **{vault.get(guild_id, {}).get(user_id, 0)} xu**.",
            color=discord.Color.red())

    await ctx.send(embed=embed)


@bot.command(name='xemket')
@check_channel()
async def check_vault(ctx):
    """Ki·ªÉm tra s·ªë xu trong k√©t c·ªßa ng∆∞·ªùi ch∆°i"""
    user_id = ctx.author.id
    guild_id = ctx.guild.id
    user_vault_balance = vault[guild_id][
        user_id]  # This will return 0 for new users because of defaultdict

    embed = discord.Embed(
        title="üîí K√©t S·∫Øt C√° Nh√¢n",
        description=f"{ctx.author.mention}, th√¥ng tin k√©t s·∫Øt c·ªßa b·∫°n:",
        color=discord.Color.blue())
    embed.add_field(name="S·ªë xu trong k√©t",
                    value=f"**{user_vault_balance} xu**",
                    inline=False)

    # Add instructions on how to use the vault
    if user_vault_balance == 0:
        embed.add_field(
            name="üí° H∆∞·ªõng d·∫´n",
            value=
            "B·∫°n ch∆∞a c√≥ xu trong k√©t. S·ª≠ d·ª•ng `.napket [s·ªë xu]` ƒë·ªÉ n·∫°p xu v√†o k√©t.",
            inline=False)
    else:
        embed.add_field(name="üí° H∆∞·ªõng d·∫´n",
                        value="S·ª≠ d·ª•ng `.rutxu [s·ªë xu]` ƒë·ªÉ r√∫t xu t·ª´ k√©t.",
                        inline=False)

    embed.set_thumbnail(url=ctx.author.display_avatar.url)
    embed.set_footer(text=f"ID: {user_id}")

    await ctx.send(embed=embed)


@bot.command(name='napket')
@check_channel()
async def deposit_to_vault(ctx, amount: int = None):
    """N·∫°p xu v√†o k√©t s·∫Øt c√° nh√¢n"""
    if amount is None:
        embed = discord.Embed(
            title="Thi·∫øu th√¥ng tin",
            description="B·∫°n c·∫ßn nh·∫≠p s·ªë xu mu·ªën n·∫°p. V√≠ d·ª•: `.napket 50`.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id
    guild_id = ctx.guild.id
    user_name = ctx.author.display_name

    # Validate amount
    if amount <= 0:
        embed = discord.Embed(title="L·ªói",
                              description="S·ªë l∆∞·ª£ng xu n·∫°p ph·∫£i l·ªõn h∆°n 0.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Check if user has enough currency
    if currency[user_id] < amount:
        embed = discord.Embed(
            title="Kh√¥ng ƒë·ªß xu",
            description=
            f"B·∫°n kh√¥ng c√≥ ƒë·ªß xu ƒë·ªÉ n·∫°p. S·ªë xu hi·ªán t·∫°i: **{currency[user_id]} xu**",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Process the deposit
    currency[user_id] -= amount
    vault[guild_id][user_id] += amount

    embed = discord.Embed(
        title="‚úÖ N·∫°p K√©t Th√†nh C√¥ng",
        description=f"**{user_name}** ƒë√£ n·∫°p **{amount} xu** v√†o k√©t.",
        color=discord.Color.green())
    embed.add_field(name="S·ªë xu trong k√©t",
                    value=f"**{vault[guild_id][user_id]} xu**",
                    inline=True)
    embed.add_field(name="S·ªë xu c√≤n l·∫°i",
                    value=f"**{currency[user_id]} xu**",
                    inline=True)
    embed.set_thumbnail(url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

    ###L·ªánh nuke channel


@bot.command(name='nuke')
@commands.has_permissions(administrator=True)
async def nuke_channel(ctx):
    """X√≥a t·∫•t c·∫£ tin nh·∫Øn trong k√™nh b·∫±ng c√°ch x√≥a v√† t·∫°o l·∫°i k√™nh ƒë√≥"""
    # T·∫°o embed x√°c nh·∫≠n
    confirm_embed = discord.Embed(
        title="üß® X√°c Nh·∫≠n Nuke K√™nh",
        description=f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ tin nh·∫Øn trong k√™nh #{ctx.channel.name}? K√™nh s·∫Ω b·ªã x√≥a v√† t·∫°o l·∫°i t∆∞∆°ng t·ª±.",
        color=discord.Color.red()
    )
    confirm_embed.add_field(
        name="‚ö†Ô∏è C·∫£nh b√°o",
        value="T·∫•t c·∫£ tin nh·∫Øn trong k√™nh n√†y s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn v√† kh√¥ng th·ªÉ kh√¥i ph·ª•c!",
        inline=False
    )
    confirm_embed.set_footer(text="Nh·∫•n n√∫t x√°c nh·∫≠n trong v√≤ng 30 gi√¢y ƒë·ªÉ ti·∫øp t·ª•c")

    # T·∫°o view v·ªõi c√°c n√∫t
    view = discord.ui.View(timeout=30)
    
    # N√∫t x√°c nh·∫≠n
    confirm_button = discord.ui.Button(label="X√°c nh·∫≠n Nuke", style=discord.ButtonStyle.danger, emoji="üí£")
    
    # N√∫t h·ªßy
    cancel_button = discord.ui.Button(label="H·ªßy", style=discord.ButtonStyle.secondary, emoji="‚ùå")
    
    async def confirm_callback(interaction):
        if interaction.user != ctx.author:
            await interaction.response.send_message("Ch·ªâ ng∆∞·ªùi y√™u c·∫ßu m·ªõi c√≥ th·ªÉ x√°c nh·∫≠n l·ªánh n√†y!", ephemeral=True)
            return
            
        await interaction.response.defer()
        
        # L∆∞u th√¥ng tin k√™nh c≈© ƒë·ªÉ t·∫°o l·∫°i sau khi nuke
        channel = ctx.channel
        channel_name = channel.name
        channel_topic = channel.topic
        channel_nsfw = channel.is_nsfw()
        channel_category = channel.category
        channel_slowmode = channel.slowmode_delay
        channel_position = channel.position
        channel_permissions = channel.overwrites
        
        try:
            # Th√¥ng b√°o ƒëang nuke
            processing_embed = discord.Embed(
                title="üß® ƒêang Nuke K√™nh...",
                description="K√™nh ƒëang ƒë∆∞·ª£c x√≥a v√† t·∫°o l·∫°i. Vui l√≤ng ch·ªù trong gi√¢y l√°t.",
                color=discord.Color.orange()
            )
            await interaction.message.edit(embed=processing_embed, view=None)
            
            # T·∫°o k√™nh m·ªõi v·ªõi c√πng thu·ªôc t√≠nh
            new_channel = await channel.clone(
                name=channel_name,
                reason=f"Nuke b·ªüi {ctx.author.name} ({ctx.author.id})"
            )
            
            # ƒê·∫£m b·∫£o v·ªã tr√≠ m·ªõi gi·ªëng v·ªã tr√≠ c≈©
            await new_channel.edit(position=channel_position)
            
            # X√≥a k√™nh c≈©
            await channel.delete()
            
            # G·ª≠i th√¥ng b√°o th√†nh c√¥ng trong k√™nh m·ªõi
            success_embed = discord.Embed(
                title="üí• Nuke Th√†nh C√¥ng!",
                description=f"K√™nh ƒë√£ ƒë∆∞·ª£c nuke b·ªüi {ctx.author.mention}",
                color=discord.Color.green()
            )
            success_embed.set_image(url="https://media.giphy.com/media/HhTXt43pk1I1W/giphy.gif")
            
            msg = await new_channel.send(embed=success_embed)
            
            # T·ª± ƒë·ªông x√≥a th√¥ng b√°o sau 10 gi√¢y
            await asyncio.sleep(10)
            await msg.delete()
            
        except discord.Forbidden:
            error_embed = discord.Embed(
                title="‚ùå L·ªói Quy·ªÅn H·∫°n",
                description="Bot kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ nuke k√™nh n√†y!",
                color=discord.Color.red()
            )
            await interaction.message.edit(embed=error_embed, view=None)
            
        except Exception as e:
            error_embed = discord.Embed(
                title="‚ùå L·ªói",
                description=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
                color=discord.Color.red()
            )
            await interaction.message.edit(embed=error_embed, view=None)
    
    async def cancel_callback(interaction):
        if interaction.user != ctx.author:
            await interaction.response.send_message("Ch·ªâ ng∆∞·ªùi y√™u c·∫ßu m·ªõi c√≥ th·ªÉ h·ªßy l·ªánh n√†y!", ephemeral=True)
            return
            
        cancel_embed = discord.Embed(
            title="‚úÖ ƒê√£ H·ªßy",
            description="L·ªánh nuke ƒë√£ ƒë∆∞·ª£c h·ªßy.",
            color=discord.Color.green()
        )
        await interaction.message.edit(embed=cancel_embed, view=None)
        
        # T·ª± ƒë·ªông x√≥a tin nh·∫Øn sau 5 gi√¢y
        await asyncio.sleep(5)
        await interaction.message.delete()
    
    # G√°n callback cho c√°c n√∫t
    confirm_button.callback = confirm_callback
    cancel_button.callback = cancel_callback
    
    # Th√™m n√∫t v√†o view
    view.add_item(confirm_button)
    view.add_item(cancel_button)
    
    # G·ª≠i tin nh·∫Øn x√°c nh·∫≠n
    message = await ctx.send(embed=confirm_embed, view=view)
    
    # X√≥a l·ªánh g·ªëc
    try:
        await ctx.message.delete()
    except:
        pass
    
    # Timeout handler
    async def on_timeout():
        timeout_embed = discord.Embed(
            title="‚åõ H·∫øt Th·ªùi Gian",
            description="ƒê√£ h·∫øt th·ªùi gian x√°c nh·∫≠n l·ªánh nuke.",
            color=discord.Color.dark_gray()
        )
        await message.edit(embed=timeout_embed, view=None)
        
        # T·ª± ƒë·ªông x√≥a tin nh·∫Øn sau 5 gi√¢y
        await asyncio.sleep(5)
        await message.delete()
        
    view.on_timeout = on_timeout

@nuke_channel.error
async def nuke_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß quy·ªÅn h·∫°n",
            description="B·∫°n c·∫ßn c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
            color=discord.Color.red()
        )
        error_msg = await ctx.send(embed=embed)
        
        # T·ª± ƒë·ªông x√≥a th√¥ng b√°o l·ªói sau 5 gi√¢y
        await asyncio.sleep(5)
        await error_msg.delete()
        try:
            await ctx.message.delete()
        except:
            pass
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)


@bot.command(name='coquaynga', aliases=['cqn', 'nga'])
@check_channel()
@check_game_enabled('coquaynga')
async def co_quay_nga(ctx, bet: str = None):
    """Tr√≤ ch∆°i C√¥ Quay Nga - Russian Roulette"""
    if bet is None:
        embed = discord.Embed(
            title="üî´ C√¥ Quay Nga - H∆∞·ªõng D·∫´n",
            description="Tr√≤ ch∆°i may r·ªßi v·ªõi kh·∫©u s√∫ng 6 vi√™n ƒë·∫°n, ch·ªâ c√≥ 1 vi√™n n·∫°p ƒë·∫°n.",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°ch ch∆°i",
            value="- Nh·∫≠p s·ªë xu mu·ªën c∆∞·ª£c (v√≠ d·ª•: `.coquaynga 100` ho·∫∑c `.cqn all`)\n- N·∫øu s·ªëng s√≥t (5/6 c∆° h·ªôi), b·∫°n th·∫Øng x1.5 ti·ªÅn c∆∞·ª£c\n- N·∫øu tr√∫ng ƒë·∫°n (1/6 c∆° h·ªôi), b·∫°n m·∫•t ti·ªÅn c∆∞·ª£c v√† b·ªã timeout 5 ph√∫t",
            inline=False)
        embed.add_field(
            name="R·ªßi ro cao - th∆∞·ªüng l·ªõn!",
            value="T·ª∑ l·ªá s·ªëng s√≥t: 83.33% | T·ª∑ l·ªá tr√∫ng ƒë·∫°n: 16.67%",
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if bet_amount <= 0:
        embed = discord.Embed(
            title="üî´ C√¥ Quay Nga",
            description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0 xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[user_id] < bet_amount:
        embed = discord.Embed(
            title="üî´ C√¥ Quay Nga",
            description=f"{ctx.author.mention}, b·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c! B·∫°n hi·ªán c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # T·∫°o hi·ªáu ·ª©ng chu·∫©n b·ªã v√† animation
    loading_embed = discord.Embed(
        title="üî´ C√î QUAY NGA - RUSSIAN ROULETTE üî´",
        description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu** v√†o tr√≤ c√¥ quay nga!",
        color=discord.Color.gold())
    loading_embed.add_field(
        name="üîÑ ƒêang chu·∫©n b·ªã",
        value="Chu·∫©n b·ªã kh·∫©u s√∫ng v√† n·∫°p ƒë·∫°n...",
        inline=False)
    loading_msg = await ctx.send(embed=loading_embed)
    await asyncio.sleep(1)

    # Hi·ªáu ·ª©ng chu·∫©n b·ªã s√∫ng v√† ƒë·∫°n
    prepare_embed = discord.Embed(
        title="üî´ C√î QUAY NGA - RUSSIAN ROULETTE üî´",
        description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**!",
        color=discord.Color.orange())
    prepare_embed.add_field(
        name="üîÑ ƒêang n·∫°p ƒë·∫°n",
        value="```\n"
              "  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
              "  ‚ïë o o o o o o ‚ïë\n"  
              "  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n"
              "    S√∫ng 6 vi√™n\n"
              "```",
        inline=False)
    await loading_msg.edit(embed=prepare_embed)
    await asyncio.sleep(1)

    # Hi·ªáu ·ª©ng n·∫°p 1 vi√™n ƒë·∫°n v√†o
    load_embed = discord.Embed(
        title="üî´ C√î QUAY NGA - RUSSIAN ROULETTE üî´",
        description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**!",
        color=discord.Color.orange())
    load_embed.add_field(
        name="üîÑ ƒê√£ n·∫°p 1 vi√™n ƒë·∫°n",
        value="```\n"
              "  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
              "  ‚ïë o o o o o ‚óè ‚ïë\n"
              "  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n"
              "   ƒê·∫°n ƒë√£ ƒë∆∞·ª£c n·∫°p\n"
              "```",
        inline=False)
    await loading_msg.edit(embed=load_embed)
    await asyncio.sleep(1)

    # Hi·ªáu ·ª©ng xoay s√∫ng
    spin_embed = discord.Embed(
        title="üî´ C√î QUAY NGA - RUSSIAN ROULETTE üî´",
        description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**!",
        color=discord.Color.orange())
    spin_embed.add_field(
        name="üîÑ ƒêang xoay s√∫ng",
        value="```\n"
              "      O\n"
              "     /|\\\n"
              "  üî´ / \\\n"
              "  S√∫ng ƒëang xoay...\n"
              "```",
        inline=False)
    await loading_msg.edit(embed=spin_embed)
    await asyncio.sleep(1.5)

    # Xoay th√™m l·∫ßn n·ªØa
    spin_embed2 = discord.Embed(
        title="üî´ C√î QUAY NGA - RUSSIAN ROULETTE üî´",
        description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**!",
        color=discord.Color.orange())
    spin_embed2.add_field(
        name="üîÑ S√∫ng ƒë√£ xoay xong",
        value="```\n"
              "      O\n"
              "     /|\\\n"
              "  üî´ / \\\n"
              "  Chu·∫©n b·ªã b√≥p c√≤...\n"
              "```",
        inline=False)
    await loading_msg.edit(embed=spin_embed2)
    await asyncio.sleep(1)

    # Hi·ªáu ·ª©ng ƒë·∫øm ng∆∞·ª£c t·∫°o k·ªãch t√≠nh
    for countdown in range(3, 0, -1):
        countdown_embed = discord.Embed(
            title="üî´ C√î QUAY NGA - RUSSIAN ROULETTE üî´",
            description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**!",
            color=discord.Color.red())
        countdown_embed.add_field(
            name=f"‚è±Ô∏è B√≥p c√≤ trong {countdown}...",
            value="```\n"
                  "      O   üí¶\n"
                  "     /|\\   \n"
                  "  üî´ / \\  \n"
                  "  ƒêang ƒë·ª£i k·∫øt qu·∫£...\n"
                  "```",
            inline=False)
        await loading_msg.edit(embed=countdown_embed)
        await asyncio.sleep(0.8)

    # Quy·∫øt ƒë·ªãnh k·∫øt qu·∫£ (1/6 c∆° h·ªôi tr√∫ng ƒë·∫°n)
    if is_whitelisted(ctx.author.id):
        # Ng∆∞·ªùi ch∆°i trong whitelist lu√¥n s·ªëng s√≥t
        hit = False
    else:
        # T·ª∑ l·ªá b√¨nh th∆∞·ªùng: 1/6 tr√∫ng ƒë·∫°n (16.67%)
        hit = random.random() < 0.1667

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    if hit:
        # Ng∆∞·ªùi ch∆°i tr√∫ng ƒë·∫°n - thua
        result_embed = discord.Embed(
            title="üí• B·∫†N TR√öNG ƒê·∫†N! üí•",
            description=f"{ctx.author.mention} ƒë√£ tr√∫ng ƒë·∫°n v√† thua **{bet_amount} xu**!",
            color=discord.Color.red())
        
        # Animation ng∆∞·ªùi thua
        death_animation = "```\n" + \
                         "      O   üí•\n" + \
                         "     /|\\  \n" + \
                         "  üî´ / \\  \n" + \
                         "  BANG! B·∫°n ƒë√£ thua.\n" + \
                         "```"
        result_embed.add_field(
            name="‚ò†Ô∏è K·∫æT QU·∫¢",
            value=death_animation,
            inline=False)
        
        result_embed.add_field(
            name="üí∏ Thi·ªát h·∫°i",
            value=f"‚àí{bet_amount} xu",
            inline=True)
        
        result_embed.add_field(
            name="‚è≥ H√¨nh ph·∫°t",
            value="Timeout 5 ph√∫t",
            inline=True)
        
        result_embed.add_field(
            name="üí∞ S·ªë d∆∞ hi·ªán t·∫°i",
            value=f"{currency[user_id] - bet_amount} xu",
            inline=True)
        
        # Tr·ª´ ti·ªÅn ng∆∞·ªùi ch∆°i
        currency[user_id] -= bet_amount
        
        # G·∫Øn timeout cho ng∆∞·ªùi thua
        try:
            timeout_until = discord.utils.utcnow() + timedelta(minutes=5)
            await ctx.author.timeout(timeout_until, reason="Thua tr√≤ C√¥ Quay Nga")
            result_embed.set_footer(text="B·∫°n ƒë√£ b·ªã timeout 5 ph√∫t do tr√∫ng ƒë·∫°n!")
        except Exception as e:
            result_embed.set_footer(text=f"Kh√¥ng th·ªÉ timeout: {str(e)}")
        
    else:
        # Ng∆∞·ªùi ch∆°i s·ªëng s√≥t - th·∫Øng
        winnings = int(bet_amount * 1.5)  # Th·∫Øng x1.5 ti·ªÅn c∆∞·ª£c
        result_embed = discord.Embed(
            title="üéâ B·∫†N S·ªêNG S√ìT! üéâ",
            description=f"{ctx.author.mention} ƒë√£ s·ªëng s√≥t v√† th·∫Øng **{winnings - bet_amount} xu**!",
            color=discord.Color.green())
        
        # Animation ng∆∞·ªùi th·∫Øng
        win_animation = "```\n" + \
                       "      O   üòÖ\n" + \
                       "     /|\\  \n" + \
                       "  üî´ / \\  \n" + \
                       "  *CLICK* An to√†n!\n" + \
                       "```"
        result_embed.add_field(
            name="üéØ K·∫æT QU·∫¢",
            value=win_animation,
            inline=False)
        
        result_embed.add_field(
            name="üí∞ Ti·ªÅn th·∫Øng",
            value=f"+{winnings - bet_amount} xu (x1.5)",
            inline=True)
        
        result_embed.add_field(
            name="üçÄ May m·∫Øn",
            value="B·∫°n ƒë√£ tho√°t ch·∫øt!",
            inline=True)
        
        # C·ªông ti·ªÅn th·∫Øng cho ng∆∞·ªùi ch∆°i
        currency[user_id] += winnings - bet_amount
        
        result_embed.add_field(
            name="üí∞ S·ªë d∆∞ hi·ªán t·∫°i",
            value=f"{currency[user_id]} xu",
            inline=True)
        
        result_embed.set_footer(text="Th·ª≠ th√°ch ti·∫øp t·ª•c may m·∫Øn c·ªßa b·∫°n v·ªõi m·ªôt l·∫ßn ch∆°i n·ªØa?")
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    await loading_msg.edit(embed=result_embed)


@bot.command(name='howstupid', aliases=['howdumb', 'dumb', 'ngu'])
async def howstupid(ctx, member: discord.Member = None):
    """Ki·ªÉm tra ƒë·ªô ngu c·ªßa m·ªôt th√†nh vi√™n v·ªõi k·∫øt qu·∫£ ng·∫´u nhi√™n"""
    # Ki·ªÉm tra cooldown ƒë·ªÉ tr√°nh spam
    user_id = ctx.author.id
    current_time = datetime.now()
    
    # Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ m·ªôt dict t∆∞∆°ng t·ª± howgay_cooldown
    if user_id in howgay_cooldown:
        time_since_last_use = (current_time - howgay_cooldown[user_id]).total_seconds()
        if time_since_last_use < 30:  # 30 gi√¢y cooldown
            remaining = int(30 - time_since_last_use)
            await ctx.send(f"‚è≥ Vui l√≤ng ƒë·ª£i {remaining} gi√¢y n·ªØa tr∆∞·ªõc khi d√πng l·∫°i l·ªánh n√†y.")
            return
    
    # C·∫≠p nh·∫≠t th·ªùi gian s·ª≠ d·ª•ng
    howgay_cooldown[user_id] = current_time
    
    # X√°c ƒë·ªãnh ng∆∞·ªùi ƒë∆∞·ª£c ki·ªÉm tra
    target = member or ctx.author
    
    # T√¨m role Ngu trong server, t·∫°o n·∫øu kh√¥ng c√≥
    stupid_role = discord.utils.get(ctx.guild.roles, name="üß† Ngu")
    if not stupid_role:
        try:
            stupid_role = await ctx.guild.create_role(
                name="üß† Ngu",
                color=discord.Color.orange(),
                reason="T·∫°o role cho l·ªánh howstupid"
            )
        except:
            stupid_role = None
    
    # X√°c ƒë·ªãnh k·∫øt qu·∫£ stupid meter
    # N·∫øu ng∆∞·ªùi d√πng l√† admin, lu√¥n hi·ªÉn th·ªã 0% (kh√¥ng ngu)
    if target.guild_permissions.administrator:
        stupid_level = 0
    elif target.bot:
        stupid_level = 0  # Bot kh√¥ng ngu
    else:
        stupid_level = random.randint(0, 100)
    
    # T·∫°o bi·ªÉu t∆∞·ª£ng v√† m√†u s·∫Øc d·ª±a v√†o k·∫øt qu·∫£
    if stupid_level < 20:
        emoji = "üß†"
        color = discord.Color.green()
        message = "Th√¥ng minh s√°ng su·ªët! Ng∆∞·ªùi n√†y ch·∫Øc h·ªçc Harvard!"
    elif stupid_level < 40:
        emoji = "üìö"
        color = discord.Color.blue()
        message = "Kh√° th√¥ng minh, bi·∫øt suy nghƒ© tr∆∞·ªõc khi h√†nh ƒë·ªông!"
    elif stupid_level < 60:
        emoji = "üòï"
        color = discord.Color.gold()
        message = "Trung b√¨nh... ƒë√¥i khi c≈©ng c√≥ quy·∫øt ƒë·ªãnh thi·∫øu suy nghƒ©!"
    elif stupid_level < 80:
        emoji = "ü§¶‚Äç‚ôÇÔ∏è"
        color = discord.Color.orange()
        message = "Kh√° ngu r·ªìi ƒë√≥! To√†n l√†m nh·ªØng vi·ªác kh√¥ng ai hi·ªÉu n·ªïi!"
    else:
        emoji = "ü™®"
        color = discord.Color.red()
        message = "SI√äU NGU! IQ c√≥ l·∫Ω b·∫±ng h√≤n ƒë√°!"
    
    # T·∫°o progress bar
    progress_bar = "üü•" * (stupid_level // 10) + "‚¨ú" * ((100 - stupid_level) // 10)
    
    # T·∫°o embed
    embed = discord.Embed(
        title=f"{emoji} M√°y ƒëo ƒë·ªô ngu",
        description=f"ƒê·ªô ngu c·ªßa {target.mention}",
        color=color
    )
    embed.add_field(
        name="K·∫øt qu·∫£", 
        value=f"**{stupid_level}%** {emoji}", 
        inline=False
    )
    embed.add_field(
        name="M·ª©c ƒë·ªô", 
        value=progress_bar, 
        inline=False
    )
    embed.add_field(
        name="Nh·∫≠n x√©t", 
        value=message, 
        inline=False
    )
    embed.set_thumbnail(url=target.display_avatar.url)
    
    # G·ª≠i k·∫øt qu·∫£
    await ctx.send(embed=embed)
    
    # N·∫øu stupid_level > 50%, th√™m role Ngu trong 1 gi·ªù
    if stupid_level > 50 and stupid_role and not target.bot and target.id != ctx.guild.owner_id:
        try:
            await target.add_roles(stupid_role)
            
            # Th√¥ng b√°o v·ªÅ vi·ªác th√™m role
            dm_embed = discord.Embed(
                title="üß† B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c role Ngu!",
                description="B·∫°n qu√° ngu n√™n ƒë√£ ƒë∆∞·ª£c th√™m role Ngu trong 1 gi·ªù.",
                color=discord.Color.orange()
            )
            dm_embed.add_field(
                name="K·∫øt qu·∫£", 
                value=f"ƒê·ªô ngu: **{stupid_level}%**", 
                inline=True
            )
            dm_embed.add_field(
                name="Th·ªùi h·∫°n", 
                value="Role s·∫Ω t·ª± ƒë·ªông b·ªã g·ª° sau 1 gi·ªù", 
                inline=True
            )
            
            try:
                await target.send(embed=dm_embed)
            except:
                pass  # B·ªè qua n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM
                
            # G·ª° role sau 1 gi·ªù
            bot.loop.create_task(remove_stupid_role_after_duration(target.id, ctx.guild.id, stupid_role.id))
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ th√™m role Ngu: {str(e)}")

@bot.command(name='howfat')
async def howfat(ctx, member: discord.Member = None):
    """Ki·ªÉm tra ƒë·ªô b√©o (c√¢n n·∫∑ng) c·ªßa m·ªôt th√†nh vi√™n v·ªõi k·∫øt qu·∫£ ng·∫´u nhi√™n"""
    # Ki·ªÉm tra cooldown ƒë·ªÉ tr√°nh spam
    user_id = ctx.author.id
    current_time = datetime.now()
    
    # S·ª≠ d·ª•ng c√πng dict howgay_cooldown
    if user_id in howgay_cooldown:
        time_since_last_use = (current_time - howgay_cooldown[user_id]).total_seconds()
        if time_since_last_use < 30:  # 30 gi√¢y cooldown
            remaining = int(30 - time_since_last_use)
            await ctx.send(f"‚è≥ Vui l√≤ng ƒë·ª£i {remaining} gi√¢y n·ªØa tr∆∞·ªõc khi d√πng l·∫°i l·ªánh n√†y.")
            return
    
    # C·∫≠p nh·∫≠t th·ªùi gian s·ª≠ d·ª•ng
    howgay_cooldown[user_id] = current_time
    
    # X√°c ƒë·ªãnh ng∆∞·ªùi ƒë∆∞·ª£c ki·ªÉm tra
    target = member or ctx.author
    
    # T√¨m role B√©o trong server, t·∫°o n·∫øu kh√¥ng c√≥
    fat_role = discord.utils.get(ctx.guild.roles, name="üçî B√©o")
    if not fat_role:
        try:
            fat_role = await ctx.guild.create_role(
                name="üçî B√©o",
                color=discord.Color.dark_orange(),
                reason="T·∫°o role cho l·ªánh howfat"
            )
        except:
            fat_role = None
    
    # X√°c ƒë·ªãnh c√¢n n·∫∑ng
    # N·∫øu ng∆∞·ªùi d√πng l√† admin, c√¢n n·∫∑ng t·ª´ 60-75kg
    if target.guild_permissions.administrator:
        weight = random.randint(60, 75)
    elif target.bot:
        weight = 0  # Bot kh√¥ng c√≥ c√¢n n·∫∑ng
    else:
        weight = random.randint(30, 200)  # 30kg - 200kg
    
    # T·∫°o bi·ªÉu t∆∞·ª£ng d·ª±a v√†o c√¢n n·∫∑ng
    if (weight < 50):
        emoji = "üêú"
        color = discord.Color.blue()
        message = "Nh·∫π nh∆∞ l√¥ng h·ªìng! Bay m·∫•t b·∫°n ∆°i!"
    elif (weight < 80):
        emoji = "üëå"
        color = discord.Color.green()
        message = "C√¢n ƒë·ªëi tuy·ªát v·ªùi!"
    elif (weight < 120):
        emoji = "üçî"
        color = discord.Color.gold()
        message = "H∆°i n·∫∑ng m·ªôt ch√∫t r·ªìi ƒë·∫•y!"
    else:
        emoji = "üêò"
        color = discord.Color.red()
        message = "Th√¥i n√†o, b·∫°n c·∫ßn m·ªôt ch·∫ø ƒë·ªô ƒÉn ki√™ng g·∫•p!"
    
    # T·∫°o embed
    embed = discord.Embed(
        title=f"‚öñÔ∏è M√°y ƒëo c√¢n n·∫∑ng",
        description=f"C√¢n n·∫∑ng c·ªßa {target.mention}",
        color=color
    )
    embed.add_field(
        name="K·∫øt qu·∫£", 
        value=f"**{weight} kg** {emoji}", 
        inline=False
    )
    embed.add_field(
        name="Nh·∫≠n x√©t", 
        value=message, 
        inline=False
    )
    embed.set_thumbnail(url=target.display_avatar.url)
    
    # G·ª≠i k·∫øt qu·∫£
    await ctx.send(embed=embed)
    
    # N·∫øu weight > 100kg, th√™m role B√©o trong 1 gi·ªù
    if weight > 100 and fat_role and not target.bot and target.id != ctx.guild.owner_id:
        try:
            await target.add_roles(fat_role)
            
            # Th√¥ng b√°o v·ªÅ vi·ªác th√™m role
            dm_embed = discord.Embed(
                title="üçî B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c role B√©o!",
                description="B·∫°n qu√° b√©o n√™n ƒë√£ ƒë∆∞·ª£c th√™m role B√©o trong 1 gi·ªù.",
                color=discord.Color.dark_orange()
            )
            dm_embed.add_field(
                name="K·∫øt qu·∫£", 
                value=f"C√¢n n·∫∑ng: **{weight} kg**", 
                inline=True
            )
            dm_embed.add_field(
                name="Th·ªùi h·∫°n", 
                value="Role s·∫Ω t·ª± ƒë·ªông b·ªã g·ª° sau 1 gi·ªù", 
                inline=True
            )
            
            try:
                await target.send(embed=dm_embed)
            except:
                pass  # B·ªè qua n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM
                
            # G·ª° role sau 1 gi·ªù
            bot.loop.create_task(remove_fat_role_after_duration(target.id, ctx.guild.id, fat_role.id))
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ th√™m role B√©o: {str(e)}")

# H√†m ph·ª• tr·ª£ ƒë·ªÉ g·ª° role B√©o sau 1 gi·ªù
async def remove_fat_role_after_duration(user_id, guild_id, role_id):
    """G·ª° role B√©o sau 1 gi·ªù"""
    await asyncio.sleep(3600)  # 1 gi·ªù = 3600 gi√¢y
    
    # T√¨m guild
    guild = bot.get_guild(guild_id)
    if not guild:
        return
        
    # T√¨m member
    member = guild.get_member(user_id)
    if not member:
        return
        
    # T√¨m role
    role = guild.get_role(role_id)
    if not role or role not in member.roles:
        return
        
    # G·ª° role
    try:
        await member.remove_roles(role)
        
        # Th√¥ng b√°o qua DM
        try:
            dm_embed = discord.Embed(
                title="üçî Role B√©o ƒë√£ h·∫øt h·∫°n",
                description="Role B√©o t·∫°m th·ªùi c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª° b·ªè sau 1 gi·ªù.",
                color=discord.Color.blue()
            )
            await member.send(embed=dm_embed)
        except:
            pass  # B·ªè qua n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM
    except:
        pass  # B·ªè qua n·∫øu kh√¥ng g·ª° ƒë∆∞·ª£c role

@bot.command(name='howretarded', aliases=['howthieunang', 'thieunang', 'tn'])
async def howretarded(ctx, member: discord.Member = None):
    """Ki·ªÉm tra ƒë·ªô thi·ªÉu nƒÉng c·ªßa m·ªôt th√†nh vi√™n v·ªõi k·∫øt qu·∫£ ng·∫´u nhi√™n"""
    target = member or ctx.author
    retarded_level = random.randint(0, 100)

    # T·∫°o bi·ªÉu t∆∞·ª£ng d·ª±a v√†o ƒë·ªô thi·ªÉu nƒÉng
    if retarded_level < 20:
        emoji = "üß†"
        color = discord.Color.green()
        message = "Ho√†n to√†n b√¨nh th∆∞·ªùng, ch·ª©c nƒÉng n√£o b·ªô tuy·ªát v·ªùi!"
    elif retarded_level < 40:
        emoji = "ü§î"
        color = discord.Color.blue()
        message = "ƒê√¥i khi h∆°i ƒë∆° ƒë∆° m·ªôt t√≠, nh∆∞ng v·∫´n ·ªïn!"
    elif retarded_level < 60:
        emoji = "üòµ‚Äçüí´"
        color = discord.Color.gold()
        message = "C√≥ d·∫•u hi·ªáu thi·ªÉu nƒÉng nh·∫π, hay qu√™n v√† kh√¥ng hi·ªÉu chuy·ªán!"
    elif retarded_level < 80:
        emoji = "ü•¥"
        color = discord.Color.orange()
        message = "Thi·ªÉu nƒÉng kh√° n·∫∑ng! Kh√≥ giao ti·∫øp b√¨nh th∆∞·ªùng!"
    else:
        emoji = "ü§™"
        color = discord.Color.red()
        message = "THI·ªÇU NƒÇNG TR·∫¶M TR·ªåNG! C·∫ßn ng∆∞·ªùi chƒÉm s√≥c 24/7!"

    # T·∫°o progress bar
    progress_bar = "üü•" * (retarded_level // 10) + "‚¨ú" * ((100 - retarded_level) // 10)

    # T·∫°o hi·ªáu ·ª©ng ph·ª• cho k·∫øt qu·∫£ cao
    additional_effect = ""
    if retarded_level > 85:
        additional_effect = "```\n" + \
                            "  /üß†\   N√£o ƒëang r∆°i ra ngo√†i...\n" + \
                            " ( üëÅÔ∏è üëÅÔ∏è )  \n" + \
                            "  \  ·¥ó  /   \n" + \
                            "```"

    embed = discord.Embed(title=f"{emoji} M√°y ƒëo ƒë·ªô thi·ªÉu nƒÉng",
                          description=f"ƒê·ªô thi·ªÉu nƒÉng c·ªßa {target.mention}",
                          color=color)
    embed.add_field(name="K·∫øt qu·∫£",
                    value=f"**{retarded_level}%** {emoji}",
                    inline=False)
    embed.add_field(name="M·ª©c ƒë·ªô", value=progress_bar, inline=False)
    
    if additional_effect:
        embed.add_field(name="Hi·ªán t∆∞·ª£ng", value=additional_effect, inline=False)
        
    embed.add_field(name="Nh·∫≠n x√©t", value=message, inline=False)
    embed.set_thumbnail(url=target.display_avatar.url)

    await ctx.send(embed=embed)


@bot.command(name='whoping', aliases=['checkping', 'pingcheck'])
async def who_is_pinging(ctx, user: discord.Member = None):
    """Ki·ªÉm tra nh·ªØng ai ƒë√£ ping ng∆∞·ªùi d√πng g·∫ßn ƒë√¢y"""
    # N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh ng∆∞·ªùi d√πng, m·∫∑c ƒë·ªãnh l√† ng∆∞·ªùi g·ªçi l·ªánh
    target = user or ctx.author
    
    # Ch·ªâ cho ph√©p ki·ªÉm tra ping c·ªßa b·∫£n th√¢n ho·∫∑c admin m·ªõi c√≥ th·ªÉ ki·ªÉm tra ping ng∆∞·ªùi kh√°c
    if target.id != ctx.author.id and not ctx.author.guild_permissions.administrator:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß quy·ªÅn h·∫°n",
            description="B·∫°n ch·ªâ c√≥ th·ªÉ ki·ªÉm tra ping c·ªßa ch√≠nh m√¨nh.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # T·∫°o embed ban ƒë·∫ßu
    embed = discord.Embed(
        title=f"üîé Ki·ªÉm Tra Ping cho {target.display_name}",
        description="ƒêang qu√©t tin nh·∫Øn ƒë·ªÉ t√¨m ping...",
        color=discord.Color.blue()
    )
    status_message = await ctx.send(embed=embed)
    
    # Chu·∫©n b·ªã ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu ping
    ping_data = {}
    total_pings = 0
    channels_checked = 0
    
    # H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i ti·∫øn tr√¨nh
    async def update_progress(channel_name=None):
        progress_embed = discord.Embed(
            title=f"üîé Ki·ªÉm Tra Ping cho {target.display_name}",
            description=f"ƒêang qu√©t tin nh·∫Øn...\nƒê√£ t√¨m th·∫•y: {total_pings} ping\nƒê√£ ki·ªÉm tra: {channels_checked} k√™nh",
            color=discord.Color.blue()
        )
        if channel_name:
            progress_embed.add_field(
                name="K√™nh hi·ªán t·∫°i", 
                value=f"#{channel_name}", 
                inline=False
            )
        await status_message.edit(embed=progress_embed)
    
    # B·∫Øt ƒë·∫ßu t√¨m ki·∫øm trong c√°c k√™nh
    try:
        for channel in ctx.guild.text_channels:
            # B·ªè qua c√°c k√™nh kh√¥ng c√≥ quy·ªÅn ƒë·ªçc tin nh·∫Øn
            if not channel.permissions_for(ctx.guild.me).read_message_history:
                continue
                
            channels_checked += 1
            await update_progress(channel.name)
            
            # T√¨m ki·∫øm tin nh·∫Øn trong 7 ng√†y g·∫ßn ƒë√¢y (gi·ªõi h·∫°n 300 tin nh·∫Øn m·ªói k√™nh)
            try:
                async for message in channel.history(limit=300, after=discord.utils.utcnow() - timedelta(days=7)):
                    # B·ªè qua tin nh·∫Øn t·ª´ bot
                    if message.author.bot:
                        continue
                        
                    # Ki·ªÉm tra c√°c mention trong tin nh·∫Øn
                    if target in message.mentions:
                        total_pings += 1
                        pinger = message.author
                        
                        # C·∫≠p nh·∫≠t d·ªØ li·ªáu ping
                        if pinger.id not in ping_data:
                            ping_data[pinger.id] = {
                                "name": pinger.display_name,
                                "count": 0,
                                "channels": {},
                                "last_ping": None
                            }
                            
                        ping_data[pinger.id]["count"] += 1
                        
                        # C·∫≠p nh·∫≠t k√™nh
                        if channel.id not in ping_data[pinger.id]["channels"]:
                            ping_data[pinger.id]["channels"][channel.id] = 0
                        ping_data[pinger.id]["channels"][channel.id] += 1
                        
                        # C·∫≠p nh·∫≠t th·ªùi gian ping g·∫ßn ƒë√¢y nh·∫•t
                        if (ping_data[pinger.id]["last_ping"] is None or 
                            message.created_at > ping_data[pinger.id]["last_ping"]):
                            ping_data[pinger.id]["last_ping"] = message.created_at
            
            except discord.Forbidden:
                pass  # B·ªè qua k√™nh n·∫øu kh√¥ng c√≥ quy·ªÅn ƒë·ªçc tin nh·∫Øn
            except Exception as e:
                continue  # B·ªè qua l·ªói kh√°c v√† ti·∫øp t·ª•c
    
    except Exception as e:
        # X·ª≠ l√Ω l·ªói t·ªïng qu√°t
        error_embed = discord.Embed(
            title="‚ùå ƒê√£ x·∫£y ra l·ªói",
            description=f"Kh√¥ng th·ªÉ ho√†n th√†nh vi·ªác ki·ªÉm tra: {str(e)}",
            color=discord.Color.red()
        )
        await status_message.edit(embed=error_embed)
        return
    
    # T·∫°o b√°o c√°o cu·ªëi c√πng
    if not ping_data:
        result_embed = discord.Embed(
            title=f"üîî K·∫øt Qu·∫£ Ki·ªÉm Tra Ping cho {target.display_name}",
            description=f"Kh√¥ng t√¨m th·∫•y ping n√†o cho {target.mention} trong 7 ng√†y qua.",
            color=discord.Color.green()
        )
        result_embed.set_thumbnail(url=target.display_avatar.url)
        await status_message.edit(embed=result_embed)
        return
    
    # S·∫Øp x·∫øp ng∆∞·ªùi ping theo s·ªë l∆∞·ª£ng ping
    sorted_pingers = sorted(ping_data.items(), key=lambda x: x[1]["count"], reverse=True)
    
    # T·∫°o embed k·∫øt qu·∫£
    result_embed = discord.Embed(
        title=f"üîî K·∫øt Qu·∫£ Ki·ªÉm Tra Ping cho {target.display_name}",
        description=f"**{total_pings}** ping ƒë∆∞·ª£c t√¨m th·∫•y t·ª´ **{len(ping_data)}** ng∆∞·ªùi d√πng kh√°c nhau trong 7 ng√†y qua.",
        color=discord.Color.gold()
    )
    
    result_embed.set_thumbnail(url=target.display_avatar.url)
    
    # Th√™m th√¥ng tin top ng∆∞·ªùi ping
    top_pingers = sorted_pingers[:10]  # Ch·ªâ hi·ªÉn th·ªã top 10
    pingers_info = ""
    
    for idx, (pinger_id, data) in enumerate(top_pingers, 1):
        try:
            pinger = await ctx.guild.fetch_member(pinger_id)
            pinger_name = pinger.display_name if pinger else data["name"]
            
            # X√°c ƒë·ªãnh emoji h·∫°ng
            rank_emoji = "ü•á" if idx == 1 else "ü•à" if idx == 2 else "ü•â" if idx == 3 else f"{idx}."
            
            # T·∫°o danh s√°ch k√™nh ph·ªï bi·∫øn
            top_channels = sorted(data["channels"].items(), key=lambda x: x[1], reverse=True)[:2]
            channels_text = ", ".join([f"#{ctx.guild.get_channel(channel_id).name}" for channel_id, _ in top_channels if ctx.guild.get_channel(channel_id)])
            
            # ƒê·ªãnh d·∫°ng th·ªùi gian ping g·∫ßn nh·∫•t
            last_ping_time = discord.utils.format_dt(data["last_ping"], style="R") if data["last_ping"] else "Kh√¥ng r√µ"
            
            # Th√™m v√†o danh s√°ch
            pingers_info += f"{rank_emoji} **{pinger_name}**: {data['count']} ping"
            pingers_info += f" (g·∫ßn nh·∫•t: {last_ping_time})\n"
            
            # Th√™m th√¥ng tin k√™nh n·∫øu c√≥
            if channels_text:
                pingers_info += f"  ‚Ü≥ Ch·ªß y·∫øu t·∫°i: {channels_text}\n"
                
        except Exception as e:
            pingers_info += f"{idx}. Kh√¥ng th·ªÉ hi·ªÉn th·ªã th√¥ng tin: {str(e)}\n"
    
    result_embed.add_field(
        name="üë§ Ng∆∞·ªùi Ping Nhi·ªÅu Nh·∫•t",
        value=pingers_info or "Kh√¥ng c√≥ d·ªØ li·ªáu",
        inline=False
    )
    
    # Th√™m th·ªëng k√™ th·ªùi gian
    time_stats = {}
    for pinger_id, data in ping_data.items():
        if data["last_ping"]:
            hour = data["last_ping"].hour
            if hour not in time_stats:
                time_stats[hour] = 0
            time_stats[hour] += data["count"]
    
    # X√°c ƒë·ªãnh khung gi·ªù ph·ªï bi·∫øn
    if time_stats:
        popular_hours = sorted(time_stats.items(), key=lambda x: x[1], reverse=True)[:3]
        time_info = "\n".join([f"üïí **{hour}:00 - {hour+1}:00**: {count} ping" for hour, count in popular_hours])
        
        result_embed.add_field(
            name="‚è∞ Khung Gi·ªù Ph·ªï Bi·∫øn",
            value=time_info,
            inline=False
        )
    
    # Th√™m footer
    result_embed.set_footer(text=f"ƒê√£ ki·ªÉm tra {channels_checked} k√™nh | ID: {target.id}")
    
    # G·ª≠i k·∫øt qu·∫£ cu·ªëi c√πng
    await status_message.edit(embed=result_embed)

@who_is_pinging.error
async def ping_check_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        embed = discord.Embed(
            title="‚ùå Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá",
            description="Kh√¥ng th·ªÉ t√¨m th·∫•y ng∆∞·ªùi d√πng n√†y.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå ƒê√£ x·∫£y ra l·ªói",
            description=f"L·ªói khi ki·ªÉm tra ping: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='ktxu')
@commands.has_permissions(administrator=True)
async def check_user_balance(ctx, member: discord.Member = None):
    """Cho ph√©p admin ki·ªÉm tra s·ªë xu c·ªßa m·ªôt th√†nh vi√™n"""
    if member is None:
        embed = discord.Embed(
            title="‚ùì Ki·ªÉm Tra Xu",
            description=
            "Vui l√≤ng ch·ªâ ƒë·ªãnh m·ªôt th√†nh vi√™n ƒë·ªÉ ki·ªÉm tra. V√≠ d·ª•: `.ktxu @t√™nth√†nhvi√™n`",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
        return

    user_balance = currency.get(member.id, 0)
    embed = discord.Embed(
        title="üí∞ Ki·ªÉm Tra Xu",
        description=
        f"Th√†nh vi√™n {member.mention} hi·ªán c√≥ **{user_balance} xu**.",
        color=discord.Color.gold())
    embed.set_thumbnail(url=member.display_avatar.url)
    embed.set_footer(text=f"ID: {member.id}")
    await ctx.send(embed=embed)


@check_user_balance.error
async def check_user_balance_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description=
            "B·∫°n kh√¥ng c√≥ quy·ªÅn administrator ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y!",
            color=discord.Color.red())
        await ctx.send(embed=embed)

@bot.command(name='howgay')
async def howgay(ctx, member: discord.Member = None):
    """Ki·ªÉm tra ƒë·ªô gay c·ªßa m·ªôt th√†nh vi√™n v·ªõi k·∫øt qu·∫£ ng·∫´u nhi√™n"""
    # Ki·ªÉm tra cooldown ƒë·ªÉ tr√°nh spam
    user_id = ctx.author.id
    current_time = datetime.now()
    
    if user_id in howgay_cooldown:
        time_since_last_use = (current_time - howgay_cooldown[user_id]).total_seconds()
        if time_since_last_use < 30:  # 30 gi√¢y cooldown
            remaining = int(30 - time_since_last_use)
            await ctx.send(f"‚è≥ Vui l√≤ng ƒë·ª£i {remaining} gi√¢y n·ªØa tr∆∞·ªõc khi d√πng l·∫°i l·ªánh n√†y.")
            return
    
    # C·∫≠p nh·∫≠t th·ªùi gian s·ª≠ d·ª•ng
    howgay_cooldown[user_id] = current_time
    
    # X√°c ƒë·ªãnh ng∆∞·ªùi ƒë∆∞·ª£c ki·ªÉm tra
    target = member or ctx.author
    
    # T√¨m gay role trong server, t·∫°o n·∫øu kh√¥ng c√≥
    gay_role = discord.utils.get(ctx.guild.roles, name="üåà Gay")
    if not gay_role:
        try:
            gay_role = await ctx.guild.create_role(name="üåà Gay", colour=discord.Colour.from_rgb(255, 0, 255))
        except:
            gay_role = None
    
    # X√°c ƒë·ªãnh k·∫øt qu·∫£ gay meter
    # N·∫øu ng∆∞·ªùi d√πng l√† admin ho·∫∑c bot, lu√¥n hi·ªÉn th·ªã 0%
    if target.guild_permissions.administrator or target.bot:
        gay_level = 0
    else:
        gay_level = random.randint(0, 100)
    
    # T·∫°o emoji v√† m√†u s·∫Øc d·ª±a tr√™n k·∫øt qu·∫£
    if gay_level < 20:
        emoji = "üòé"
        color = discord.Color.blue()
        message = "Kh√° l√† th·∫≥ng ƒë·∫•y!"
    elif gay_level < 40:
        emoji = "üôÇ"
        color = discord.Color.green()
        message = "H∆°i cong m·ªôt ch√∫t!"
    elif gay_level < 60:
        emoji = "üòä"
        color = discord.Color.gold()
        message = "Gay v·ª´a ph·∫£i!"
    elif gay_level < 80:
        emoji = "üò≥"
        color = discord.Color.orange()
        message = "Kh√° l√† gay ƒë√≥!"
    else:
        emoji = "üåà"
        color = discord.Color.purple()
        message = "Qu√° gay lu√¥n r·ªìi!"
    
    # T·∫°o progress bar
    progress_bar = "üü™" * (gay_level // 10) + "‚¨ú" * ((100 - gay_level) // 10)
    
    # T·∫°o embed
    embed = discord.Embed(
        title=f"{emoji} M√°y ƒëo ƒë·ªô Gay",
        description=f"ƒê·ªô gay c·ªßa {target.mention}",
        color=color
    )
    embed.add_field(
        name="K·∫øt qu·∫£", 
        value=f"**{gay_level}%** {emoji}", 
        inline=False
    )
    embed.add_field(
        name="M·ª©c ƒë·ªô", 
        value=progress_bar, 
        inline=False
    )
    embed.add_field(
        name="Nh·∫≠n x√©t", 
        value=message, 
        inline=False
    )
    embed.set_thumbnail(url=target.display_avatar.url)
    
    # G·ª≠i k·∫øt qu·∫£
    await ctx.send(embed=embed)
    
    # N·∫øu gay_level > 50%, th√™m role gay trong 1 gi·ªù
    if gay_level > 50 and gay_role and not target.bot and target.id != ctx.guild.owner_id:
        try:
            if gay_role not in target.roles:
                await target.add_roles(gay_role)
                await ctx.send(f"üåà {target.mention} ƒë√£ nh·∫≠n ƒë∆∞·ª£c role gay trong 1 gi·ªù!")
                
                # L√™n l·ªãch x√≥a role sau 1 gi·ªù
                bot.loop.create_task(
                    remove_gay_role_after_duration(target.id, ctx.guild.id, gay_role.id)
                )
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ th√™m gay role: {e}")

# H√†m ph·ª• tr·ª£ ƒë·ªÉ g·ª° role sau 1 gi·ªù
async def remove_gay_role_after_duration(user_id, guild_id, role_id):
    """G·ª° gay role sau 1 gi·ªù"""
    await asyncio.sleep(3600)  # 1 gi·ªù = 3600 gi√¢y
    
    # T√¨m guild
    guild = bot.get_guild(guild_id)
    if not guild:
        return
        
    # T√¨m member
    member = guild.get_member(user_id)
    if not member:
        return
        
    # T√¨m role
    role = guild.get_role(role_id)
    if not role or role not in member.roles:
        return
        
    # G·ª° role
    try:
        await member.remove_roles(role)
        
        # Th√¥ng b√°o qua DM
        try:
            dm_embed = discord.Embed(
                title="üè≥Ô∏è‚Äçüåà Gay Role ƒë√£ h·∫øt h·∫°n",
                description="Role Gay t·∫°m th·ªùi c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª° b·ªè sau 1 gi·ªù.",
                color=discord.Color.blue()
            )
            await member.send(embed=dm_embed)
        except:
            pass  # B·ªè qua n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM
    except:
        pass  # B·ªè qua n·∫øu kh√¥ng g·ª° ƒë∆∞·ª£c role

@bot.command(name='howdamde', aliases=['damde', 'howlewd'])
async def howdamde(ctx, member: discord.Member = None):
    """Ki·ªÉm tra ƒë·ªô d√¢m d√™ c·ªßa m·ªôt th√†nh vi√™n v·ªõi k·∫øt qu·∫£ ng·∫´u nhi√™n"""
    target = member or ctx.author
    lewd_level = random.randint(0, 100)

    # T·∫°o bi·ªÉu t∆∞·ª£ng v√† ph·∫£n h·ªìi d·ª±a v√†o ƒë·ªô d√¢m d√™
    if lewd_level < 30:
        emoji = "üòá"
        message = "R·∫•t trong s√°ng v√† thu·∫ßn khi·∫øt!"
        color = discord.Color.light_grey()
    elif lewd_level < 60:
        emoji = "üòè"
        message = "H∆°i tinh qu√°i m·ªôt ch√∫t ƒë·∫•y nh∆∞ng v·∫´n ·ªïn!"
        color = discord.Color.blue()
    elif lewd_level < 85:
        emoji = "üòà"
        message = "Kh√° d√¢m d√™ r·ªìi ƒë·∫•y! C·∫ßn ki·ªÉm so√°t b·∫£n th√¢n h∆°n!"
        color = discord.Color.purple()
    else:
        emoji = "üîû"
        message = "Qu√° d√¢m r·ªìi! L√™n cai ngay ƒëi k·∫ªo ch·∫øt s·ªõm!"
        color = discord.Color.red()

    # T·∫°o progress bar
    progress_bar = "üü•" * (lewd_level // 10) + "‚¨ú" * ((100 - lewd_level) // 10)

    embed = discord.Embed(title=f"üîû M√°y ƒëo ƒë·ªô d√¢m d√™",
                          description=f"ƒê·ªô d√¢m d√™ c·ªßa {target.mention}",
                          color=color)
    embed.add_field(name="K·∫øt qu·∫£",
                    value=f"**{lewd_level}%** {emoji}",
                    inline=False)
    embed.add_field(name="M·ª©c ƒë·ªô", value=progress_bar, inline=False)
    embed.add_field(name="Nh·∫≠n x√©t", value=message, inline=False)
    embed.set_thumbnail(url=target.display_avatar.url)

    await ctx.send(embed=embed)


@bot.command(name='howmad')
async def howmad(ctx, member: discord.Member = None):
    """Ki·ªÉm tra ƒë·ªô ƒëi√™n c·ªßa m·ªôt th√†nh vi√™n v·ªõi k·∫øt qu·∫£ ng·∫´u nhi√™n"""
    target = member or ctx.author
    mad_level = random.randint(0, 100)

    # T·∫°o bi·ªÉu t∆∞·ª£ng d·ª±a v√†o ƒë·ªô ƒëi√™n
    if (mad_level < 30):
        emoji = "üòá"
        color = discord.Color.blue()
        message = "Kh√° b√¨nh th∆∞·ªùng v√† ƒëi·ªÅm tƒ©nh!"
    elif (mad_level < 60):
        emoji = "üôÉ"
        color = discord.Color.gold()
        message = "C√≥ ƒë√¥i ch√∫t... kh√≥ hi·ªÉu!"
    elif (mad_level < 85):
        emoji = "ü§™"
        color = discord.Color.orange()
        message = "R√µ r√†ng l√† c√≥ v·∫•n ƒë·ªÅ t√¢m l√Ω r·ªìi!"
    else:
        emoji = "ü§Ø"
        color = discord.Color.red()
        message = "HO√ÄN TO√ÄN ƒêI√äN R·ªíI! T√åM B√ÅC Sƒ® NGAY!"

    # T·∫°o progress bar
    progress_bar = "üü•" * (mad_level // 10) + "‚¨ú" * ((100 - mad_level) // 10)

    embed = discord.Embed(title=f"üß† M√°y ƒëo ƒë·ªô ƒëi√™n",
                          description=f"ƒê·ªô ƒëi√™n c·ªßa {target.mention}",
                          color=color)
    embed.add_field(name="K·∫øt qu·∫£",
                    value=f"**{mad_level}%** {emoji}",
                    inline=False)
    embed.add_field(name="M·ª©c ƒë·ªô", value=progress_bar, inline=False)
    embed.add_field(name="Nh·∫≠n x√©t", value=message, inline=False)
    embed.set_thumbnail(url=target.display_avatar.url)

    await ctx.send(embed=embed)


@bot.command(name='poker')
@check_channel()
@check_game_enabled('poker')
async def play_poker(ctx, bet: str = None):
    """Tr√≤ ch∆°i Poker ƒë∆°n gi·∫£n"""
    if bet is None:
        embed = discord.Embed(
            title="üÉè Poker - H∆∞·ªõng D·∫´n",
            description=
            "H√£y nh·∫≠p s·ªë xu mu·ªën c∆∞·ª£c ƒë·ªÉ ch∆°i poker.\nV√≠ d·ª•: `.poker 50` ho·∫∑c `.poker all`",
            color=discord.Color.blue())
        embed.add_field(
            name="Lu·∫≠t ch∆°i",
            value=
            "- M·ªói ng∆∞·ªùi ch∆°i nh·∫≠n 5 l√° b√†i\n- B·∫°n c√≥ th·ªÉ ƒë·ªïi t·ªëi ƒëa 3 l√°\n- Ng∆∞·ªùi c√≥ b√†i m·∫°nh h∆°n s·∫Ω chi·∫øn th·∫Øng",
            inline=False)
        embed.add_field(
            name="Th∆∞·ªüng",
            value=
            "ü•á C·∫∑p ƒë√¥i (One pair): x1.5 ti·ªÅn c∆∞·ª£c\nü•à Hai ƒë√¥i (Two pairs): x2 ti·ªÅn c∆∞·ª£c\nü•â B·ªô ba (Three of a kind): x3 ti·ªÅn c∆∞·ª£c\nüí∞ S·∫£nh (Straight): x5 ti·ªÅn c∆∞·ª£c\nüåü Th√πng (Flush): x7 ti·ªÅn c∆∞·ª£c\nüëë Full house: x10 ti·ªÅn c∆∞·ª£c",
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra bet
    if bet_amount <= 0:
        embed = discord.Embed(title="üÉè Poker",
                              description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0 xu.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[user_id] < bet_amount:
        embed = discord.Embed(
            title="üÉè Poker",
            description=
            f"{ctx.author.mention}, b·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c! B·∫°n hi·ªán c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # B·ªô b√†i
    suits = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è']
    values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
    value_dict = {
        '2': 2,
        '3': 3,
        '4': 4,
        '5': 5,
        '6': 6,
        '7': 7,
        '8': 8,
        '9': 9,
        '10': 10,
        'J': 11,
        'Q': 12,
        'K': 13,
        'A': 14
    }

    # T·∫°o b·ªô b√†i ƒë·∫ßy ƒë·ªß
    deck = [(v, s) for s in suits for v in values]
    random.shuffle(deck)

    # Chia b√†i cho ng∆∞·ªùi ch∆°i v√† bot
    player_hand = [deck.pop() for _ in range(5)]
    bot_hand = [deck.pop() for _ in range(5)]

    # Hi·ªÉn th·ªã b√†i c·ªßa ng∆∞·ªùi ch∆°i
    player_cards = " ".join(f"{v}{s}" for v, s in player_hand)

    # T·∫°o buttons cho vi·ªác ƒë√°nh d·∫•u b√†i mu·ªën ƒë·ªïi
    class CardButton(discord.ui.Button):

        def __init__(self, card, index):
            super().__init__(label=f"{card[0]}{card[1]}",
                             style=discord.ButtonStyle.secondary,
                             custom_id=str(index))
            self.marked = False

        async def callback(self, interaction):
            if interaction.user != ctx.author:
                await interaction.response.send_message(
                    "B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ch∆°i!", ephemeral=True)
                return

            self.marked = not self.marked
            self.style = discord.ButtonStyle.danger if self.marked else discord.ButtonStyle.secondary
            await interaction.response.edit_message(view=self.view)

    class PokerView(discord.ui.View):

        def __init__(self, player_hand):
            super().__init__(timeout=30)
            self.card_buttons = []
            for i, card in enumerate(player_hand):
                button = CardButton(card, i)
                self.card_buttons.append(button)
                self.add_item(button)

            # Th√™m n√∫t ƒë·ªïi b√†i
            exchange_button = discord.ui.Button(
                label="ƒê·ªïi b√†i ƒë√£ ch·ªçn", style=discord.ButtonStyle.primary)
            exchange_button.callback = self.exchange_cards
            self.add_item(exchange_button)

            # Th√™m n√∫t gi·ªØ b√†i
            keep_button = discord.ui.Button(label="Gi·ªØ nguy√™n b√†i",
                                            style=discord.ButtonStyle.success)
            keep_button.callback = self.keep_cards
            self.add_item(keep_button)

        async def exchange_cards(self, interaction):
            if interaction.user != ctx.author:
                await interaction.response.send_message(
                    "B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ch∆°i!", ephemeral=True)
                return

            marked_indices = [
                i for i, btn in enumerate(self.card_buttons) if btn.marked
            ]
            if len(marked_indices) > 3:
                await interaction.response.send_message(
                    "B·∫°n ch·ªâ ƒë∆∞·ª£c ƒë·ªïi t·ªëi ƒëa 3 l√° b√†i!", ephemeral=True)
                return

            # ƒê·ªïi b√†i ƒë√£ ƒë√°nh d·∫•u
            for idx in marked_indices:
                player_hand[idx] = deck.pop()

            await self.end_game(interaction)

        async def keep_cards(self, interaction):
            if interaction.user != ctx.author:
                await interaction.response.send_message(
                    "B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ch∆°i!", ephemeral=True)
                return

            await self.end_game(interaction)

        async def end_game(self, interaction):
            # V√¥ hi·ªáu h√≥a t·∫•t c·∫£ buttons
            for child in self.children:
                child.disabled = True
            await interaction.response.edit_message(view=self)

            # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
            new_player_cards = " ".join(f"{v}{s}" for v, s in player_hand)
            bot_cards = " ".join(f"{v}{s}" for v, s in bot_hand)

            # ƒê√°nh gi√° b√†i
            player_values = [card[0] for card in player_hand]
            player_suits = [card[1] for card in player_hand]
            bot_values = [card[0] for card in bot_hand]
            bot_suits = [card[1] for card in bot_hand]

            def evaluate_hand(values, suits):
                numerical_values = [value_dict[val] for val in values]
                numerical_values.sort()

                # Count occurrences
                value_counts = {}
                for val in numerical_values:
                    value_counts[val] = value_counts.get(val, 0) + 1

                # Full house
                if len(value_counts) == 2 and 3 in value_counts.values():
                    return 6, max(value_counts,
                                  key=value_counts.get), "Full house"

                # Flush
                if len(set(suits)) == 1:
                    return 5, max(numerical_values), "Th√πng"

                # Straight
                if len(
                        set(numerical_values)
                ) == 5 and max(numerical_values) - min(numerical_values) == 4:
                    return 4, max(numerical_values), "S·∫£nh"

                # Three of a kind
                if 3 in value_counts.values():
                    three_val = [k for k, v in value_counts.items()
                                 if v == 3][0]
                    return 3, three_val, "B·ªô ba"

                # Two pairs
                if list(value_counts.values()).count(2) == 2:
                    pairs = [k for k, v in value_counts.items() if v == 2]
                    return 2, max(pairs), "Hai ƒë√¥i"

                # One pair
                if 2 in value_counts.values():
                    pair_val = [k for k, v in value_counts.items()
                                if v == 2][0]
                    return 1, pair_val, "M·ªôt ƒë√¥i"

                return 0, max(numerical_values), "L√° cao nh·∫•t"

            player_rank, player_high, player_hand_name = evaluate_hand(
                player_values, player_suits)
            bot_rank, bot_high, bot_hand_name = evaluate_hand(
                bot_values, bot_suits)

            # So s√°nh k·∫øt qu·∫£
            if player_rank > bot_rank or (player_rank == bot_rank
                                          and player_high > bot_high):
                # Ng∆∞·ªùi ch∆°i th·∫Øng
                winnings = bet_amount * (
                    1.5 if player_rank == 1 else 2 if player_rank == 2 else
                    3 if player_rank == 3 else 5 if player_rank == 4 else
                    7 if player_rank == 5 else 10 if player_rank == 6 else 1)
                currency[user_id] += winnings - bet_amount

                result_embed = discord.Embed(
                    title="üéâ CHI·∫æN TH·∫ÆNG!",
                    description=
                    f"{ctx.author.mention} ƒë√£ th·∫Øng v·ªõi **{player_hand_name}**!",
                    color=discord.Color.gold())
                result_embed.add_field(name="B√†i c·ªßa b·∫°n",
                                       value=new_player_cards,
                                       inline=False)
                result_embed.add_field(name="B√†i c·ªßa BOT",
                                       value=bot_cards,
                                       inline=True)
                result_embed.add_field(name="BOT c√≥",
                                       value=bot_hand_name,
                                       inline=True)
                result_embed.add_field(name="Ti·ªÅn th·∫Øng",
                                       value=f"+{winnings} xu",
                                       inline=True)
                result_embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i",
                                       value=f"{currency[user_id]} xu",
                                       inline=True)

            elif player_rank == bot_rank and player_high == bot_high:
                # H√≤a
                result_embed = discord.Embed(
                    title="ü§ù H√íA!",
                    description=
                    f"C·∫£ hai ƒë·ªÅu c√≥ **{player_hand_name}** v·ªõi gi√° tr·ªã b·∫±ng nhau!",
                    color=discord.Color.blue())
                result_embed.add_field(name="B√†i c·ªßa b·∫°n",
                                       value=new_player_cards,
                                       inline=False)
                result_embed.add_field(name="B√†i c·ªßa BOT",
                                       value=bot_cards,
                                       inline=True)
                result_embed.add_field(name="Ho√†n ti·ªÅn",
                                       value=f"{bet_amount} xu",
                                       inline=False)

            else:
                # Thua
                currency[user_id] -= bet_amount
                result_embed = discord.Embed(
                    title="‚ùå THUA CU·ªòC!",
                    description=
                    f"{ctx.author.mention} ƒë√£ thua v·ªõi **{player_hand_name}**!",
                    color=discord.Color.red())
                result_embed.add_field(name="B√†i c·ªßa b·∫°n",
                                       value=new_player_cards,
                                       inline=False)
                result_embed.add_field(name="B√†i c·ªßa BOT",
                                       value=bot_cards,
                                       inline=True)
                result_embed.add_field(name="BOT c√≥",
                                       value=bot_hand_name,
                                       inline=True)
                result_embed.add_field(name="Thi·ªát h·∫°i",
                                       value=f"-{bet_amount} xu",
                                       inline=True)
                result_embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i",
                                       value=f"{currency[user_id]} xu",
                                       inline=True)

            await interaction.message.edit(embed=result_embed, view=self)

    # Hi·ªÉn th·ªã b√†i v√† c√°c n√∫t ch·ªçn
    embed = discord.Embed(
        title="üÉè Poker - Ch·ªçn b√†i mu·ªën ƒë·ªïi",
        description="Ch·ªçn t·ªëi ƒëa 3 l√° b√†i ƒë·ªÉ ƒë·ªïi ho·∫∑c gi·ªØ nguy√™n b√†i c·ªßa b·∫°n.",
        color=discord.Color.blue())
    embed.add_field(name="B√†i c·ªßa b·∫°n", value=player_cards, inline=False)
    embed.add_field(name="Th·ªùi gian", value="30 gi√¢y", inline=True)
    embed.set_footer(
        text="Nh·∫•n v√†o l√° b√†i ƒë·ªÉ ƒë√°nh d·∫•u ƒë·ªïi, nh·∫•n l·∫°i ƒë·ªÉ b·ªè ƒë√°nh d·∫•u")

    await ctx.send(embed=embed, view=PokerView(player_hand))


#Game X√¨ D√°c
@bot.command(name='xidach', aliases=['blackjack', 'xd'])
@check_channel()
@check_game_enabled('xidach')
async def blackjack(ctx, bet: str = None, mode: str = None):
    """Tr√≤ ch∆°i X√¨ D√°ch (Blackjack) v·ªõi nhi·ªÅu ch·∫ø ƒë·ªô ch∆°i"""
    if bet is None:
        embed = discord.Embed(
            title="üéØ X√¨ D√°ch - H∆∞·ªõng D·∫´n",
            description="H√£y nh·∫≠p s·ªë xu mu·ªën c∆∞·ª£c ƒë·ªÉ ch∆°i X√¨ D√°ch.\nV√≠ d·ª•: `.xidach 50` ho·∫∑c `.xidach all`",
            color=discord.Color.blue())
        embed.add_field(
            name="Lu·∫≠t ch∆°i",
            value="- M·ª•c ti√™u: ƒê·∫°t t·ªïng ƒëi·ªÉm g·∫ßn 21 nh·∫•t m√† kh√¥ng v∆∞·ª£t qu√°\n- Qu√¢n b√†i J, Q, K = 10 ƒëi·ªÉm\n- Qu√¢n A = 1 ho·∫∑c 11 ƒëi·ªÉm\n- X√¨ D√°ch = Qu√¢n A + qu√¢n 10/J/Q/K",
            inline=False)
        embed.add_field(
            name="Ch·∫ø ƒë·ªô ch∆°i",
            value="- B√¨nh th∆∞·ªùng (m·∫∑c ƒë·ªãnh): Bot l√† nh√† c√°i\n- Kh√≥ (th√™m `kho` sau l·ªánh): T·ª∑ l·ªá th·∫Øng th·∫•p h∆°n\n- Th·ª≠ th√°ch (th√™m `tt` sau l·ªánh): B√†i m·ªü t·ª´ ƒë·∫ßu, th·∫Øng x2.5",
            inline=False)
        embed.add_field(
            name="Ph·∫ßn th∆∞·ªüng",
            value="- Th·∫Øng th∆∞·ªùng: x1.5 ti·ªÅn c∆∞·ª£c\n- X√¨ D√°ch: x2 ti·ªÅn c∆∞·ª£c\n- Th·ª≠ th√°ch: x2.5 ti·ªÅn c∆∞·ª£c",
            inline=False)
        embed.set_footer(text="V√≠ d·ª•: `.xidach 50 kho` ƒë·ªÉ ch∆°i ·ªü ch·∫ø ƒë·ªô kh√≥")
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        await ctx.send(embed=discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red()))
        return

    # Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if bet_amount <= 0 or currency[user_id] < bet_amount:
        await ctx.send(embed=discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß xu",
            description=f"{ctx.author.mention}, b·∫°n c·∫ßn ƒë·∫∑t c∆∞·ª£c >0 xu v√† kh√¥ng v∆∞·ª£t qu√° s·ªë d∆∞ {currency[user_id]} xu.",
            color=discord.Color.red()))
        return

    # X√°c ƒë·ªãnh ch·∫ø ƒë·ªô ch∆°i
    game_modes = {
        "normal": {"text": "B√¨nh Th∆∞·ªùng", "color": discord.Color.blue(), "emoji": "üéÆ", "multiplier": 1.5},
        "hard": {"text": "Kh√≥", "color": discord.Color.orange(), "emoji": "üî•", "multiplier": 1.8},
        "challenge": {"text": "Th·ª≠ Th√°ch", "color": discord.Color.purple(), "emoji": "‚öîÔ∏è", "multiplier": 2.5}
    }

    game_mode = "normal"
    if mode in ["kho", "hard"]: game_mode = "hard"
    elif mode in ["tt", "thuthach", "challenge"]: game_mode = "challenge"

    mode_info = game_modes[game_mode]

    # Thi·∫øt l·∫≠p b·ªô b√†i v√† gi√° tr·ªã
    suits = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è']
    cards = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
    values = {'A': 11, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 10, 'Q': 10, 'K': 10}
    card_emojis = {
        'A': 'üÖ∞Ô∏è', '2': '2Ô∏è‚É£', '3': '3Ô∏è‚É£', '4': '4Ô∏è‚É£', '5': '5Ô∏è‚É£',
        '6': '6Ô∏è‚É£', '7': '7Ô∏è‚É£', '8': '8Ô∏è‚É£', '9': '9Ô∏è‚É£', '10': 'üîü',
        'J': 'ü§µ', 'Q': 'üë∏', 'K': 'ü§¥'
    }

    # T·∫°o v√† tr·ªôn b·ªô b√†i
    deck = [(card, suit) for suit in suits for card in cards]
    random.shuffle(deck)

    # Chia b√†i ban ƒë·∫ßu
    player_hand = [deck.pop(), deck.pop()]
    dealer_hand = [deck.pop(), deck.pop()]

    # ƒê·ªãnh nghƒ©a c√°c h√†m ti·ªán √≠ch
    def calculate_hand(hand):
        score = sum(values[card[0]] for card in hand)
        # ƒêi·ªÅu ch·ªânh gi√° tr·ªã A n·∫øu c·∫ßn
        aces = sum(1 for card in hand if card[0] == 'A')
        while score > 21 and aces > 0:
            score -= 10
            aces -= 1
        return score

    def is_blackjack(hand):
        return len(hand) == 2 and calculate_hand(hand) == 21

    def display_cards(hand, hide_first=False):
        if hide_first:
            return f"üé¥ | {' '.join(f'{card_emojis[card[0]]}{card[1]}' for card in hand[1:])}"
        return f"{' '.join(f'{card_emojis[card[0]]}{card[1]}' for card in hand)}"

    # ƒêi·ªÅu ch·ªânh ƒë·ªô kh√≥ (n·∫øu l√† ch·∫ø ƒë·ªô kh√≥)
    if game_mode == "hard":
        # ƒê·∫£m b·∫£o nh√† c√°i c√≥ l·ª£i th·∫ø
        while calculate_hand(dealer_hand) < 16:
            dealer_hand[0] = deck.pop()  # Thay b√†i ƒë·∫ßu ti√™n n·∫øu qu√° th·∫•p

    # Hi·ªáu ·ª©ng b·∫Øt ƒë·∫ßu game
    loading_message = await ctx.send("üÉè **ƒêang chu·∫©n b·ªã b√†n x√¨ d√°ch...**")

    # Hi·ªáu ·ª©ng chia b√†i
    for i in range(4):
        card_dealing = "üé¥" * i
        await loading_message.edit(content=f"üÉè **ƒêang chia b√†i...** {card_dealing}")
        await asyncio.sleep(0.3)

    # T√≠nh ƒëi·ªÉm ban ƒë·∫ßu
    player_score = calculate_hand(player_hand)
    dealer_score = calculate_hand(dealer_hand)
    player_blackjack = is_blackjack(player_hand)
    dealer_blackjack = is_blackjack(dealer_hand)

    # Hi·ªÉn th·ªã b√†i ban ƒë·∫ßu
    hide_dealer = game_mode != "challenge"
    initial_embed = discord.Embed(
        title=f"{mode_info['emoji']} X√¨ D√°ch - Ch·∫ø ƒë·ªô {mode_info['text']}",
        description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c {bet_amount} xu.",
        color=mode_info['color'])

    initial_embed.add_field(
        name="üé¥ B√†i c·ªßa b·∫°n",
        value=f"{display_cards(player_hand)} = **{player_score}**",
        inline=False)

    initial_embed.add_field(
        name="üé¥ B√†i c·ªßa nh√† c√°i",
        value=f"{display_cards(dealer_hand, hide_dealer)}" + 
             (f" = **{dealer_score}**" if not hide_dealer else ""),
        inline=False)

    if game_mode == "challenge":
        initial_embed.set_footer(text="‚ö†Ô∏è CH·∫æ ƒê·ªò TH·ª¨ TH√ÅCH: B√†i nh√† c√°i ƒë∆∞·ª£c l·∫≠t t·ª´ ƒë·∫ßu!")

    await loading_message.edit(content=None, embed=initial_embed)

    # X·ª≠ l√Ω n·∫øu c√≥ X√¨ D√°ch
    if player_blackjack or dealer_blackjack:
        await asyncio.sleep(1)

        result_embed = discord.Embed(
            title="üÉè K·∫æT QU·∫¢ X√å D√ÅCH üÉè",
            color=discord.Color.gold())

        result_embed.add_field(
            name="üé¥ B√†i c·ªßa b·∫°n",
            value=f"{display_cards(player_hand)} = **{player_score}**",
            inline=False)

        result_embed.add_field(
            name="üé¥ B√†i c·ªßa nh√† c√°i",
            value=f"{display_cards(dealer_hand)} = **{dealer_score}**",
            inline=False)

        if player_blackjack and dealer_blackjack:
            result_embed.description = "**H√íA!** C·∫£ hai ƒë·ªÅu c√≥ X√¨ D√°ch!"
            result_embed.color = discord.Color.yellow()

        elif player_blackjack:
            winnings = int(bet_amount * 2)  # X√¨ d√°ch th·∫Øng x2
            currency[user_id] += winnings
            result_embed.description = f"üéâ **TH·∫ÆNG L·ªöN!** üéâ\nB·∫°n c√≥ X√¨ D√°ch! Th·∫Øng {winnings} xu!"
            result_embed.color = discord.Color.green()

        else:  # dealer_blackjack
            currency[user_id] -= bet_amount
            result_embed.description = f"‚ùå **THUA!** Nh√† c√°i c√≥ X√¨ D√°ch! M·∫•t {bet_amount} xu!"
            result_embed.color = discord.Color.red()

        await loading_message.edit(embed=result_embed)
        return

    # T·∫°o n√∫t b·∫•m cho ng∆∞·ªùi ch∆°i
    view = discord.ui.View(timeout=30)
    hit_button = discord.ui.Button(style=discord.ButtonStyle.primary, label="R√∫t b√†i", emoji="üÉè")
    stand_button = discord.ui.Button(style=discord.ButtonStyle.secondary, label="D·∫±n b√†i", emoji="üõë")
    double_button = discord.ui.Button(style=discord.ButtonStyle.success, label="Double", emoji="üí∞")

    player_busted = False
    player_stood = False

    # X·ª≠ l√Ω n√∫t r√∫t b√†i
    async def hit_callback(interaction):
        nonlocal player_hand, player_score, player_busted

        if interaction.user.id != ctx.author.id:
            return

        # R√∫t th√™m b√†i
        new_card = deck.pop()
        player_hand.append(new_card)
        player_score = calculate_hand(player_hand)

        # Hi·ªáu ·ª©ng r√∫t b√†i
        hit_embed = discord.Embed(
            title=f"{mode_info['emoji']} X√¨ D√°ch - ƒêang ch∆°i",
            description=f"{ctx.author.mention} v·ª´a r√∫t th√™m 1 l√° b√†i! üÉè",
            color=mode_info['color'])

        hit_embed.add_field(
            name="üé¥ B√†i c·ªßa b·∫°n",
            value=f"{display_cards(player_hand)} = **{player_score}**",
            inline=False)

        hit_embed.add_field(
            name="üé¥ B√†i c·ªßa nh√† c√°i",
            value=f"{display_cards(dealer_hand, hide_dealer)}" + 
                 (f" = **{dealer_score}**" if not hide_dealer else ""),
            inline=False)

        # Animation cho l√° b√†i m·ªõi
        hit_embed.add_field(
            name="üéØ B·∫°n v·ª´a r√∫t ƒë∆∞·ª£c",
            value=f"**{card_emojis[new_card[0]]}{new_card[1]}**",
            inline=False)

        # Ki·ªÉm tra n·∫øu qu√° 21 ƒëi·ªÉm
        if player_score > 21:
            player_busted = True
            for button in view.children:
                button.disabled = True

            hit_embed.title = "üí• QU·∫ÆC! B·∫°n ƒë√£ qu√° 21 ƒëi·ªÉm!"
            hit_embed.color = discord.Color.red()

            currency[user_id] -= bet_amount
            hit_embed.add_field(
                name="‚ùå K·∫øt qu·∫£",
                value=f"B·∫°n thua v√† m·∫•t {bet_amount} xu!",
                inline=False)

            # Hi·ªáu ·ª©ng thua
            await interaction.response.edit_message(embed=hit_embed, view=view)
            await asyncio.sleep(1)

            # Hi·ªáu ·ª©ng k·∫øt qu·∫£ cu·ªëi c√πng
            final_embed = create_final_embed("lose")
            await interaction.edit_original_response(embed=final_embed)
            return

        await interaction.response.edit_message(embed=hit_embed, view=view)

    # X·ª≠ l√Ω n√∫t d·∫±n b√†i
    async def stand_callback(interaction):
        nonlocal player_stood, dealer_hand, dealer_score

        if interaction.user.id != ctx.author.id:
            return

        player_stood = True
        for button in view.children:
            button.disabled = True

        # Hi·ªáu ·ª©ng d·∫±n b√†i
        stand_embed = discord.Embed(
            title="üõë B·∫°n ƒë√£ d·∫±n b√†i!",
            description="ƒê·∫øn l∆∞·ª£t nh√† c√°i...",
            color=discord.Color.gold())

        stand_embed.add_field(
            name="üé¥ B√†i c·ªßa b·∫°n",
            value=f"{display_cards(player_hand)} = **{player_score}**",
            inline=False)

        stand_embed.add_field(
            name="üé¥ B√†i c·ªßa nh√† c√°i",
            value=f"{display_cards(dealer_hand)} = **{dealer_score}**",
            inline=False)

        await interaction.response.edit_message(embed=stand_embed, view=view)

        # Nh√† c√°i l·∫≠t b√†i v√† r√∫t th√™m n·∫øu c·∫ßn
        await asyncio.sleep(1)

        # Nh√† c√°i r√∫t b√†i ƒë·∫øn khi ƒë·∫°t √≠t nh·∫•t 17 ƒëi·ªÉm
        dealer_drawing = False
        while dealer_score < 17:
            dealer_drawing = True
            # Hi·ªáu ·ª©ng nh√† c√°i ƒëang suy nghƒ©
            thinking_embed = discord.Embed(
                title="ü§î Nh√† c√°i ƒëang suy nghƒ©...",
                color=discord.Color.gold())

            thinking_embed.add_field(
                name="üé¥ B√†i c·ªßa b·∫°n",
                value=f"{display_cards(player_hand)} = **{player_score}**",
                inline=False)

            thinking_embed.add_field(
                name="üé¥ B√†i c·ªßa nh√† c√°i",
                value=f"{display_cards(dealer_hand)} = **{dealer_score}**",
                inline=False)

            await interaction.edit_original_response(embed=thinking_embed)
            await asyncio.sleep(1)

            # Nh√† c√°i r√∫t th√™m b√†i
            new_card = deck.pop()
            dealer_hand.append(new_card)
            dealer_score = calculate_hand(dealer_hand)

            # Hi·ªáu ·ª©ng nh√† c√°i r√∫t b√†i
            dealer_hit_embed = discord.Embed(
                title="üéØ Nh√† c√°i r√∫t th√™m b√†i!",
                description=f"Nh√† c√°i r√∫t ƒë∆∞·ª£c: {card_emojis[new_card[0]]}{new_card[1]}",
                color=discord.Color.gold())

            dealer_hit_embed.add_field(
                name="üé¥ B√†i c·ªßa b·∫°n",
                value=f"{display_cards(player_hand)} = **{player_score}**",
                inline=False)

            dealer_hit_embed.add_field(
                name="üé¥ B√†i c·ªßa nh√† c√°i",
                value=f"{display_cards(dealer_hand)} = **{dealer_score}**",
                inline=False)

            await interaction.edit_original_response(embed=dealer_hit_embed)
            await asyncio.sleep(0.8)

        # N·∫øu nh√† c√°i kh√¥ng c·∫ßn r√∫t th√™m b√†i
        if not dealer_drawing:
            dealer_stand_embed = discord.Embed(
                title="üõë Nh√† c√°i kh√¥ng r√∫t th√™m b√†i",
                color=discord.Color.gold())

            dealer_stand_embed.add_field(
                name="üé¥ B√†i c·ªßa b·∫°n",
                value=f"{display_cards(player_hand)} = **{player_score}**",
                inline=False)

            dealer_stand_embed.add_field(
                name="üé¥ B√†i c·ªßa nh√† c√°i",
                value=f"{display_cards(dealer_hand)} = **{dealer_score}**",
                inline=False)

            await interaction.edit_original_response(embed=dealer_stand_embed)
            await asyncio.sleep(1)

        # X√°c ƒë·ªãnh k·∫øt qu·∫£
        result_type = ""
        if dealer_score > 21:
            # Nh√† c√°i qu·∫Øc
            result_type = "win"
            winnings = int(bet_amount * mode_info['multiplier'])
            currency[user_id] += winnings

        elif player_score > dealer_score:
            # Ng∆∞·ªùi ch∆°i th·∫Øng
            result_type = "win"
            winnings = int(bet_amount * mode_info['multiplier'])
            currency[user_id] += winnings

        elif player_score < dealer_score:
            # Nh√† c√°i th·∫Øng
            result_type = "lose"
            currency[user_id] -= bet_amount

        else:
            # H√≤a
            result_type = "draw"

        # Hi·ªáu ·ª©ng k·∫øt qu·∫£
        final_embed = create_final_embed(result_type)
        await interaction.edit_original_response(embed=final_embed)

    # X·ª≠ l√Ω n√∫t double
    async def double_callback(interaction):
        nonlocal player_hand, player_score, bet_amount

        if interaction.user.id != ctx.author.id:
            return

        # Ki·ªÉm tra ƒë·ªß ti·ªÅn ƒë·ªÉ double
        if currency[user_id] < bet_amount * 2:
            await interaction.response.send_message("B·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ Double!", ephemeral=True)
            return

        # TƒÉng g·∫•p ƒë√¥i c∆∞·ª£c
        bet_amount *= 2

        # R√∫t th√™m duy nh·∫•t 1 l√° v√† d·∫±n b√†i
        new_card = deck.pop()
        player_hand.append(new_card)
        player_score = calculate_hand(player_hand)

        # Disable t·∫•t c·∫£ n√∫t
        for button in view.children:
            button.disabled = True

        # Hi·ªáu ·ª©ng double
        double_embed = discord.Embed(
            title="üí∞ DOUBLE! B·∫°n ƒë√£ g·∫•p ƒë√¥i c∆∞·ª£c!",
            description=f"C∆∞·ª£c hi·ªán t·∫°i: {bet_amount} xu",
            color=discord.Color.gold())

        double_embed.add_field(
            name="üé¥ B√†i c·ªßa b·∫°n",
            value=f"{display_cards(player_hand)} = **{player_score}**",
            inline=False)

        double_embed.add_field(
            name="üéØ B·∫°n r√∫t ƒë∆∞·ª£c",
            value=f"**{card_emojis[new_card[0]]}{new_card[1]}**",
            inline=False)

        double_embed.add_field(
            name="üé¥ B√†i c·ªßa nh√† c√°i",
            value=f"{display_cards(dealer_hand)} = **{dealer_score}**",
            inline=False)

        await interaction.response.edit_message(embed=double_embed, view=view)
        await asyncio.sleep(1)

        # Ki·ªÉm tra n·∫øu qu·∫Øc
        if player_score > 21:
            currency[user_id] -= bet_amount
            bust_embed = discord.Embed(
                title="üí• QU·∫ÆC! B·∫°n ƒë√£ qu√° 21 ƒëi·ªÉm!",
                description=f"B·∫°n thua v√† m·∫•t {bet_amount} xu!",
                color=discord.Color.red())

            bust_embed.add_field(
                name="üé¥ B√†i c·ªßa b·∫°n",
                value=f"{display_cards(player_hand)} = **{player_score}**",
                inline=False)

            bust_embed.add_field(
                name="üé¥ B√†i c·ªßa nh√† c√°i",
                value=f"{display_cards(dealer_hand)} = **{dealer_score}**",
                inline=False)

            await interaction.edit_original_response(embed=bust_embed)
            await asyncio.sleep(1)

            # Hi·ªáu ·ª©ng k·∫øt qu·∫£ cu·ªëi
            final_embed = create_final_embed("lose")
            await interaction.edit_original_response(embed=final_embed)
            return

        # Ti·∫øp t·ª•c v·ªõi ph·∫ßn nh√† c√°i r√∫t b√†i nh∆∞ trong stand_callback
        await dealer_play(interaction)

    # H√†m x·ª≠ l√Ω ph·∫ßn ch∆°i c·ªßa nh√† c√°i
    async def dealer_play(interaction):
        nonlocal dealer_hand, dealer_score

        # Nh√† c√°i r√∫t b√†i ƒë·∫øn khi ƒë·∫°t √≠t nh·∫•t 17 ƒëi·ªÉm
        dealer_drawing = False
        while dealer_score < 17:
            dealer_drawing = True
            # Hi·ªáu ·ª©ng nh√† c√°i ƒëang suy nghƒ©
            thinking_embed = discord.Embed(
                title="ü§î Nh√† c√°i ƒëang suy nghƒ©...",
                color=discord.Color.gold())

            thinking_embed.add_field(
                name="üé¥ B√†i c·ªßa b·∫°n",
                value=f"{display_cards(player_hand)} = **{player_score}**",
                inline=False)

            thinking_embed.add_field(
                name="üé¥ B√†i c·ªßa nh√† c√°i",
                value=f"{display_cards(dealer_hand)} = **{dealer_score}**",
                inline=False)

            await interaction.edit_original_response(embed=thinking_embed)
            await asyncio.sleep(1)

            # Nh√† c√°i r√∫t th√™m b√†i
            new_card = deck.pop()
            dealer_hand.append(new_card)
            dealer_score = calculate_hand(dealer_hand)

            # Hi·ªáu ·ª©ng nh√† c√°i r√∫t b√†i
            dealer_hit_embed = discord.Embed(
                title="üéØ Nh√† c√°i r√∫t th√™m b√†i!",
                description=f"Nh√† c√°i r√∫t ƒë∆∞·ª£c: {card_emojis[new_card[0]]}{new_card[1]}",
                color=discord.Color.gold())

            dealer_hit_embed.add_field(
                name="üé¥ B√†i c·ªßa b·∫°n",
                value=f"{display_cards(player_hand)} = **{player_score}**",
                inline=False)

            dealer_hit_embed.add_field(
                name="üé¥ B√†i c·ªßa nh√† c√°i",
                value=f"{display_cards(dealer_hand)} = **{dealer_score}**",
                inline=False)

            await interaction.edit_original_response(embed=dealer_hit_embed)
            await asyncio.sleep(0.8)

        # X√°c ƒë·ªãnh k·∫øt qu·∫£
        result_type = ""
        if dealer_score > 21:
            # Nh√† c√°i qu·∫Øc
            result_type = "win"
            winnings = int(bet_amount * mode_info['multiplier'])
            currency[user_id] += winnings

        elif player_score > dealer_score:
            # Ng∆∞·ªùi ch∆°i th·∫Øng
            result_type = "win"
            winnings = int(bet_amount * mode_info['multiplier'])
            currency[user_id] += winnings

        elif player_score < dealer_score:
            # Nh√† c√°i th·∫Øng
            result_type = "lose"
            currency[user_id] -= bet_amount

        else:
            # H√≤a
            result_type = "draw"

        # Hi·ªáu ·ª©ng k·∫øt qu·∫£
        final_embed = create_final_embed(result_type)
        await interaction.edit_original_response(embed=final_embed)

    # H√†m t·∫°o embed k·∫øt qu·∫£ cu·ªëi
    def create_final_embed(result):
        if result == "win":
            winnings = int(bet_amount * mode_info['multiplier'])
            embed = discord.Embed(
                title="üéâ CHI·∫æN TH·∫ÆNG! üéâ",
                description=f"B·∫°n ƒë√£ th·∫Øng {winnings} xu! (x{mode_info['multiplier']})",
                color=discord.Color.green())

        elif result == "lose":
            embed = discord.Embed(
                title="‚ùå THUA CU·ªòC!",
                description=f"B·∫°n ƒë√£ thua {bet_amount} xu!",
                color=discord.Color.red())

        else:  # draw
            embed = discord.Embed(
                title="ü§ù H√íA!",
                description="B·∫°n v√† nh√† c√°i c√≥ s·ªë ƒëi·ªÉm b·∫±ng nhau.",
                color=discord.Color.yellow())

        embed.add_field(
            name="üé¥ B√†i c·ªßa b·∫°n",
            value=f"{display_cards(player_hand)} = **{player_score}**",
            inline=False)

        embed.add_field(
            name="üé¥ B√†i c·ªßa nh√† c√°i",
            value=f"{display_cards(dealer_hand)} = **{dealer_score}**",
            inline=False)

        embed.add_field(
            name="üí∞ S·ªë d∆∞ hi·ªán t·∫°i",
            value=f"{currency[user_id]} xu",
            inline=False)

        return embed

    # Thi·∫øt l·∫≠p c√°c callback cho n√∫t
    hit_button.callback = hit_callback
    stand_button.callback = stand_callback
    double_button.callback = double_callback

    # Th√™m n√∫t v√†o view
    view.add_item(hit_button)
    view.add_item(stand_button)
    view.add_item(double_button)

    # G·ª≠i tin nh·∫Øn v·ªõi c√°c n√∫t
    await loading_message.edit(content=None, embed=initial_embed, view=view)

    # X·ª≠ l√Ω timeout
    await view.wait()
    if not player_busted and not player_stood:
        timeout_embed = discord.Embed(
            title="‚è∞ H·∫øt th·ªùi gian!",
            description="B·∫°n ƒë√£ kh√¥ng ƒë∆∞a ra l·ª±a ch·ªçn trong th·ªùi gian quy ƒë·ªãnh.",
            color=discord.Color.dark_gray())
        timeout_embed.add_field(
            name="üé¥ B√†i c·ªßa b·∫°n",
            value=f"{display_cards(player_hand)} = **{player_score}**",
            inline=False)
        timeout_embed.add_field(
            name="üé¥ B√†i c·ªßa nh√† c√°i",
            value=f"{display_cards(dealer_hand)} = **{dealer_score}**",
            inline=False)

        for button in view.children:
            button.disabled = True

        # Tr·ª´ ti·ªÅn ng∆∞·ªùi ch∆°i v√¨ timeout
        currency[ctx.author.id] -= bet_amount

        timeout_embed.add_field(
            name="‚ùå K·∫øt qu·∫£",
            value=f"B·∫°n b·ªã tr·ª´ {bet_amount} xu do kh√¥ng ƒë∆∞a ra l·ª±a ch·ªçn k·ªãp th·ªùi!",
            inline=False)
        timeout_embed.add_field(
            name="üí∞ S·ªë d∆∞ hi·ªán t·∫°i",
            value=f"{currency[ctx.author.id]} xu",
            inline=False)

        timeout_embed.set_footer(text="üò¢ L·∫ßn sau h√£y ƒë∆∞a ra l·ª±a ch·ªçn nhanh h∆°n nh√©!")
        await loading_message.edit(embed=timeout_embed, view=view)


# Game T√†i X·ªâu
@bot.command(name='tx', aliases=['taixiu'])
@check_channel()
@check_game_enabled('tx')
async def tai_xiu(ctx, choice: str = None, bet: int = None):
    """Tr√≤ ch∆°i T√†i X·ªâu"""
    if choice is None or bet is None:
        embed = discord.Embed(
            title="üé≤ T√†i X·ªâu - H∆∞·ªõng D·∫´n",
            description="ƒêo√°n k·∫øt qu·∫£ t·ªïng c·ªßa 3 x√∫c x·∫Øc.\nV√≠ d·ª•: `.tx t 50` ho·∫∑c `.tx x 100`",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°ch ch∆°i",
            value="- Ch·ªçn T√†i (t) ho·∫∑c X·ªâu (x)\n- ƒê·∫∑t c∆∞·ª£c s·ªë xu\n- T·ªïng 3 x√∫c x·∫Øc: 11-18 l√† T√†i, 3-10 l√† X·ªâu\n- Th·∫Øng: x1.8 ti·ªÅn c∆∞·ª£c",
            inline=False)
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra l·ª±a ch·ªçn
    choice = choice.lower()
    if choice not in ['t', 'x', 't√†i', 'x·ªâu', 'tai', 'xiu']:
        embed = discord.Embed(
            title="‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng ch·ªçn 't' (T√†i) ho·∫∑c 'x' (X·ªâu).",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Bi·∫øn ƒë·ªïi l·ª±a ch·ªçn th√†nh 't' ho·∫∑c 'x'
    if choice in ['t√†i', 'tai']:
        choice = 't'
    elif choice in ['x·ªâu', 'xiu']:
        choice = 'x'

    # Ki·ªÉm tra bet
    user_id = ctx.author.id

    # Ki·ªÉm tra cooldown
    can_play, remaining_time = check_cooldown(user_id)
    if not can_play:
        embed = discord.Embed(
            title="‚è≥ Th·ªùi gian ch·ªù",
            description=f"B·∫°n c·∫ßn ƒë·ª£i th√™m {remaining_time} gi√¢y tr∆∞·ªõc khi ch∆°i ti·∫øp.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if bet <= 0:
        embed = discord.Embed(title="‚ùå L·ªói",
                             description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.",
                             color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[user_id] < bet:
        embed = discord.Embed(title="‚ùå Kh√¥ng ƒë·ªß xu",
                             description=f"B·∫°n c·∫ßn {bet} xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c, nh∆∞ng ch·ªâ c√≥ {currency[user_id]} xu.",
                             color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Hi·ªáu ·ª©ng l·∫Øc x√∫c x·∫Øc m·ªõi
    dice_faces = ["‚öÄ", "‚öÅ", "‚öÇ", "‚öÉ", "‚öÑ", "‚öÖ"]
    colors = [discord.Color.blue(), discord.Color.purple(), 
              discord.Color.gold(), discord.Color.orange()]

    # Tin nh·∫Øn loading ban ƒë·∫ßu
    loading_embed = discord.Embed(
        title="üé≤ ƒêANG L·∫ÆC X√öC X·∫ÆC",
        description="X√∫c x·∫Øc ƒëang ƒë∆∞·ª£c l·∫Øc...",
        color=colors[0])
    loading_msg = await ctx.send(embed=loading_embed)

    # Giai ƒëo·∫°n 1: L·∫Øc nhanh
    for i in range(3):
        dice_display = " ".join(random.choices(dice_faces, k=3))
        embed = discord.Embed(
            title=f"üé≤ ƒêANG L·∫ÆC X√öC X·∫ÆC {'.'*(i+1)}",
            description=f"X√∫c x·∫Øc ƒëang lƒÉn!\n\n{dice_display}",
            color=colors[i % len(colors)])
        await loading_msg.edit(embed=embed)
        await asyncio.sleep(0.7)

    # Giai ƒëo·∫°n 2: Hi·ªÉn th·ªã t·ª´ng vi√™n x√∫c x·∫Øc m·ªôt
    embed = discord.Embed(
        title="üé≤ X√öC X·∫ÆC ƒêANG D·ª™NG L·∫†I",
        description="K·∫øt qu·∫£ ƒëang hi·ªán ra...",
        color=discord.Color.gold())
    await loading_msg.edit(embed=embed)
    await asyncio.sleep(0.8)

    # T·∫°o k·∫øt qu·∫£ th·∫≠t
    dice1, dice2, dice3 = random.randint(1, 6), random.randint(1, 6), random.randint(1, 6)
    total = dice1 + dice2 + dice3

    # Hi·ªÉn th·ªã vi√™n ƒë·∫ßu ti√™n
    embed = discord.Embed(
        title="üé≤ K·∫æT QU·∫¢ ƒêANG HI·ªÜN",
        description=f"X√∫c x·∫Øc 1: {dice_faces[dice1-1]}",
        color=discord.Color.orange())
    await loading_msg.edit(embed=embed)
    await asyncio.sleep(0.6)

    # Hi·ªÉn th·ªã vi√™n th·ª© hai
    embed = discord.Embed(
        title="üé≤ K·∫æT QU·∫¢ ƒêANG HI·ªÜN",
        description=f"X√∫c x·∫Øc 1: {dice_faces[dice1-1]}\nX√∫c x·∫Øc 2: {dice_faces[dice2-1]}",
        color=discord.Color.orange())
    await loading_msg.edit(embed=embed)
    await asyncio.sleep(0.6)

    # Hi·ªÉn th·ªã vi√™n th·ª© ba v√† k·∫øt qu·∫£
    result_tai_xiu = "T√†i" if total >= 11 else "X·ªâu"

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng v·ªõi ƒë·ªông ƒë·∫•t
    embed = discord.Embed(
        title=f"üé≤ K·∫æT QU·∫¢: {result_tai_xiu.upper()} ({total})",
        description=f"X√∫c x·∫Øc 1: {dice_faces[dice1-1]}\nX√∫c x·∫Øc 2: {dice_faces[dice2-1]}\nX√∫c x·∫Øc 3: {dice_faces[dice3-1]}\n\n**T·ªïng ƒëi·ªÉm: {total} ‚ûú {result_tai_xiu}**",
        color=discord.Color.green() if (choice == 't' and total >= 11) or (choice == 'x' and total < 11) else discord.Color.red())

    # X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng
    if (choice == 't' and total >= 11) or (choice == 'x' and total < 11):
        # Ng∆∞·ªùi ch∆°i th·∫Øng
        winnings = int(bet * 1.8)
        currency[user_id] += winnings - bet  # Tr·ª´ ti·ªÅn c∆∞·ª£c v√† c·ªông ti·ªÅn th·∫Øng

        embed.add_field(name="L·ª±a ch·ªçn c·ªßa b·∫°n", 
                       value=f"**{'T√†i' if choice == 't' else 'X·ªâu'}**", 
                       inline=True)
        embed.add_field(name="Ti·ªÅn th·∫Øng", 
                       value=f"**+{winnings} xu**", 
                       inline=True)
        embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i", 
                       value=f"**{currency[user_id]} xu**", 
                       inline=True)
        embed.set_footer(text="üéä Ch√∫c m·ª´ng! B·∫°n ƒë√£ th·∫Øng!")

        # Th√™m hi·ªáu ·ª©ng run r·∫©y cho th√¥ng b√°o chi·∫øn th·∫Øng
        for i in range(5):
            shake_embed = embed.copy()
            shake_embed.title = f"{'  ' * (i % 2)}üé≤ K·∫æT QU·∫¢: {result_tai_xiu.upper()} ({total}){'  ' * (i % 2)}"
            await loading_msg.edit(embed=shake_embed)
            await asyncio.sleep(0.1)
    else:
        # Ng∆∞·ªùi ch∆°i thua
        currency[user_id] -= bet

        embed.add_field(name="L·ª±a ch·ªçn c·ªßa b·∫°n", 
                       value=f"**{'T√†i' if choice == 't' else 'X·ªâu'}**", 
                       inline=True)
        embed.add_field(name="Ti·ªÅn thua", 
                       value=f"**-{bet} xu**", 
                       inline=True)
        embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i", 
                       value=f"**{currency[user_id]} xu**", 
                       inline=True)
        embed.set_footer(text="üò¢ R·∫•t ti·∫øc! B·∫°n ƒë√£ thua!")

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    await loading_msg.edit(embed=embed)


@bot.command(name='pinggo', aliases=['bingo', 'pg'])
@check_channel()
@check_game_enabled('pinggo')
async def pinggo(ctx, bet: int = None):
    """Tr√≤ ch∆°i Ping Go/Bingo"""
    if bet is None:
        embed = discord.Embed(
            title="üéØ Ping Go - H∆∞·ªõng D·∫´n",
            description=
            "H√£y nh·∫≠p s·ªë xu mu·ªën c∆∞·ª£c ƒë·ªÉ ch∆°i Ping Go.\nV√≠ d·ª•: `.pinggo 50`",
            color=discord.Color.blue())
        embed.add_field(
            name="Lu·∫≠t ch∆°i",
            value=
            "- Bot s·∫Ω ch·ªçn ng·∫´u nhi√™n 5 s·ªë t·ª´ 1-20\n- Ng∆∞·ªùi ch∆°i nh·∫≠n 10 s·ªë ng·∫´u nhi√™n\n- Tr√πng c√†ng nhi·ªÅu s·ªë, th∆∞·ªüng c√†ng cao",
            inline=False)
        embed.add_field(
            name="Ph·∫ßn th∆∞·ªüng",
            value=
            "- Tr√πng 3 s·ªë: x1.5 ti·ªÅn c∆∞·ª£c\n- Tr√πng 4 s·ªë: x3 ti·ªÅn c∆∞·ª£c\n- Tr√πng 5 s·ªë: x10 ti·ªÅn c∆∞·ª£c",
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # Ki·ªÉm tra cooldown
    can_play, remaining_time = check_cooldown(user_id)
    if not can_play:
        embed = discord.Embed(
            title="‚è≥ Th·ªùi gian ch·ªù",
            description=
            f"B·∫°n c·∫ßn ƒë·ª£i th√™m {remaining_time} gi√¢y tr∆∞·ªõc khi ch∆°i ti·∫øp.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if bet <= 0:
        embed = discord.Embed(title="üéØ Ping Go",
                              description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0 xu.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[user_id] < bet:
        embed = discord.Embed(
            title="üéØ Ping Go",
            description=
            f"{ctx.author.mention}, b·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c! B·∫°n hi·ªán c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # T·∫°o s·ªë ng·∫´u nhi√™n
    all_numbers = list(range(1, 21))
    winning_numbers = random.sample(all_numbers, 5)
    player_numbers = random.sample(all_numbers, 10)

    # T√¨m s·ªë tr√πng
    matching_numbers = set(winning_numbers) & set(player_numbers)
    match_count = len(matching_numbers)

    # Hi·ªÉn th·ªã hi·ªáu ·ª©ng b·∫Øt ƒë·∫ßu game
    embed = discord.Embed(
        title="üéØ Ping Go - B·∫Øt ƒë·∫ßu quay s·ªë",
        description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c {bet} xu.",
        color=discord.Color.blue())

    # Hi·ªÉn th·ªã s·ªë c·ªßa ng∆∞·ªùi ch∆°i theo d·∫°ng l∆∞·ªõi s·ªë ƒë·∫πp m·∫Øt
    player_nums_sorted = sorted(player_numbers)
    player_nums_display = ""
    for i in range(0, len(player_nums_sorted), 5):
        row = player_nums_sorted[i:i+5]
        player_nums_display += " ".join(f"`{num:2d}`" for num in row) + "\n"

    embed.add_field(name="üéüÔ∏è V√© s·ªë c·ªßa b·∫°n", value=player_nums_display, inline=False)
    embed.add_field(name="‚è≥ Tr·∫°ng th√°i", value="Chu·∫©n b·ªã quay s·ªë...", inline=False)
    embed.set_footer(text="Tr√πng 3/4/5 s·ªë ƒë·ªÉ nh·∫≠n th∆∞·ªüng!")

    message = await ctx.send(embed=embed)
    await asyncio.sleep(1.5)

    # Hi·ªáu ·ª©ng quay s·ªë v·ªõi animation ƒë·∫πp m·∫Øt
    drawn_numbers = []
    ball_emojis = ["üî¥", "üü†", "üü°", "üü¢", "üîµ"]

    for i in range(5):
        # Hi·ªáu ·ª©ng tr∆∞·ªõc khi hi·ªán s·ªë
        for _ in range(3):
            loading_embed = discord.Embed(
                title=f"üéØ Ping Go - ƒêang quay s·ªë {i+1}/5",
                description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c {bet} xu.",
                color=discord.Color.gold())

            loading_embed.add_field(name="üéüÔ∏è V√© s·ªë c·ªßa b·∫°n", value=player_nums_display, inline=False)

            # Hi·ªÉn th·ªã s·ªë ƒë√£ quay
            if drawn_numbers:
                drawn_str = " ".join([f"{ball_emojis[j % len(ball_emojis)]} `{num}`" for j, num in enumerate(drawn_numbers)])
                loading_embed.add_field(name="üé≤ S·ªë ƒë√£ quay", value=drawn_str, inline=False)

            # Hi·ªáu ·ª©ng ƒëang quay
            loading_embed.add_field(
                name="‚è≥ ƒêang quay s·ªë...",
                value=f"{'‚ö™'*(_ % 3 + 1)} {'‚ö´'*(3-_ % 3)}", 
                inline=False)

            await message.edit(embed=loading_embed)
            await asyncio.sleep(0.3)

        # Th√™m s·ªë m·ªõi quay ƒë∆∞·ª£c
        drawn_numbers.append(winning_numbers[i])

        # Hi·ªÉn th·ªã s·ªë m·ªõi quay ƒë∆∞·ª£c v·ªõi hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát
        result_embed = discord.Embed(
            title=f"üéØ Ping Go - S·ªë th·ª© {i+1}: {ball_emojis[i]} `{winning_numbers[i]}`!",
            description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c {bet} xu.",
            color=discord.Color.gold())

        # Hi·ªÉn th·ªã v√© c·ªßa ng∆∞·ªùi ch∆°i v·ªõi ƒë√°nh d·∫•u s·ªë tr√πng
        player_nums_marked = ""
        for j in range(0, len(player_nums_sorted), 5):
            row = player_nums_sorted[j:j+5]
            row_display = []
            for num in row:
                if num in drawn_numbers and num in player_numbers:
                    # S·ªë tr√πng ƒë√£ quay
                    row_display.append(f"**`{num:2d}`**")
                elif num in player_numbers:
                    # S·ªë ch∆∞a tr√πng
                    row_display.append(f"`{num:2d}`")
            player_nums_marked += " ".join(row_display) + "\n"

        result_embed.add_field(name="üéüÔ∏è V√© s·ªë c·ªßa b·∫°n", value=player_nums_marked, inline=False)

        # Hi·ªÉn th·ªã s·ªë ƒë√£ quay v·ªõi animation
        drawn_str = " ".join([f"{ball_emojis[j % len(ball_emojis)]} `{num}`" for j, num in enumerate(drawn_numbers)])
        result_embed.add_field(name="üé≤ S·ªë ƒë√£ quay", value=drawn_str, inline=False)

        # Hi·ªÉn th·ªã s·ªë tr√πng hi·ªán t·∫°i
        current_matches = set(drawn_numbers) & set(player_numbers)
        if current_matches:
            match_str = " ".join([f"**`{num}`**" for num in sorted(current_matches)])
            result_embed.add_field(name=f"‚ú® S·ªë tr√πng ({len(current_matches)}/5)", value=match_str, inline=False)

        # Animation cho s·ªë v·ª´a quay
        for k in range(3):
            if k % 2 == 0:
                result_embed.title = f"üéØ Ping Go - S·ªë th·ª© {i+1}: {ball_emojis[i]} **`{winning_numbers[i]}`**!"
            else:
                result_embed.title = f"üéØ Ping Go - S·ªë th·ª© {i+1}: {ball_emojis[i]} `{winning_numbers[i]}`!"

            await message.edit(embed=result_embed)
            await asyncio.sleep(0.3)

        await asyncio.sleep(1)

    # Hi·ªáu ·ª©ng k·∫øt th√∫c tƒÉng d·∫ßn k·ªãch t√≠nh
    await asyncio.sleep(0.5)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng v·ªõi hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát d·ª±a v√†o s·ªë l∆∞·ª£ng tr√πng
    if match_count >= 5:
        # Hi·ªáu ·ª©ng Jackpot
        for i in range(3):
            jackpot_colors = [discord.Color.gold(), discord.Color.red(), discord.Color.green()]
            jackpot_emojis = ["üéâ", "üí∞", "üèÜ"]

            jackpot_embed = discord.Embed(
                title=f"{jackpot_emojis[i % 3]} JACKPOT! {jackpot_emojis[i % 3]}",
                description=f"üéä **CHI·∫æN TH·∫ÆNG T·ªêI ƒêA!** üéä\n{ctx.author.mention} ƒë√£ tr√πng {match_count}/5 s·ªë!",
                color=jackpot_colors[i % 3])

            # Th√™m hi·ªáu ·ª©ng rung cho text
            padding = " " * (i % 2)
            jackpot_embed.add_field(
                name=f"{padding}üí∏ JACKPOT X10! üí∏{padding}",
                value=f"B·∫°n ƒë√£ th·∫Øng **{bet * 10} xu**!", 
                inline=False)

            await message.edit(embed=jackpot_embed)
            await asyncio.sleep(0.7)

    # T·∫°o k·∫øt qu·∫£ cu·ªëi c√πng
    # X√°c ƒë·ªãnh k·∫øt qu·∫£ v√† ph·∫ßn th∆∞·ªüng
    if match_count >= 5:
        winnings = bet * 10
        result_text = f"üèÜ JACKPOT! B·∫°n ƒë√£ tr√∫ng {match_count}/5 s·ªë!"
        color = discord.Color.gold()
        currency[user_id] += winnings - bet
        win_emoji = "üéä"
    elif match_count == 4:
        winnings = bet * 3
        result_text = f"üéâ TH·∫ÆNG L·ªöN! B·∫°n ƒë√£ tr√∫ng 4/5 s·ªë!"
        color = discord.Color.purple()
        currency[user_id] += winnings - bet
        win_emoji = "üéâ"
    elif match_count == 3:
        winnings = int(bet * 1.5)
        result_text = f"‚ú® TH·∫ÆNG! B·∫°n ƒë√£ tr√∫ng 3/5 s·ªë!"
        color = discord.Color.green()
        currency[user_id] += winnings - bet
        win_emoji = "‚ú®"
    else:
        winnings = 0
        result_text = f"‚ùå Ti·∫øc qu√°! B·∫°n ch·ªâ tr√∫ng {match_count}/5 s·ªë."
        color = discord.Color.red()
        currency[user_id] -= bet
        win_emoji = "üò¢"

    final_embed = discord.Embed(
        title=f"{win_emoji} Ping Go - K·∫øt qu·∫£ cu·ªëi c√πng {win_emoji}",
        description=result_text,
        color=color)

    # Hi·ªÉn th·ªã v√© s·ªë c·ªßa ng∆∞·ªùi ch∆°i v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp
    player_nums_marked = ""
    for i in range(0, len(player_nums_sorted), 5):
        row = player_nums_sorted[i:i+5]
        row_display = []
        for num in row:
            if num in matching_numbers:
                # S·ªë tr√πng 
                row_display.append(f"**`{num:2d}`**")
            else:
                # S·ªë kh√¥ng tr√πng
                row_display.append(f"`{num:2d}`")
        player_nums_marked += " ".join(row_display) + "\n"

    final_embed.add_field(name="üéüÔ∏è V√© s·ªë c·ªßa b·∫°n", value=player_nums_marked, inline=False)

    # Hi·ªÉn th·ªã s·ªë tr√∫ng th∆∞·ªüng v√† s·ªë tr√πng
    winning_nums_display = " ".join([f"{ball_emojis[i % len(ball_emojis)]} `{num}`" for i, num in enumerate(sorted(winning_numbers))])
    final_embed.add_field(name="üé≤ S·ªë tr√∫ng th∆∞·ªüng", value=winning_nums_display, inline=False)

    # Hi·ªÉn th·ªã s·ªë tr√πng
    if matching_numbers:
        matching_nums_display = " ".join([f"**`{num}`**" for num in sorted(matching_numbers)])
        final_embed.add_field(name=f"‚úÖ S·ªë tr√πng ({match_count}/5)", 
                              value=matching_nums_display, 
                              inline=False)
    else:
        final_embed.add_field(name="‚ùå S·ªë tr√πng (0/5)", 
                              value="Kh√¥ng c√≥ s·ªë n√†o tr√πng", 
                              inline=False)

    # Hi·ªÉn th·ªã th√¥ng tin th·∫Øng thua
    if match_count >= 3:
        multiplier = "x1.5" if match_count == 3 else "x3" if match_count == 4 else "x10"
        final_embed.add_field(name="üí∞ Ti·ªÅn th·∫Øng", 
                              value=f"+{winnings} xu ({multiplier})", 
                              inline=True)
    else:
        final_embed.add_field(name="üí∏ Ti·ªÅn thua", 
                              value=f"-{bet} xu", 
                              inline=True)

    final_embed.add_field(name="üíº S·ªë d∆∞ hi·ªán t·∫°i", 
                          value=f"{currency[user_id]} xu", 
                          inline=True)

    # Ti·∫øn ƒë·ªô ƒë·∫°t ƒë∆∞·ª£c
    progress = "üü•" * match_count + "‚¨ú" * (5 - match_count)
    final_embed.add_field(name="üìä Ti·∫øn ƒë·ªô th·∫Øng", 
                          value=f"{progress}", 
                          inline=False)

    # Set footer t√πy theo k·∫øt qu·∫£
    if match_count >= 5:
        final_embed.set_footer(text="üéä JACKPOT! Xin ch√∫c m·ª´ng chi·∫øn th·∫Øng tuy·ªát v·ªùi! üéä")
    elif match_count >= 3:
        final_embed.set_footer(text="üéâ Ch√∫c m·ª´ng! H√£y th·ª≠ l·∫°i ƒë·ªÉ gi√†nh Jackpot!")
    else:
        final_embed.set_footer(text="üò¢ H√£y th·ª≠ l·∫°i v·∫≠n may c·ªßa b·∫°n!")

    await message.edit(embed=final_embed)


# 4. Th√™m tr√≤ ch∆°i M·∫≠u Binh
@bot.command(name='maubinh', aliases=['mb'])
@check_channel()
@check_game_enabled('maubinh')
async def mau_binh(ctx, bet: str = None):
    """Tr√≤ ch∆°i M·∫≠u Binh ƒë∆°n gi·∫£n"""
    if bet is None:
        embed = discord.Embed(
            title="üÉè M·∫≠u Binh - H∆∞·ªõng D·∫´n",
            description=
            "H√£y nh·∫≠p s·ªë xu mu·ªën c∆∞·ª£c ƒë·ªÉ ch∆°i M·∫≠u Binh.\nV√≠ d·ª•: `.maubinh 50` ho·∫∑c `.maubinh all`",
            color=discord.Color.blue())
        embed.add_field(
            name="Lu·∫≠t ch∆°i",
            value=
            "- Bot s·∫Ω chia cho b·∫°n v√† bot m·ªói ng∆∞·ªùi 13 l√°\n- T·ª± ƒë·ªông x·∫øp th√†nh 3 chi: chi d∆∞·ªõi (5 l√°), chi gi·ªØa (5 l√°) v√† chi tr√™n (3 l√°)\n- Ng∆∞·ªùi c√≥ nhi·ªÅu chi th·∫Øng h∆°n s·∫Ω chi·∫øn th·∫Øng",
            inline=False)
        embed.add_field(name="Ph·∫ßn th∆∞·ªüng",
                        value="- Th·∫Øng: x1.8 ti·ªÅn c∆∞·ª£c",
                        inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if bet_amount <= 0:
        embed = discord.Embed(title="üÉè M·∫≠u Binh",
                              description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0 xu.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[user_id] < bet_amount:
        embed = discord.Embed(
            title="üÉè M·∫≠u Binh",
            description=
            f"{ctx.author.mention}, b·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c! B·∫°n hi·ªán c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # T·∫°o b·ªô b√†i
    suits = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è']
    cards = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
    values = {
        '2': 2,
        '3': 3,
        '4': 4,
        '5': 5,
        '6': 6,
        '7': 7,
        '8': 8,
        '9': 9,
        '10': 10,
        'J': 11,
        'Q': 12,
        'K': 13,
        'A': 14
    }

    # T·∫°o v√† tr·ªôn b·ªô b√†i
    deck = [(card, suit) for suit in suits for card in cards]
    random.shuffle(deck)

    # Chia b√†i
    player_hand = [deck.pop() for _ in range(13)]
    bot_hand = [deck.pop() for _ in range(13)]

    # S·∫Øp x·∫øp b√†i theo gi√° tr·ªã
    player_hand.sort(key=lambda x: values[x[0]])
    bot_hand.sort(key=lambda x: values[x[0]])

    # T·∫°o th√¥ng b√°o chia b√†i v·ªõi hi·ªáu ·ª©ng
    loading_message = await ctx.send("üÉè **Chu·∫©n b·ªã chia b√†i M·∫≠u Binh...**")
    await asyncio.sleep(1)

    # Hi·ªáu ·ª©ng chia b√†i t·ª´ng l√°
    for i in range(1, 14):
        await loading_message.edit(content=f"üÉè **ƒêang chia b√†i ({i}/13)...**")
        await asyncio.sleep(0.3)

    await loading_message.edit(content="üÉè **ƒêang x·∫øp b√†i th√†nh 3 chi...**")
    await asyncio.sleep(1.5)

    # Chia b√†i th√†nh 3 chi
    player_bottom = player_hand[:5]  # 5 l√° chi d∆∞·ªõi
    player_middle = player_hand[5:10]  # 5 l√° chi gi·ªØa
    player_top = player_hand[10:]  # 3 l√° chi tr√™n

    bot_bottom = bot_hand[:5]  # 5 l√° chi d∆∞·ªõi
    bot_middle = bot_hand[5:10]  # 5 l√° chi gi·ªØa
    bot_top = bot_hand[10:]  # 3 l√° chi tr√™n

    # Format b√†i cho hi·ªÉn th·ªã
    def format_cards(cards):
        return " ".join(f"{card}{suit}" for card, suit in cards)

    # Hi·ªÉn th·ªã b√†i c·ªßa ng∆∞·ªùi ch∆°i theo chi
    player_display = (
        f"**Chi d∆∞·ªõi (5 l√°):** {format_cards(player_bottom)}\n"
        f"**Chi gi·ªØa (5 l√°):** {format_cards(player_middle)}\n"
        f"**Chi tr√™n (3 l√°):** {format_cards(player_top)}"
    )

    # Hi·ªÉn th·ªã b√†i c·ªßa bot theo chi (·∫©n chi tr√™n v√† chi gi·ªØa)
    bot_display_hidden = (
        f"**Chi d∆∞·ªõi (5 l√°):** {format_cards(bot_bottom)}\n"
        f"**Chi gi·ªØa (5 l√°):** üÇ† üÇ† üÇ† üÇ† üÇ†\n"
        f"**Chi tr√™n (3 l√°):** üÇ† üÇ† üÇ†"
    )

    # T√≠nh ƒëi·ªÉm cho c√°c chi
    def calculate_chi_value(cards):
        # ƒê√¢y l√† m·ªôt phi√™n b·∫£n ƒë∆°n gi·∫£n, th·ª±c t·∫ø s·∫Ω c·∫ßn x√°c ƒë·ªãnh c√°c b·ªô b√†i nh∆∞ ƒë√¥i, ba l√°, s·∫£nh, th√πng, etc.
        return sum(values[card[0]] for card in cards)

    player_bottom_value = calculate_chi_value(player_bottom)
    player_middle_value = calculate_chi_value(player_middle)
    player_top_value = calculate_chi_value(player_top)

    bot_bottom_value = calculate_chi_value(bot_bottom)
    bot_middle_value = calculate_chi_value(bot_middle)
    bot_top_value = calculate_chi_value(bot_top)

    # X√°c ƒë·ªãnh th·∫Øng thua cho t·ª´ng chi
    player_wins = 0
    bot_wins = 0

    # So s√°nh chi d∆∞·ªõi
    if player_bottom_value > bot_bottom_value:
        player_wins += 1
    else:
        bot_wins += 1

    # So s√°nh chi gi·ªØa
    if player_middle_value > bot_middle_value:
        player_wins += 1
    else:
        bot_wins += 1

    # So s√°nh chi tr√™n
    if player_top_value > bot_top_value:
        player_wins += 1
    else:
        bot_wins += 1

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë·∫ßu ti√™n (ch·ªâ hi·ªÉn th·ªã b√†i ng∆∞·ªùi ch∆°i)
    initial_embed = discord.Embed(
        title="üÉè M·∫≠u Binh - B√†i C·ªßa B·∫°n",
        description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c {bet_amount} xu.",
        color=discord.Color.blue())

    initial_embed.add_field(name="B√†i c·ªßa b·∫°n", value=player_display, inline=False)
    initial_embed.add_field(name="B√†i c·ªßa bot (ƒëang ·∫©n)", value="Chi c·ªßa bot ƒëang ƒë∆∞·ª£c ·∫©n...", inline=False)
    initial_embed.set_footer(text="ƒêang so s√°nh c√°c chi...")

    await loading_message.edit(content=None, embed=initial_embed)
    await asyncio.sleep(2)

    # Hi·ªáu ·ª©ng so s√°nh t·ª´ng chi
    comparison_results = []

    # So s√°nh chi d∆∞·ªõi
    bottom_comparison = discord.Embed(
        title="üÉè M·∫≠u Binh - So S√°nh Chi D∆∞·ªõi",
        description=f"ƒêang so s√°nh chi d∆∞·ªõi c·ªßa {ctx.author.mention} v√† bot.",
        color=discord.Color.gold())

    bottom_comparison.add_field(
        name="Chi d∆∞·ªõi c·ªßa b·∫°n", 
        value=f"{format_cards(player_bottom)}\nGi√° tr·ªã: {player_bottom_value}", 
        inline=True)

    bottom_comparison.add_field(
        name="Chi d∆∞·ªõi c·ªßa bot", 
        value=f"{format_cards(bot_bottom)}\nGi√° tr·ªã: {bot_bottom_value}", 
        inline=True)

    bottom_result = "B·∫†N TH·∫ÆNG üéâ" if player_bottom_value > bot_bottom_value else "BOT TH·∫ÆNG ‚ùå"
    bottom_comparison.add_field(name="K·∫øt qu·∫£", value=bottom_result, inline=False)

    await loading_message.edit(embed=bottom_comparison)
    await asyncio.sleep(2)

    # So s√°nh chi gi·ªØa
    middle_comparison = discord.Embed(
        title="üÉè M·∫≠u Binh - So S√°nh Chi Gi·ªØa",
        description=f"ƒêang so s√°nh chi gi·ªØa c·ªßa {ctx.author.mention} v√† bot.",
        color=discord.Color.gold())

    middle_comparison.add_field(
        name="Chi gi·ªØa c·ªßa b·∫°n", 
        value=f"{format_cards(player_middle)}\nGi√° tr·ªã: {player_middle_value}", 
        inline=True)

    middle_comparison.add_field(
        name="Chi gi·ªØa c·ªßa bot", 
        value=f"{format_cards(bot_middle)}\nGi√° tr·ªã: {bot_middle_value}", 
        inline=True)

    middle_result = "B·∫†N TH·∫ÆNG üéâ" if player_middle_value > bot_middle_value else "BOT TH·∫ÆNG ‚ùå"
    middle_comparison.add_field(name="K·∫øt qu·∫£", value=middle_result, inline=False)

    await loading_message.edit(embed=middle_comparison)
    await asyncio.sleep(2)

    # So s√°nh chi tr√™n
    top_comparison = discord.Embed(
        title="üÉè M·∫≠u Binh - So S√°nh Chi Tr√™n",
        description=f"ƒêang so s√°nh chi tr√™n c·ªßa {ctx.author.mention} v√† bot.",
        color=discord.Color.gold())

    top_comparison.add_field(
        name="Chi tr√™n c·ªßa b·∫°n", 
        value=f"{format_cards(player_top)}\nGi√° tr·ªã: {player_top_value}", 
        inline=True)

    top_comparison.add_field(
        name="Chi tr√™n c·ªßa bot", 
        value=f"{format_cards(bot_top)}\nGi√° tr·ªã: {bot_top_value}", 
        inline=True)

    top_result = "B·∫†N TH·∫ÆNG üéâ" if player_top_value > bot_top_value else "BOT TH·∫ÆNG ‚ùå"
    top_comparison.add_field(name="K·∫øt qu·∫£", value=top_result, inline=False)

    await loading_message.edit(embed=top_comparison)
    await asyncio.sleep(2)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    # Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß b√†i c·ªßa bot
    bot_display_full = (
        f"**Chi d∆∞·ªõi (5 l√°):** {format_cards(bot_bottom)}\n"
        f"**Chi gi·ªØa (5 l√°):** {format_cards(bot_middle)}\n"
        f"**Chi tr√™n (3 l√°):** {format_cards(bot_top)}"
    )

    # X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng cu·ªôc t·ªïng th·ªÉ
    if player_wins > bot_wins:
        # Ng∆∞·ªùi ch∆°i th·∫Øng
        winnings = int(bet_amount * 1.8)
        currency[user_id] += winnings - bet_amount

        # Hi·ªáu ·ª©ng tr∆∞·ªõc k·∫øt qu·∫£ cu·ªëi
        for i in range(3):
            win_color = [discord.Color.gold(), discord.Color.green(), discord.Color.purple()][i % 3]
            win_title = ["üéâ CHI·∫æN TH·∫ÆNG!", "üèÜ B·∫†N TH·∫ÆNG!", "üí∞ TH·∫ÆNG L·ªöN!"][i % 3]

            win_embed = discord.Embed(
                title=win_title,
                description=f"{ctx.author.mention} ƒë√£ th·∫Øng trong M·∫≠u Binh v·ªõi t·ªâ s·ªë {player_wins}-{bot_wins}!",
                color=win_color)

            win_embed.add_field(name="Chi th·∫Øng c·ªßa b·∫°n", value=f"**{player_wins}/3**", inline=True)
            win_embed.add_field(name="Chi th·∫Øng c·ªßa bot", value=f"**{bot_wins}/3**", inline=True)

            win_embed.set_footer(text=f"{'üéä ' * (i+1)} ƒêang t√≠nh ti·ªÅn th∆∞·ªüng... {'üéä ' * (i+1)}")
            await loading_message.edit(embed=win_embed)
            await asyncio.sleep(0.7)

        # K·∫øt qu·∫£ chi·∫øn th·∫Øng cu·ªëi c√πng
        result_embed = discord.Embed(
            title="üéâ CHI·∫æN TH·∫ÆNG! üéâ",
            description=f"{ctx.author.mention} ƒë√£ th·∫Øng trong M·∫≠u Binh v·ªõi t·ªâ s·ªë {player_wins}-{bot_wins}!",
            color=discord.Color.gold())

        result_embed.add_field(name="B√†i c·ªßa b·∫°n", value=player_display, inline=False)
        result_embed.add_field(name="B√†i c·ªßa bot", value=bot_display_full, inline=False)

        result_embed.add_field(name="Chi th·∫Øng c·ªßa b·∫°n", value=f"**{player_wins}/3**", inline=True)
        result_embed.add_field(name="Chi th·∫Øng c·ªßa bot", value=f"**{bot_wins}/3**", inline=True)

        result_embed.add_field(name="Ti·ªÅn th·∫Øng", value=f"+{winnings} xu (x1.8)", inline=True)
        result_embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i", value=f"{currency[user_id]} xu", inline=True)
        result_embed.set_footer(text="üéä Ch√∫c m·ª´ng chi·∫øn th·∫Øng! üéä")

    else:
        # Bot th·∫Øng
        currency[user_id] -= bet_amount

        # Hi·ªáu ·ª©ng thua cu·ªôc
        for i in range(2):
            lose_color = discord.Color.red() if i % 2 == 0 else discord.Color.dark_red()

            lose_embed = discord.Embed(
                title="‚ùå THUA CU·ªòC!" if i % 2 == 0 else "üí∏ B·∫†N THUA!",
                description=f"{ctx.author.mention} ƒë√£ thua trong M·∫≠u Binh v·ªõi t·ªâ s·ªë {player_wins}-{bot_wins}!",
                color=lose_color)

            lose_embed.add_field(name="Chi th·∫Øng c·ªßa b·∫°n", value=f"**{player_wins}/3**", inline=True)
            lose_embed.add_field(name="Chi th·∫Øng c·ªßa bot", value=f"**{bot_wins}/3**", inline=True)

            lose_embed.set_footer(text="ƒêang t√≠nh ti·ªÅn thua...")
            await loading_message.edit(embed=lose_embed)
            await asyncio.sleep(0.7)

        # K·∫øt qu·∫£ thua cu·ªôc cu·ªëi c√πng
        result_embed = discord.Embed(
            title="‚ùå THUA CU·ªòC! ‚ùå",
            description=f"{ctx.author.mention} ƒë√£ thua trong M·∫≠u Binh v·ªõi t·ªâ s·ªë {player_wins}-{bot_wins}!",
            color=discord.Color.dark_red())

        result_embed.add_field(name="B√†i c·ªßa b·∫°n", value=player_display, inline=False)
        result_embed.add_field(name="B√†i c·ªßa bot", value=bot_display_full, inline=False)

        result_embed.add_field(name="Chi th·∫Øng c·ªßa b·∫°n", value=f"**{player_wins}/3**", inline=True)
        result_embed.add_field(name="Chi th·∫Øng c·ªßa bot", value=f"**{bot_wins}/3**", inline=True)

        result_embed.add_field(name="Thi·ªát h·∫°i", value=f"-{bet_amount} xu", inline=True)
        result_embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i", value=f"{currency[user_id]} xu", inline=True)
        result_embed.set_footer(text="üò¢ Ch√∫c may m·∫Øn l·∫ßn sau!")

    await loading_message.edit(embed=result_embed)


# 5. Th√™m tr√≤ ch∆°i L√¥ T√¥
@bot.command(name='loto', aliases=['lt'])
@check_channel()
@check_game_enabled('loto')
async def loto(ctx, bet: str = None):
    """Tr√≤ ch∆°i L√¥ T√¥ v·ªõi hi·ªáu ·ª©ng ƒë·∫πp m·∫Øt"""
    if bet is None:
        embed = discord.Embed(
            title="üé± L√¥ T√¥ - H∆∞·ªõng D·∫´n",
            description=
            "H√£y nh·∫≠p s·ªë xu mu·ªën c∆∞·ª£c ƒë·ªÉ ch∆°i L√¥ T√¥.\nV√≠ d·ª•: `.loto 50` ho·∫∑c `.loto all`",
            color=discord.Color.blue())
        embed.add_field(
            name="Lu·∫≠t ch∆°i",
            value=
            "- Bot s·∫Ω quay 5 s·ªë ng·∫´u nhi√™n t·ª´ 1-90\n- B·∫°n nh·∫≠n m·ªôt v√© v·ªõi 15 s·ªë ng·∫´u nhi√™n\n- Tr√πng c√†ng nhi·ªÅu s·ªë, th∆∞·ªüng c√†ng cao",
            inline=False)
        embed.add_field(
            name="Ph·∫ßn th∆∞·ªüng",
            value=
            "- Tr√πng 2 s·ªë: Ho√†n ti·ªÅn\n- Tr√πng 3 s·ªë: x2 ti·ªÅn c∆∞·ª£c\n- Tr√πng 4 s·ªë: x5 ti·ªÅn c∆∞·ª£c\n- Tr√πng 5 s·ªë: x10 ti·ªÅn c∆∞·ª£c",
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if bet_amount <= 0:
        embed = discord.Embed(title="üé± L√¥ T√¥",
                              description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0 xu.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[user_id] < bet_amount:
        embed = discord.Embed(
            title="üé± L√¥ T√¥",
            description=
            f"{ctx.author.mention}, b·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c! B·∫°n hi·ªán c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # T·∫°o s·ªë ng·∫´u nhi√™n
    all_numbers = list(range(1, 91))
    drawn_numbers = random.sample(all_numbers, 5)  # 5 s·ªë quay
    player_ticket = random.sample(all_numbers, 15)  # 15 s·ªë tr√™n v√© - tƒÉng t·ª´ 10 l√™n 15 ƒë·ªÉ tƒÉng kh·∫£ nƒÉng tr√∫ng

    # T√¨m s·ªë tr√πng
    matching_numbers = set(drawn_numbers) & set(player_ticket)

    # Hi·ªÉn th·ªã v√© s·ªë theo d·∫°ng b·∫£ng 5x3
    def format_ticket_grid(ticket):
        sorted_ticket = sorted(ticket)
        rows = []

        # T·∫°o grid 5x3
        for i in range(0, len(sorted_ticket), 5):
            end_idx = min(i + 5, len(sorted_ticket))
            row = sorted_ticket[i:end_idx]
            # Format m·ªói s·ªë v·ªõi padding ƒë·ªÉ ƒë·ªÅu nhau
            rows.append(" ".join(f"`{num:2d}`" for num in row))

        return "\n".join(rows)

    # Hi·ªÉn th·ªã hi·ªáu ·ª©ng b·∫Øt ƒë·∫ßu game
    ball_emojis = ["üî¥", "üü†", "üü°", "üü¢", "üîµ"]
    colors = [discord.Color.red(), discord.Color.orange(), discord.Color.gold(), 
              discord.Color.green(), discord.Color.blue()]

    # T·∫°o embed ban ƒë·∫ßu
    initial_embed = discord.Embed(
        title="üé± L√¥ T√¥ - B·∫Øt ƒë·∫ßu quay s·ªë",
        description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c {bet_amount} xu.",
        color=discord.Color.blue())

    ticket_display = format_ticket_grid(player_ticket)
    initial_embed.add_field(name="üé´ V√â S·ªê C·ª¶A B·∫†N", value=ticket_display, inline=False)
    initial_embed.add_field(name="‚è≥ TR·∫†NG TH√ÅI", value="ƒêang chu·∫©n b·ªã quay s·ªë...", inline=False)
    initial_embed.set_footer(text="Tr√πng t·ª´ 2 s·ªë tr·ªü l√™n ƒë·ªÉ nh·∫≠n th∆∞·ªüng!")

    message = await ctx.send(embed=initial_embed)
    await asyncio.sleep(1.5)

    # Animation l·ªìng tr·ªëng quay s·ªë
    for i in range(3):
        drum_embed = discord.Embed(
            title=f"üé± L√¥ T√¥ - L·ªìng tr·ªëng ƒëang quay{'.' * (i+1)}",
            description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c {bet_amount} xu.",
            color=discord.Color.gold())

        drum_embed.add_field(name="üé´ V√â S·ªê C·ª¶A B·∫†N", value=ticket_display, inline=False)

        # Animation hi·ªÉn th·ªã tr·ªëng ƒëang quay
        spinning = ["üé≤ üé≤ üé≤", "üéØ üéØ üéØ", "üé™ üé™ üé™"]
        drum_embed.add_field(
            name="üé∞ L·ªíNG TR·ªêNG ƒêANG QUAY",
            value=spinning[i % len(spinning)],
            inline=False)

        await message.edit(embed=drum_embed)
        await asyncio.sleep(0.8)

    # Quay v√† hi·ªÉn th·ªã t·ª´ng s·ªë v·ªõi animation ƒë·∫πp m·∫Øt
    drawn_so_far = []

    for i, num in enumerate(drawn_numbers):
        # Th√™m s·ªë m·ªõi v√†o danh s√°ch ƒë√£ quay
        drawn_so_far.append(num)
        current_color = colors[i % len(colors)]
        current_emoji = ball_emojis[i % len(ball_emojis)]

        # Hi·ªáu ·ª©ng tr∆∞·ªõc khi hi·ªán s·ªë
        for _ in range(2):
            pre_draw_embed = discord.Embed(
                title=f"üé± L√¥ T√¥ - ƒêang quay s·ªë {i+1}/5",
                description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c {bet_amount} xu.",
                color=current_color)

            pre_draw_embed.add_field(name="üé´ V√â S·ªê C·ª¶A B·∫†N", value=ticket_display, inline=False)

            # Hi·ªÉn th·ªã s·ªë ƒë√£ quay
            if drawn_so_far[:-1]:  # Hi·ªÉn th·ªã t·∫•t c·∫£ tr·ª´ s·ªë m·ªõi nh·∫•t
                previous_numbers = " ".join(f"{ball_emojis[idx % len(ball_emojis)]} `{n:2d}`" 
                                          for idx, n in enumerate(drawn_so_far[:-1]))
                pre_draw_embed.add_field(name="üé≤ S·ªê ƒê√É QUAY", value=previous_numbers, inline=False)

            # Hi·ªáu ·ª©ng quay s·ªë
            pre_draw_embed.add_field(
                name="‚è≥ ƒêANG QUAY S·ªê...",
                value=f"{'üîÑ' * (_ % 3 + 1)}",
                inline=False)

            await message.edit(embed=pre_draw_embed)
            await asyncio.sleep(0.5)

        # Hi·ªÉn th·ªã s·ªë m·ªõi quay
        new_number_embed = discord.Embed(
            title=f"üé± L√¥ T√¥ - S·ªë th·ª© {i+1}: {current_emoji} {num}!",
            description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c {bet_amount} xu.",
            color=current_color)

        # C·∫≠p nh·∫≠t v√© s·ªë, ƒë√°nh d·∫•u s·ªë tr√∫ng
        marked_ticket = []
        for ticket_num in sorted(player_ticket):
            if ticket_num in drawn_so_far and ticket_num == num:
                # S·ªë v·ª´a m·ªõi tr√∫ng
                marked_ticket.append(f"**`{ticket_num:2d}`**")
            elif ticket_num in drawn_so_far:
                # S·ªë ƒë√£ tr√∫ng t·ª´ tr∆∞·ªõc
                marked_ticket.append(f"**`{ticket_num:2d}`**")
            else:
                # S·ªë ch∆∞a tr√∫ng
                marked_ticket.append(f"`{ticket_num:2d}`")

        # Format l·∫°i v√© theo grid 5x3
        marked_ticket_display = ""
        for j in range(0, len(marked_ticket), 5):
            end_idx = min(j + 5, len(marked_ticket))
            marked_ticket_display += " ".join(marked_ticket[j:end_idx]) + "\n"

        new_number_embed.add_field(name="üé´ V√â S·ªê C·ª¶A B·∫†N", value=marked_ticket_display, inline=False)

        # Hi·ªÉn th·ªã t·∫•t c·∫£ s·ªë ƒë√£ quay
        all_drawn = " ".join(f"{ball_emojis[idx % len(ball_emojis)]} `{n:2d}`" 
                            for idx, n in enumerate(drawn_so_far))
        new_number_embed.add_field(name="üé≤ S·ªê ƒê√É QUAY", value=all_drawn, inline=False)

        # Hi·ªÉn th·ªã s·ªë tr√πng hi·ªán t·∫°i
        current_matches = set(drawn_so_far) & set(player_ticket)
        if current_matches:
            match_str = " ".join(f"**`{n:2d}`**" for n in sorted(current_matches))
            new_number_embed.add_field(name=f"‚úÖ S·ªê TR√ôNG ({len(current_matches)}/{len(drawn_numbers)})", 
                                      value=match_str, inline=False)

            # Hi·ªÉn th·ªã ti·∫øn tr√¨nh
            if len(current_matches) >= 2:
                progress_value = "Ho√†n ti·ªÅn" if len(current_matches) == 2 else f"x{len(current_matches) - 1}" if len(current_matches) < 5 else "x10"
                new_number_embed.add_field(name="üí∞ TI·∫æN TR√åNH", 
                                         value=f"ƒê√£ tr√πng {len(current_matches)}/5 s·ªë! ({progress_value})", 
                                         inline=False)

        # Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát khi s·ªë v·ª´a quay tr√πng v·ªõi v√©
        if num in player_ticket:
            # Flashing animation cho s·ªë tr√∫ng
            for k in range(3):
                if k % 2 == 0:
                    new_number_embed.title = f"üé± L√¥ T√¥ - üéØ TR√öNG S·ªê {num}! üéØ"
                    new_number_embed.color = discord.Color.green()
                else:
                    new_number_embed.title = f"üé± L√¥ T√¥ - S·ªë th·ª© {i+1}: {current_emoji} {num}!"
                    new_number_embed.color = current_color

                await message.edit(embed=new_number_embed)
                await asyncio.sleep(0.3)
        else:
            await message.edit(embed=new_number_embed)

        await asyncio.sleep(1.2)

    # K·∫øt qu·∫£ cu·ªëi c√πng
    match_count = len(matching_numbers)

    # X√°c ƒë·ªãnh k·∫øt qu·∫£ v√† ph·∫ßn th∆∞·ªüng
    if match_count >= 5:
        winnings = bet_amount * 10
        result_text = f"üéâ JACKPOT! B·∫°n ƒë√£ tr√∫ng {match_count}/5 s·ªë!"
        color = discord.Color.gold()
        currency[user_id] += winnings - bet_amount
        win_emoji = "üèÜ"
    elif match_count == 4:
        winnings = bet_amount * 5
        result_text = f"üéâ TH·∫ÆNG L·ªöN! B·∫°n ƒë√£ tr√∫ng 4/5 s·ªë!"
        color = discord.Color.purple()
        currency[user_id] += winnings - bet_amount
        win_emoji = "üéâ"
    elif match_count == 3:
        winnings = bet_amount * 2
        result_text = f"üéâ TH·∫ÆNG! B·∫°n ƒë√£ tr√∫ng 3/5 s·ªë!"
        color = discord.Color.green()
        currency[user_id] += winnings - bet_amount
        win_emoji = "‚ú®"
    elif match_count == 2:
        winnings = bet_amount
        result_text = f"üîÑ H√íA! B·∫°n ƒë√£ tr√∫ng 2/5 s·ªë!"
        color = discord.Color.blue()
        # ƒê√£ ƒë·∫∑t c∆∞·ª£c bet_amount v√† ƒë∆∞·ª£c ho√†n l·∫°i bet_amount, coi nh∆∞ kh√¥ng m·∫•t ti·ªÅn
        win_emoji = "üîÑ"
    else:
        winnings = 0
        result_text = f"‚ùå THUA CU·ªòC! B·∫°n ch·ªâ tr√∫ng {match_count}/5 s·ªë."
        color = discord.Color.red()
        currency[user_id] -= bet_amount
        win_emoji = "üò¢"

    # Hi·ªáu ·ª©ng chuy·ªÉn ti·∫øp tr∆∞·ªõc khi hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    await asyncio.sleep(0.5)

    # ƒê·ªëi v·ªõi tr∆∞·ªùng h·ª£p JACKPOT, t·∫°o hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát
    if match_count >= 5:
        for i in range(4):
            jackpot_colors = [discord.Color.gold(), discord.Color.red(), discord.Color.green(), discord.Color.purple()]
            jackpot_emojis = ["üéä", "üí∞", "üéØ", "üèÜ"]

            jackpot_embed = discord.Embed(
                title=f"{jackpot_emojis[i]} JACKPOT! {jackpot_emojis[i]}",
                description=f"üéä **CHI·∫æN TH·∫ÆNG T·ªêI ƒêA!** üéä\n{ctx.author.mention} ƒë√£ tr√∫ng {match_count}/5 s·ªë!",
                color=jackpot_colors[i])

            padding = " " * (i % 2)  # Hi·ªáu ·ª©ng ch·ªØ nh·∫•p nh√°y
            jackpot_embed.add_field(
                name=f"{padding}üí∏ JACKPOT X10! üí∏{padding}",
                value=f"B·∫°n ƒë√£ th·∫Øng **{winnings} xu**!",
                inline=False)

            await message.edit(embed=jackpot_embed)
            await asyncio.sleep(0.6)

    # T·∫°o v√© s·ªë ƒë√£ ƒë√°nh d·∫•u s·ªë tr√∫ng cho k·∫øt qu·∫£ cu·ªëi c√πng
    marked_final_ticket = []
    for ticket_num in sorted(player_ticket):
        if ticket_num in matching_numbers:
            marked_final_ticket.append(f"**`{ticket_num:2d}`**")
        else:
            marked_final_ticket.append(f"`{ticket_num:2d}`")

    # Format l·∫°i v√© theo grid 5x3
    final_ticket_display = ""
    for j in range(0, len(marked_final_ticket), 5):
        end_idx = min(j + 5, len(marked_final_ticket))
        final_ticket_display += " ".join(marked_final_ticket[j:end_idx]) + "\n"

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    final_embed = discord.Embed(
        title=f"{win_emoji} L√¥ T√¥ - K·∫øt Qu·∫£ Cu·ªëi C√πng {win_emoji}",
        description=result_text,
        color=color)

    # V√© s·ªë v·ªõi c√°c s·ªë tr√πng ƒë∆∞·ª£c ƒë√°nh d·∫•u
    final_embed.add_field(name="üé´ V√â S·ªê C·ª¶A B·∫†N", 
                         value=final_ticket_display, 
                         inline=False)

    # C√°c s·ªë ƒë√£ quay
    all_drawn_display = " ".join(f"{ball_emojis[i % len(ball_emojis)]} `{num:2d}`" 
                              for i, num in enumerate(sorted(drawn_numbers)))
    final_embed.add_field(name="üé≤ C√ÅC S·ªê ƒê√É QUAY", 
                         value=all_drawn_display, 
                         inline=False)

    # C√°c s·ªë tr√πng
    if matching_numbers:
        matching_nums_display = " ".join(f"**`{num:2d}`**" for num in sorted(matching_numbers))
        final_embed.add_field(name=f"‚úÖ S·ªê TR√ôNG ({match_count}/5)", 
                             value=matching_nums_display, 
                             inline=False)
    else:
        final_embed.add_field(name="‚ùå S·ªê TR√ôNG (0/5)", 
                             value="Kh√¥ng c√≥ s·ªë n√†o tr√πng", 
                             inline=False)

    # Ti·∫øn tr√¨nh ƒë·∫°t ƒë∆∞·ª£c
    progress_bar = "üü•" * match_count + "‚¨õ" * (5 - match_count)
    final_embed.add_field(name="üìä TI·∫æN TR√åNH", 
                         value=progress_bar, 
                         inline=False)

    # K·∫øt qu·∫£ v√† s·ªë d∆∞
    if match_count >= 2:
        if match_count == 2:
            final_embed.add_field(name="üí∞ K·∫æT QU·∫¢", 
                                 value=f"Ho√†n l·∫°i {bet_amount} xu", 
                                 inline=True)
        else:
            multiplier = "x2" if match_count == 3 else "x5" if match_count == 4 else "x10"
            final_embed.add_field(name="üí∞ TI·ªÄN TH·∫ÆNG", 
                                 value=f"+{winnings} xu ({multiplier})", 
                                 inline=True)
    else:
        final_embed.add_field(name="üí∏ TI·ªÄN THUA", 
                             value=f"-{bet_amount} xu", 
                             inline=True)

    final_embed.add_field(name="üíº S·ªê D∆Ø HI·ªÜN T·∫†I", 
                         value=f"{currency[user_id]} xu", 
                         inline=True)

    # Footer ph√π h·ª£p v·ªõi k·∫øt qu·∫£
    if match_count >= 5:
        final_embed.set_footer(text="üéä JACKPOT! Xin ch√∫c m·ª´ng chi·∫øn th·∫Øng tuy·ªát v·ªùi! üéä")
    elif match_count >= 3:
        final_embed.set_footer(text="üéâ Ch√∫c m·ª´ng! H√£y th·ª≠ l·∫°i ƒë·ªÉ gi√†nh Jackpot!")
    elif match_count == 2:
        final_embed.set_footer(text="üîÑ H√≤a v·ªën! H√£y th·ª≠ l·∫°i v·∫≠n may c·ªßa b·∫°n!")
    else:
        final_embed.set_footer(text="üò¢ Ti·∫øc qu√°! H√£y th·ª≠ l·∫°i v·∫≠n may l·∫ßn sau!")

    await message.edit(embed=final_embed)


# Th√™m game tung ƒë·ªìng xu
@bot.command(name='tungxu', aliases=['tx2', 'coinflip'])
@check_channel()
@check_game_enabled('tungxu')
async def coin_flip(ctx, choice: str = None, bet: str = None):
    """Tr√≤ ch∆°i tung ƒë·ªìng xu v·ªõi hi·ªáu ·ª©ng ƒë·∫πp m·∫Øt"""
    if choice is None or bet is None:
        embed = discord.Embed(
            title="ü™ô Tung ƒê·ªìng Xu - H∆∞·ªõng D·∫´n",
            description=
            "H√£y ƒëo√°n m·∫∑t ƒë·ªìng xu v√† ƒë·∫∑t c∆∞·ª£c xu.\nV√≠ d·ª•: `.tungxu n 50` ho·∫∑c `.tungxu s 50`\nB·∫°n c≈©ng c√≥ th·ªÉ ƒë·∫∑t c∆∞·ª£c t·∫•t c·∫£ b·∫±ng l·ªánh `.tungxu n all`",
            color=discord.Color.blue())
        embed.add_field(
            name="Lu·∫≠t ch∆°i",
            value=
            "- Ch·ªçn m·∫∑t ƒë·ªìng xu: ng·ª≠a (n) ho·∫∑c s·∫•p (s)\n- ƒê·∫∑t c∆∞·ª£c s·ªë xu ho·∫∑c 'all' ƒë·ªÉ c∆∞·ª£c t·∫•t c·∫£\n- N·∫øu ƒëo√°n ƒë√∫ng, b·∫°n nh·∫≠n x1.8 ti·ªÅn c∆∞·ª£c\n- N·∫øu ƒëo√°n sai, b·∫°n m·∫•t ti·ªÅn c∆∞·ª£c v√† b·ªã timeout 5 ph√∫t",
            inline=False)
        embed.set_footer(text="Ch∆°i c√≥ tr√°ch nhi·ªám, ƒë·ª´ng ƒë·∫∑t c∆∞·ª£c qu√° nhi·ªÅu!")

        # Th√™m g·ª£i √Ω ng·∫´u nhi√™n
        embed.add_field(name="üí° G·ª£i √Ω",
                        value="T·ªâ l·ªá th·∫Øng tung ƒë·ªìng xu l√† 50/50!",
                        inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # Ki·ªÉm tra cooldown
    can_play, remaining_time = check_cooldown(user_id)
    if not can_play:
        embed = discord.Embed(
            title="‚è≥ Th·ªùi gian ch·ªù",
            description=
            f"B·∫°n c·∫ßn ƒë·ª£i th√™m {remaining_time} gi√¢y tr∆∞·ªõc khi ch∆°i ti·∫øp.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra l·ª±a ch·ªçn
    if choice.lower() not in ['n', 's', 'ngua', 'sap', 'ng·ª≠a', 's·∫•p']:
        embed = discord.Embed(
            title="ü™ô Tung ƒê·ªìng Xu",
            description=
            "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn 'n' (ng·ª≠a) ho·∫∑c 's' (s·∫•p).",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Chuy·ªÉn ƒë·ªïi l·ª±a ch·ªçn
    is_ngua = choice.lower() in ['n', 'ngua', 'ng·ª≠a']
    choice_text = "Ng·ª≠a" if is_ngua else "S·∫•p"
    choice_emoji = "‚¨ÜÔ∏è" if is_ngua else "‚¨áÔ∏è"

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="ü™ô Tung ƒê·ªìng Xu",
            description=
            "S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if bet_amount <= 0:
        embed = discord.Embed(title="ü™ô Tung ƒê·ªìng Xu",
                              description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0 xu.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[user_id] < bet_amount:
        embed = discord.Embed(
            title="ü™ô Tung ƒê·ªìng Xu",
            description=
            f"{ctx.author.mention}, b·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c! B·∫°n hi·ªán c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu ƒëang ƒë·∫∑t c∆∞·ª£c t·∫•t c·∫£
    is_all_in = bet_amount == currency[user_id]

    try:
        # T·∫°o hi·ªáu ·ª©ng chu·∫©n b·ªã tung ƒë·ªìng xu
        start_embed = discord.Embed(
            title="ü™ô TUNG ƒê·ªíNG XU",
            description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**!",
            color=discord.Color.blue())

        start_embed.add_field(name="L·ª±a ch·ªçn", value=f"**{choice_text}** {choice_emoji}", inline=True)
        start_embed.add_field(name="Tr·∫°ng th√°i", value="ƒêang chu·∫©n b·ªã...", inline=True)

        if is_all_in:
            start_embed.add_field(name="‚ö†Ô∏è ALL-IN", value="B·∫°n ƒëang ƒë·∫∑t c∆∞·ª£c t·∫•t c·∫£ xu!", inline=False)

        message = await ctx.send(embed=start_embed)
        await asyncio.sleep(1)

        # Animation ƒë·ªìng xu ƒëang xoay - hi·ªáu ·ª©ng n√¢ng cao
        coin_frames = [
            "```\n  ü™ô  \n     \n```",
            "```\n     \n  ü™ô  \n```",
            "```\n ü™ô   \n     \n```",
            "```\n     \n   ü™ô \n```",
            "```\n  ü™ô  \n     \n```",
            "```\n     \n  ü™ô  \n```"
        ]

        spin_embed = discord.Embed(
            title="ü™ô ƒê·ªíNG XU ƒêANG XOAY",
            description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**!",
            color=discord.Color.gold())

        spin_embed.add_field(name="L·ª±a ch·ªçn", value=f"**{choice_text}** {choice_emoji}", inline=True)
        spin_embed.add_field(name="Xu s·∫Ω r∆°i xu·ªëng trong...", value="‚è±Ô∏è", inline=True)

        for i in range(6):
            spin_embed.set_field_at(1, name="Xu s·∫Ω r∆°i xu·ªëng trong...", value=f"**{6-i}**", inline=True)
            spin_embed.description = coin_frames[i % len(coin_frames)]
            await message.edit(embed=spin_embed)
            await asyncio.sleep(0.5)

        # Animation ƒë·ªìng xu ƒëang quay ch·∫≠m d·∫ßn - hi·ªáu ·ª©ng n√¢ng cao
        slow_embed = discord.Embed(
            title="ü™ô ƒê·ªíNG XU S·∫ÆP D·ª™NG L·∫†I",
            description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**!",
            color=discord.Color.orange())

        slow_embed.add_field(name="L·ª±a ch·ªçn", value=f"**{choice_text}** {choice_emoji}", inline=True)

        for i in range(3):
            # Hi·ªáu ·ª©ng ti·∫øng ƒë·ªìng xu va ch·∫°m
            sounds = ["*Ting!*", "*Cling!*", "*Ding!*"]
            slow_embed.set_field_at(0, name="L·ª±a ch·ªçn", value=f"**{choice_text}** {choice_emoji}\n{sounds[i]}", inline=True)
            await message.edit(embed=slow_embed)
            await asyncio.sleep(0.8)

        # K·∫øt qu·∫£ ng·∫´u nhi√™n (50/50)
        result_is_ngua = random.choice([True, False])

        # Ng∆∞·ªùi ch∆°i th·∫Øng n·∫øu d·ª± ƒëo√°n ƒë√∫ng
        player_won = (is_ngua == result_is_ngua)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        result_text = "NG·ª¨A" if result_is_ngua else "S·∫§P"
        result_emoji = "‚¨ÜÔ∏è" if result_is_ngua else "‚¨áÔ∏è"

        # Hi·ªáu ·ª©ng ƒë·∫øm ng∆∞·ª£c tr∆∞·ªõc khi hi·ªán k·∫øt qu·∫£
        countdown_embed = discord.Embed(
            title="ü™ô K·∫æT QU·∫¢ S·∫ÆP L·ªò DI·ªÜN",
            description="ƒê·ªìng xu ƒë√£ d·ª´ng l·∫°i...",
            color=discord.Color.purple())

        for i in range(3, 0, -1):
            countdown_embed.description = f"ƒê·ªìng xu ƒë√£ d·ª´ng l·∫°i...\nK·∫øt qu·∫£ s·∫Ω hi·ªán ra trong **{i}**..."
            await message.edit(embed=countdown_embed)
            await asyncio.sleep(0.7)

        # Hi·ªáu ·ª©ng nh·∫•p nh√°y k·∫øt qu·∫£
        for i in range(3):
            # ƒê·∫£o m√†u trong hi·ªáu ·ª©ng nh·∫•p nh√°y
            flash_color = discord.Color.green() if player_won else discord.Color.red()
            if i % 2 == 1:
                flash_color = discord.Color.gold()

            flash_embed = discord.Embed(
                title=f"ü™ô K·∫æT QU·∫¢: {result_text} {result_emoji}",
                description=f"{'üéâ TH·∫ÆNG CU·ªòC! üéâ' if player_won else '‚ùå THUA CU·ªòC! ‚ùå'}",
                color=flash_color)

            await message.edit(embed=flash_embed)
            await asyncio.sleep(0.4)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
        if player_won:
            # Ng∆∞·ªùi ch∆°i th·∫Øng
            winnings = int(bet_amount * 1.8)
            currency[user_id] += winnings - bet_amount

            # Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát cho jackpot ho·∫∑c all-in
            if is_all_in:
                # Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát cho all-in
                for i in range(3):
                    jackpot_embed = discord.Embed(
                        title=f"üé∞ ALL-IN {'TH√ÄNH C√îNG' if i % 2 == 0 else 'TH·∫ÆNG L·ªöN'}! üé∞",
                        description=f"WOW! {ctx.author.mention} ƒê√É ALL-IN V√Ä TH·∫ÆNG!",
                        color=discord.Color.gold() if i % 2 == 0 else discord.Color.purple())

                    jackpot_embed.add_field(
                        name=f"{'üí∞ TI·ªÄN TH·∫ÆNG üí∞' if i % 2 == 0 else 'üèÜ PH·∫¶N TH∆Ø·ªûNG üèÜ'}", 
                        value=f"+{winnings} xu (x1.8)", 
                        inline=True)

                    jackpot_embed.add_field(
                        name="K·∫øt qu·∫£ ƒë·ªìng xu", 
                        value=f"**{result_text}** {result_emoji}", 
                        inline=True)

                    await message.edit(embed=jackpot_embed)
                    await asyncio.sleep(0.7)

            # K·∫øt qu·∫£ th·∫Øng cu·ªôc
            win_embed = discord.Embed(
                title="üéâ TH·∫ÆNG CU·ªòC! üéâ",
                description=f"{ctx.author.mention} ƒë√£ ƒëo√°n ƒë√∫ng!",
                color=discord.Color.green())

            win_embed.add_field(
                name="Chi ti·∫øt tr·∫≠n ƒë·∫•u", 
                value=f"**L·ª±a ch·ªçn c·ªßa b·∫°n:** {choice_text} {choice_emoji}\n**K·∫øt qu·∫£ ƒë·ªìng xu:** {result_text} {result_emoji}", 
                inline=False)

            if is_all_in:
                win_embed.add_field(
                    name="üí∞ Ti·ªÅn th·∫Øng", 
                    value=f"+{winnings} xu (x1.8) - ALL IN!", 
                    inline=True)
            else:
                win_embed.add_field(
                    name="üí∞ Ti·ªÅn th·∫Øng", 
                    value=f"+{winnings} xu (x1.8)", 
                    inline=True)

            win_embed.add_field(
                name="üíº S·ªë d∆∞ hi·ªán t·∫°i", 
                value=f"{currency[user_id]} xu", 
                inline=True)

            win_embed.set_footer(text="üçÄ H√¥m nay l√† ng√†y may m·∫Øn c·ªßa b·∫°n!")

            # Th√™m hi·ªáu ·ª©ng ti·ªÅn xu bay l√™n
            coins_animation = "```\n" + \
                              "    üí∞    \n" + \
                              "  üí∞  üí∞  \n" + \
                              "üí∞  ü™ô  üí∞\n" + \
                              "  üí∞  üí∞  \n" + \
                              "    üí∞    \n" + \
                              "```"
            win_embed.description = f"{ctx.author.mention} ƒë√£ ƒëo√°n ƒë√∫ng!\n\n{coins_animation}"

            await message.edit(embed=win_embed)
        else:
            # Ng∆∞·ªùi ch∆°i thua
            currency[user_id] -= bet_amount

            # Hi·ªáu ·ª©ng thua cu·ªôc ƒë·∫∑c bi·ªát
            if is_all_in:
                for i in range(3):
                    disaster_embed = discord.Embed(
                        title=f"üí• ALL-IN {'TH·∫§T B·∫†I' if i % 2 == 0 else 'PH√Å S·∫¢N'}! üí•",
                        description=f"√îi kh√¥ng! {ctx.author.mention} ƒë√£ ALL-IN v√† THUA TR·∫ÆNG!",
                        color=discord.Color.dark_red() if i % 2 == 0 else discord.Color.red())

                    disaster_embed.add_field(
                        name="Thi·ªát h·∫°i n·∫∑ng n·ªÅ", 
                        value=f"-{bet_amount} xu - TO√ÄN B·ªò T√ÄI S·∫¢N!", 
                        inline=True)

                    await message.edit(embed=disaster_embed)
                    await asyncio.sleep(0.7)

            # K·∫øt qu·∫£ thua cu·ªôc
            lose_embed = discord.Embed(
                title="‚ùå THUA CU·ªòC! ‚ùå",
                description=f"{ctx.author.mention} ƒë√£ ƒëo√°n sai v√† s·∫Ω b·ªã timeout 5 ph√∫t!",
                color=discord.Color.dark_red())

            lose_embed.add_field(
                name="Chi ti·∫øt tr·∫≠n ƒë·∫•u", 
                value=f"**L·ª±a ch·ªçn c·ªßa b·∫°n:** {choice_text} {choice_emoji}\n**K·∫øt qu·∫£ ƒë·ªìng xu:** {result_text} {result_emoji}", 
                inline=False)

            if is_all_in:
                lose_embed.add_field(
                    name="üí∏ Thi·ªát h·∫°i", 
                    value=f"-{bet_amount} xu - ALL IN!", 
                    inline=True)
            else:
                lose_embed.add_field(
                    name="üí∏ Thi·ªát h·∫°i", 
                    value=f"-{bet_amount} xu", 
                    inline=True)

            lose_embed.add_field(
                name="üíº S·ªë d∆∞ hi·ªán t·∫°i", 
                value=f"{currency[user_id]} xu", 
                inline=True)

            lose_embed.add_field(
                name="‚è≥ H·ªá qu·∫£", 
                value="B·∫°n s·∫Ω b·ªã timeout trong 5 ph√∫t!", 
                inline=False)

            lose_embed.set_footer(text="üò¢ R·∫•t ti·∫øc! H√£y th·ª≠ l·∫°i v·∫≠n may l·∫ßn sau!")

            # Th√™m hi·ªáu ·ª©ng v·ª° n√°t
            broken_animation = "```\n" + \
                               "  üí•    \n" + \
                               "    üí•  \n" + \
                               "  ü™ô    \n" + \
                               "üí•    üí•\n" + \
                               "    üí•  \n" + \
                               "```"
            lose_embed.description = f"{ctx.author.mention} ƒë√£ ƒëo√°n sai v√† s·∫Ω b·ªã timeout 5 ph√∫t!\n\n{broken_animation}"

            # Timeout ng∆∞·ªùi ch∆°i 5 ph√∫t
            try:
                timeout_until = discord.utils.utcnow() + timedelta(minutes=5)
                await ctx.author.timeout(timeout_until,
                                         reason="Thua tr√≤ ch∆°i Tung ƒê·ªìng Xu")
            except discord.Forbidden:
                await ctx.send("‚ö†Ô∏è Bot kh√¥ng c√≥ quy·ªÅn timeout ng∆∞·ªùi ch∆°i!")
                lose_embed.add_field(name="‚ö†Ô∏è L·ªói", value="Kh√¥ng th·ªÉ timeout ng∆∞·ªùi ch∆°i!", inline=False)
            except Exception as e:
                await ctx.send(f"‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi timeout: {str(e)}")
                lose_embed.add_field(name="‚ö†Ô∏è L·ªói", value=f"L·ªói timeout: {str(e)}", inline=False)

            await message.edit(embed=lose_embed)

    except Exception as e:
        # X·ª≠ l√Ω l·ªói n·∫øu c√≥
        error_embed = discord.Embed(
            title="‚ùå ƒê√£ x·∫£y ra l·ªói",
            description=f"Kh√¥ng th·ªÉ ho√†n th√†nh l·ªánh tung ƒë·ªìng xu: {str(e)}",
            color=discord.Color.red())
        await ctx.send(embed=error_embed)


# C·∫≠p nh·∫≠t l·ªánh tr·ª£ gi√∫p ƒë·ªÉ bao g·ªìm t·∫•t c·∫£ game v√† l·ªánh gi·∫£i tr√≠
@bot.group(name='bothelp', invoke_without_command=True)
async def help_command(ctx):
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n c∆° b·∫£n v·ªõi embed"""
    embed = discord.Embed(
        title="ü§ñ H∆∞·ªõng D·∫´n Bot",
        description=
        f"D√πng `.help [t√™n nh√≥m]` ƒë·ªÉ xem chi ti·∫øt t·ª´ng nh√≥m l·ªánh.\nV√≠ d·ª•: `.help games`",
        color=discord.Color.blue())

    embed.add_field(name="üìú Nh√≥m l·ªánh c√≥ s·∫µn",
                    value="""
        `.help info` - C√°c l·ªánh th√¥ng tin
        `.help currency` - Qu·∫£n l√Ω xu
        `.help games` - Tr√≤ ch∆°i
        `.help admin` - L·ªánh admin
        `.help fun` - L·ªánh gi·∫£i tr√≠
        `.help inventory` - Qu·∫£n l√Ω kho ƒë·ªì
        """,
                    inline=False)

    embed.add_field(
        name="‚ö†Ô∏è L∆∞u √Ω",
        value=f"T·∫•t c·∫£ l·ªánh game ch·ªâ ho·∫°t ƒë·ªông trong <#{GAME_CHANNEL_ID}>",
        inline=False)

    embed.set_footer(text="Bot ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi STV Team")
    await ctx.send(embed=embed)


@help_command.command(name='info')
async def help_info(ctx):
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n l·ªánh th√¥ng tin"""
    embed = discord.Embed(title="üìú L·ªánh Th√¥ng Tin",
                          description="C√°c l·ªánh xem th√¥ng tin c∆° b·∫£n",
                          color=discord.Color.blue())

    embed.add_field(name="L·ªánh c√≥ s·∫µn",
                    value="""
        `.stvh` - Xem h∆∞·ªõng d·∫´n ƒë·∫ßy ƒë·ªß c√°c game
        `.stvgt` - Xem gi·ªõi thi·ªáu v·ªÅ bot
        `.xu` - Ki·ªÉm tra s·ªë xu hi·ªán c√≥
        `.bxhxu` - Xem b·∫£ng x·∫øp h·∫°ng xu
        `.gamechannel` - Xem link k√™nh ch∆°i game
        """,
                    inline=False)

    await ctx.send(embed=embed)


@help_command.command(name='currency')
async def help_currency(ctx):
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n l·ªánh xu"""
    embed = discord.Embed(title="üí∞ Qu·∫£n L√Ω Xu",
                          description="C√°c l·ªánh li√™n quan ƒë·∫øn xu",
                          color=discord.Color.gold())

    embed.add_field(name="L·ªánh c∆° b·∫£n",
                    value="""
        `.dd` - ƒêi·ªÉm danh nh·∫≠n xu h√†ng ng√†y (20-50 xu)
        `.sendxu @ng∆∞·ªùi_d√πng s·ªë_xu` - Chuy·ªÉn xu cho ng∆∞·ªùi kh√°c
        `.xu` - Ki·ªÉm tra s·ªë xu hi·ªán c√≥
        `.bxhxu` - Xem b·∫£ng x·∫øp h·∫°ng xu
        """,
                    inline=False)

    embed.add_field(name="H·ªá th·ªëng ng√¢n h√†ng",
                    value="""
        `.bank g·ª≠i [s·ªë xu]` - G·ª≠i xu v√†o ng√¢n h√†ng (nh·∫≠n l√£i 5% m·ªói ng√†y)
        `.bank r√∫t [s·ªë xu]` - R√∫t xu t·ª´ ng√¢n h√†ng
        `.bank check` - Ki·ªÉm tra s·ªë d∆∞ v√† l√£i ng√¢n h√†ng
        """,
                    inline=False)

    embed.add_field(name="Vay m∆∞·ª£n xu",
                    value="""
        `.vayxu s·ªë_xu` - Vay xu (ph·∫£i tr·∫£ trong 2 gi·ªù)
        `.traxu s·ªë_xu` - Tr·∫£ xu ƒë√£ vay
        """,
                    inline=False)

    embed.add_field(name="K√©t s·∫Øt",
                    value="""
        `.napket s·ªë_xu` - N·∫°p xu v√†o k√©t
        `.rutxu s·ªë_xu` - R√∫t xu t·ª´ k√©t
        `.xemket` - Xem s·ªë xu trong k√©t
        """,
                    inline=False)

    await ctx.send(embed=embed)


@help_command.command(name='admin')
@commands.has_permissions(administrator=True)
async def help_admin(ctx):
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n l·ªánh admin"""
    embed = discord.Embed(title="üëë L·ªánh Admin",
                          description="C√°c l·ªánh d√†nh cho qu·∫£n tr·ªã vi√™n",
                          color=discord.Color.purple())

    embed.add_field(name="Qu·∫£n l√Ω xu",
                    value="""
        `.txu @ng∆∞·ªùi_d√πng s·ªë_xu` - T·∫∑ng xu
        `.trxu @ng∆∞·ªùi_d√πng s·ªë_xu` - Tr·ª´ xu
        `.napxu @ng∆∞·ªùi_d√πng s·ªë_xu` - N·∫°p xu
        `.ktxu @ng∆∞·ªùi_d√πng` - Ki·ªÉm tra xu
        """,
                    inline=False)

    embed.add_field(name="Qu·∫£n l√Ω ng√¢n h√†ng",
                    value="""
        `.bankcheck @ng∆∞·ªùi_d√πng` - Ki·ªÉm tra t√†i kho·∫£n ng√¢n h√†ng c·ªßa ng∆∞·ªùi d√πng
        `.bankxoa @ng∆∞·ªùi_d√πng` - X√≥a t√†i kho·∫£n ng√¢n h√†ng c·ªßa ng∆∞·ªùi d√πng
        `.blbank add @ng∆∞·ªùi_d√πng` - Th√™m ng∆∞·ªùi d√πng v√†o blacklist ng√¢n h√†ng
        `.blbank remove @ng∆∞·ªùi_d√πng` - X√≥a ng∆∞·ªùi d√πng kh·ªèi blacklist ng√¢n h√†ng
        """,
                    inline=False)

    embed.add_field(name="Qu·∫£n l√Ω k√©t s·∫Øt",
                    value="""
        `.ad_xemket @ng∆∞·ªùi_d√πng` - Xem k√©t ng∆∞·ªùi d√πng
        `.ad_xoaket @ng∆∞·ªùi_d√πng` - X√≥a k√©t ng∆∞·ªùi d√πng
        """,
                    inline=False)

    embed.add_field(name="Qu·∫£n l√Ω drop xu",
                    value="""
        `.dropxu s·ªë_xu tin_nh·∫Øn` - T·∫°o drop xu
        `.stopdrop ID_tin_nh·∫Øn` - D·ª´ng drop xu
        """,
                    inline=False)

    embed.add_field(name="Qu·∫£n l√Ω server",
                    value="""
        `.nuke #k√™nh` - X√≥a v√† t·∫°o l·∫°i k√™nh
        `.stvdis t√™n_game` - B·∫≠t/t·∫Øt game
        `.stvdis all` - B·∫≠t/t·∫Øt t·∫•t c·∫£ game
        """,
                    inline=False)

    await ctx.send(embed=embed)


@bot.command(name='stvh')
@check_channel()
async def myhelp(ctx):
    """Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c l·ªánh c√≥ s·∫µn v√† c√°ch s·ª≠ d·ª•ng v·ªõi h·ªá th·ªëng ph√¢n trang"""
    # T·∫°o m·ªôt g·ª£i √Ω ng·∫´u nhi√™n ƒë·ªÉ hi·ªÉn th·ªã
    tips = [
        "üí° **G·ª£i √Ω:** S·ª≠ d·ª•ng t·ª´ kh√≥a `all` ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c t·∫•t c·∫£ xu trong c√°c tr√≤ ch∆°i.",
        "üí° **G·ª£i √Ω:** B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh `.xemket` ƒë·ªÉ ki·ªÉm tra s·ªë xu trong k√©t s·∫Øt.",
        "üí° **G·ª£i √Ω:** Th·∫Øng trong tr√≤ ch∆°i Fight cho ph√©p b·∫°n timeout ƒë·ªëi th·ªß b·∫±ng l·ªánh `.kill`.",
        "üí° **G·ª£i √Ω:** Nh·∫≠n th∆∞·ªüng h√†ng ng√†y v·ªõi l·ªánh `.dd`.",
        "üí° **G·ª£i √Ω:** Ch·∫ø ƒë·ªô chan/l·∫ª th√¥ng th∆∞·ªùng c√≥ t·ªâ l·ªá th·∫Øng cao nh·∫•t.",
        "üí° **G·ª£i √Ω:** Tr√≤ ch∆°i X√¨ D√°ch s·∫Ω th∆∞·ªüng x2 n·∫øu b·∫°n c√≥ X√¨ D√°ch (A + 10/J/Q/K).",
        "üí° **G·ª£i √Ω:** C√≥ th·ªÉ ƒëo ch·ªâ s·ªë IQ, nh√¢n c√°ch, chi·ªÅu cao, c√¢n n·∫∑ng v·ªõi c√°c l·ªánh gi·∫£i tr√≠.",
        "üí° **G·ª£i √Ω:** ƒê·ªÉ c√≥ th·ªÉ ch∆°i game an to√†n, h√£y n·∫°p m·ªôt ph·∫ßn xu v√†o k√©t s·∫Øt.",
        "üí° **G·ª£i √Ω:** Tr√≤ ch∆°i 777 r·∫•t nguy hi·ªÉm, thua s·∫Ω b·ªã kick kh·ªèi server!",
        "üí° **G·ª£i √Ω:** Mua b√πa may m·∫Øn ƒë·ªÉ tƒÉng c∆° h·ªôi th·∫Øng trong c√°c tr√≤ ch∆°i.",
        "üí° **G·ª£i √Ω:** √Åo gi√°p ch·ªëng ƒë·∫πp c√≥ th·ªÉ b·∫£o v·ªá b·∫°n kh·ªèi timeout khi thua C√¥ Quay Nga.",
        "üí° **G·ª£i √Ω:** G·ª≠i xu v√†o ng√¢n h√†ng ƒë·ªÉ nh·∫≠n l√£i 5% m·ªói ng√†y v·ªõi l·ªánh `.bank g·ª≠i`."
    ]

    random_tip = random.choice(tips)

    # T·∫°o c√°c trang cho h∆∞·ªõng d·∫´n - c·∫£i ti·∫øn v·ªõi c√°c danh m·ª•c r√µ r√†ng h∆°n
    pages = []

    # Trang 1: Th√¥ng tin t·ªïng quan
    page1 = discord.Embed(
        title="üéÆ H∆∞·ªõng D·∫´n STV Bot (1/8) üéÆ",
        description=f"Danh s√°ch c√°c l·ªánh v√† tr√≤ ch∆°i hi·ªán c√≥.\nPrefix: `.`\n\n**‚ö†Ô∏è L∆ØU √ù: T·∫•t c·∫£ l·ªánh ch∆°i game ch·ªâ ho·∫°t ƒë·ªông trong [k√™nh ch∆°i game]({GAME_CHANNEL_LINK}) ‚ö†Ô∏è**\n\n{random_tip}",
        color=discord.Color.blue())

    page1.add_field(
        name="üìã Ch·ªâ M·ª•c C√°c Trang",
        value=(
            "**Trang 1:** Th√¥ng tin t·ªïng quan\n"
            "**Trang 2:** Game may r·ªßi c∆° b·∫£n\n"
            "**Trang 3:** Game b√†i & x·ªï s·ªë\n"
            "**Trang 4:** Game ƒë·ªëi kh√°ng PvP\n"
            "**Trang 5:** Qu·∫£n l√Ω t√†i ch√≠nh\n"
            "**Trang 6:** Ng√¢n h√†ng & k√©t s·∫Øt\n"
            "**Trang 7:** C·ª≠a h√†ng & v·∫≠t ph·∫©m\n"
            "**Trang 8:** L·ªánh gi·∫£i tr√≠"
        ),
        inline=False
    )

    page1.add_field(
        name="üîó K√™nh Ch∆°i Game",
        value=(
            f"**Vui l√≤ng s·ª≠ d·ª•ng c√°c l·ªánh trong <#{GAME_CHANNEL_ID}>**\n"
            f"[Nh·∫•p v√†o ƒë√¢y ƒë·ªÉ chuy·ªÉn ƒë·∫øn k√™nh ch∆°i game]({GAME_CHANNEL_LINK})"
        ),
        inline=False)

    page1.add_field(
        name="üì¢ L·ªánh Th√¥ng Tin C∆° B·∫£n",
        value=(
            "**`.stvh`** - Xem danh s√°ch l·ªánh v√† h∆∞·ªõng d·∫´n n√†y\n"
            "**`.stvgt`** - Xem gi·ªõi thi·ªáu v·ªÅ bot\n"
            "**`.xu`** - Ki·ªÉm tra s·ªë xu hi·ªán c√≥\n"
            "**`.bxhxu`** - Xem b·∫£ng x·∫øp h·∫°ng xu\n"
            "**`.gamechannel`** - L·∫•y link ƒë·∫øn k√™nh game"
        ),
        inline=False
    )

    page1.set_footer(text="S·ª≠ d·ª•ng c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng ƒë·ªÉ chuy·ªÉn trang")
    pages.append(page1)

    # Trang 2: Game may r·ªßi c∆° b·∫£n
    page2 = discord.Embed(
        title="üéÆ H∆∞·ªõng D·∫´n STV Bot (2/8) üéÆ",
        description=f"Game may r·ªßi c∆° b·∫£n.\nPrefix: `.`\n\n{random_tip}",
        color=discord.Color.blue())

    page2.add_field(
        name="üé≤ Game May R·ªßi C∆° B·∫£n",
        value=(
            "**`.cl [chan|le|chan2|le2|chan3|le3] [s·ªë xu/all]`**\n"
            "‚Üí Ch∆°i ch·∫µn l·∫ª (x1/x2.5/x3.5)\n\n"
            "**`.tx [t|x] [s·ªë xu/all]`**\n"
            "‚Üí Ch∆°i t√†i x·ªâu (x1.8)\n\n"
            "**`.tungxu [n|s] [s·ªë xu/all]`**\n"
            "‚Üí Tung ƒë·ªìng xu (x1.8, thua timeout)\n\n"
            "**`.baucua [linh v·∫≠t] [s·ªë xu]...`**\n"
            "‚Üí Ch∆°i b·∫ßu cua (x1-x3)\n\n"
            "**`.vqmm [s·ªë xu/all]`**\n"
            "‚Üí V√≤ng quay may m·∫Øn (x2-x10)"
        ),
        inline=False)

    page2.add_field(
        name="‚ö†Ô∏è Game Nguy Hi·ªÉm",
        value=(
            "**`.777 [s·ªë xu/all]`**\n"
            "‚Üí M√°y quay x√®ng (jackpot x10, thua b·ªã kick)\n\n"
            "**`.coquaynga [s·ªë xu/all]`**\n"
            "‚Üí C√¥ quay nga (x2, thua timeout)"
        ),
        inline=False)

    page2.set_footer(text="Trang 2/8 - Game May R·ªßi C∆° B·∫£n")
    pages.append(page2)

    # Trang 3: Game b√†i & x·ªï s·ªë
    page3 = discord.Embed(
        title="üéÆ H∆∞·ªõng D·∫´n STV Bot (3/8) üéÆ",
        description=f"Game b√†i v√† x·ªï s·ªë.\nPrefix: `.`\n\n{random_tip}",
        color=discord.Color.blue())

    page3.add_field(
        name="üÉè Game B√†i",
        value=(
            "**`.poker [s·ªë xu/all]`**\n"
            "‚Üí Poker ƒë∆°n gi·∫£n (x1.5-x10)\n\n"
            "**`.xidach [s·ªë xu/all]`** ho·∫∑c **`.xd`**\n"
            "‚Üí X√¨ d√°ch/Blackjack (x1.5-x2)\n\n"
            "**`.phom [s·ªë xu/all]`**\n"
            "‚Üí Ph·ªèm (x2-x3)\n\n"
            "**`.maubinh [s·ªë xu/all]`** ho·∫∑c **`.mb`**\n"
            "‚Üí M·∫≠u binh (x1.8)"
        ),
        inline=False)

    page3.add_field(
        name="üé± Game X·ªï S·ªë",
        value=(
            "**`.pinggo [s·ªë xu/all]`** ho·∫∑c **`.pg`**\n"
            "‚Üí Ping Go/Bingo (x1.5-x10)\n\n"
            "**`.loto [s·ªë xu/all]`** ho·∫∑c **`.lt`**\n"
            "‚Üí L√¥ t√¥ (ho√†n ti·ªÅn-x10)"
        ),
        inline=False)

    page3.set_footer(text="Trang 3/8 - Game B√†i & X·ªï S·ªë")
    pages.append(page3)

    # Trang 4: Game ƒë·ªëi kh√°ng PvP
    page4 = discord.Embed(
        title="üéÆ H∆∞·ªõng D·∫´n STV Bot (4/8) üéÆ",
        description=f"Game ƒë·ªëi kh√°ng gi·ªØa ng∆∞·ªùi ch∆°i.\nPrefix: `.`\n\n{random_tip}",
        color=discord.Color.blue())

    page4.add_field(
        name="‚öîÔ∏è Game ƒê·ªëi Kh√°ng PvP",
        value=(
            "**`.kbbpvp @ng∆∞·ªùi_ch∆°i [s·ªë xu]`**\n"
            "‚Üí K√©o b√∫a bao PvP (ng∆∞·ªùi th·∫Øng c√≥ th·ªÉ timeout ng∆∞·ªùi thua)\n\n"
            "**`.fight @ng∆∞·ªùi_ch∆°i [s·ªë xu/all]`**\n"
            "‚Üí Th√°ch ƒë·∫•u PvP (ng∆∞·ªùi th·∫Øng c√≥ th·ªÉ d√πng .kill timeout ƒë·ªëi th·ªß)\n\n"
            "**`.caropvp @ng∆∞·ªùi_ch∆°i [s·ªë xu]`**\n"
            "‚Üí Caro PvP (ng∆∞·ªùi th·∫Øng c√≥ th·ªÉ timeout ƒë·ªëi th·ªß)\n\n"
            "**`.bacaopvp @ng∆∞·ªùi_ch∆°i [s·ªë xu]`** ho·∫∑c **`.bacao`**\n"
            "‚Üí Ba c√†o PvP (ng∆∞·ªùi thua b·ªã timeout)\n\n"
            "**`.kbb [keo|bua|bao] [s·ªë xu/all]`**\n"
            "‚Üí K√©o b√∫a bao ƒë·∫•u v·ªõi bot (x1.5, thua timeout)"
        ),
        inline=False)

    page4.add_field(
        name="üß† Game Tr√≠ √ìc",
        value=(
            "**`.hoidap [s·ªë xu/all]`**\n"
            "‚Üí Game h·ªèi ƒë√°p (x2)\n\n"
            "**`.kill @ng∆∞·ªùi_d√πng [ph√∫t]`**\n"
            "‚Üí Timeout ng∆∞·ªùi thua sau khi th·∫Øng Fight (1-5 ph√∫t)"
        ),
        inline=False)

    page4.set_footer(text="Trang 4/8 - Game ƒê·ªëi Kh√°ng PvP")
    pages.append(page4)

    # Trang 5: Qu·∫£n l√Ω t√†i ch√≠nh
    page5 = discord.Embed(
        title="üéÆ H∆∞·ªõng D·∫´n STV Bot (5/8) üéÆ",
        description=f"Qu·∫£n l√Ω t√†i ch√≠nh c∆° b·∫£n.\nPrefix: `.`\n\n{random_tip}",
        color=discord.Color.blue())

    page5.add_field(
        name="üí∞ Ki·∫øm & Qu·∫£n L√Ω Xu",
        value=(
            "**`.dd`**\n"
            "‚Üí ƒêi·ªÉm danh nh·∫≠n (20-50 xu/ng√†y)\n\n"
            "**`.capxu`** ho·∫∑c **`.rx`**\n"
            "‚Üí Nh·∫≠n xu ng·∫´u nhi√™n (10-100 xu m·ªói gi·ªù)\n\n"
            "**`.xu`**\n"
            "‚Üí Xem s·ªë xu hi·ªán c√≥\n\n"
            "**`.bxhxu`**\n"
            "‚Üí B·∫£ng x·∫øp h·∫°ng xu\n\n"
            "**`.sendxu @ng∆∞·ªùi_d√πng [s·ªë xu]`**\n"
            "‚Üí Chuy·ªÉn xu cho ng∆∞·ªùi kh√°c"
        ),
        inline=False)

    page5.add_field(
        name="üîë Key & M√£ Code",
        value=(
            "**`.key [m√£ key]`**\n"
            "‚Üí ƒê·ªïi key l·∫•y xu"
        ),
        inline=False)

    page5.set_footer(text="Trang 5/8 - Qu·∫£n L√Ω T√†i Ch√≠nh")
    pages.append(page5)

    # Trang 6: Ng√¢n h√†ng & k√©t s·∫Øt
    page6 = discord.Embed(
        title="üéÆ H∆∞·ªõng D·∫´n STV Bot (6/8) üéÆ",
        description=f"H·ªá th·ªëng ng√¢n h√†ng v√† k√©t s·∫Øt.\nPrefix: `.`\n\n{random_tip}",
        color=discord.Color.blue())

    page6.add_field(
        name="üè¶ Ng√¢n H√†ng (L√£i 5%/ng√†y)",
        value=(
            "**`.bank g·ª≠i [s·ªë xu]`**\n"
            "‚Üí G·ª≠i xu v√†o ng√¢n h√†ng\n\n"
            "**`.bank r√∫t [s·ªë xu]`**\n"
            "‚Üí R√∫t xu t·ª´ ng√¢n h√†ng\n\n"
            "**`.bank check`**\n"
            "‚Üí Ki·ªÉm tra s·ªë d∆∞ v√† l√£i ng√¢n h√†ng"
        ),
        inline=False)

    page6.add_field(
        name="üíº Vay M∆∞·ª£n Xu",
        value=(
            "**`.vayxu [s·ªë xu]`**\n"
            "‚Üí Vay xu (max 1000, ph·∫£i tr·∫£ trong 2h)\n\n"
            "**`.traxu [s·ªë xu]`**\n"
            "‚Üí Tr·∫£ xu ƒë√£ vay"
        ),
        inline=False)

    page6.add_field(
        name="üîí K√©t S·∫Øt (B·∫£o V·ªá Xu)",
        value=(
            "**`.napket [s·ªë xu]`**\n"
            "‚Üí N·∫°p xu v√†o k√©t\n\n"
            "**`.rutxu [s·ªë xu]`**\n"
            "‚Üí R√∫t xu t·ª´ k√©t\n\n"
            "**`.xemket`**\n"
            "‚Üí Xem s·ªë xu trong k√©t"
        ),
        inline=False)

    page6.set_footer(text="Trang 6/8 - Ng√¢n H√†ng & K√©t S·∫Øt")
    pages.append(page6)

    # Trang 7: C·ª≠a h√†ng & v·∫≠t ph·∫©m
    page7 = discord.Embed(
        title="üéÆ H∆∞·ªõng D·∫´n STV Bot (7/8) üéÆ",
        description=f"C·ª≠a h√†ng v√† v·∫≠t ph·∫©m.\nPrefix: `.`\n\n{random_tip}",
        color=discord.Color.blue())

    page7.add_field(
        name="üõçÔ∏è C·ª≠a H√†ng & V·∫≠t Ph·∫©m",
        value=(
            "**`.shop`**\n"
            "‚Üí Xem c·ª≠a h√†ng v·∫≠t ph·∫©m\n\n"
            "**`.buy [item_id] [s·ªë l∆∞·ª£ng]`**\n"
            "‚Üí Mua v·∫≠t ph·∫©m\n\n"
            "**`.inventory`** ho·∫∑c **`.inv`**\n"
            "‚Üí Xem kho ƒë·ªì\n\n"
            "**`.use [item_id]`**\n"
            "‚Üí S·ª≠ d·ª•ng v·∫≠t ph·∫©m"
        ),
        inline=False)

    page7.add_field(
        name="üéÅ V·∫≠t Ph·∫©m ƒê·∫∑c Bi·ªát",
        value=(
            "**üçÄ B√πa may m·∫Øn** - TƒÉng 20% c∆° h·ªôi th·∫Øng trong c√°c tr√≤ ch∆°i\n"
            "**üõ°Ô∏è √Åo gi√°p ch·ªëng ƒë·∫πp** - B·∫£o v·ªá kh·ªèi b·ªã timeout khi thua C√¥ Quay Nga\n"
            "**üß• √Åo gi√°p ch·ªëng rung** - B·∫£o v·ªá kh·ªèi b·ªã kick khi thua 777\n"
            "**üé´ Th·∫ª b·∫øn** - Gi·∫£m th·ªùi gian timeout xu·ªëng c√≤n 1 ph√∫t\n"
            "**üí∞ B·∫£o hi·ªÉm xu** - Ho√†n tr·∫£ 50% ti·ªÅn c∆∞·ª£c khi thua"
        ),
        inline=False)

    page7.set_footer(text="Trang 7/8 - C·ª≠a H√†ng & V·∫≠t Ph·∫©m")
    pages.append(page7)

    # Trang 8: L·ªánh gi·∫£i tr√≠
    page8 = discord.Embed(
        title="üéÆ H∆∞·ªõng D·∫´n STV Bot (8/8) üéÆ",
        description=f"C√°c l·ªánh gi·∫£i tr√≠ vui v·∫ª.\nPrefix: `.`\n\n{random_tip}",
        color=discord.Color.blue())

    page8.add_field(
        name="üéØ L·ªánh Gi·∫£i Tr√≠ ƒêo Ch·ªâ S·ªë",
        value=(
            "**`.howgay @ng∆∞·ªùi_d√πng`**\n"
            "‚Üí ƒêo ƒë·ªô gay\n\n"
            "**`.howmad @ng∆∞·ªùi_d√πng`**\n"
            "‚Üí ƒêo ƒë·ªô ƒëi√™n\n\n"
            "**`.howfat @ng∆∞·ªùi_d√πng`**\n"
            "‚Üí ƒêo c√¢n n·∫∑ng\n\n"
            "**`.howheight @ng∆∞·ªùi_d√πng`** ho·∫∑c **`.cao`**\n"
            "‚Üí ƒêo chi·ªÅu cao\n\n"
            "**`.howiq @ng∆∞·ªùi_d√πng`** ho·∫∑c **`.iq`**\n"
            "‚Üí ƒêo ch·ªâ s·ªë IQ\n\n"
            "**`.howperson @ng∆∞·ªùi_d√πng`** ho·∫∑c **`.nhancach`**\n"
            "‚Üí Ph√¢n t√≠ch t√≠nh c√°ch"
        ),
        inline=True)

    page8.add_field(
        name="ü•Ç L·ªánh Gi·∫£i Tr√≠ Kh√°c",
        value=(
            "**`.howrb @ng∆∞·ªùi_d√πng`** ho·∫∑c **`.ruou`**\n"
            "‚Üí ƒêo kh·∫£ nƒÉng u·ªëng r∆∞·ª£u/bia\n\n"
            "**`.howstupid @ng∆∞·ªùi_d√πng`** ho·∫∑c **`.ngu`**\n"
            "‚Üí ƒêo ƒë·ªô ngu\n\n"
            "**`.howretarded @ng∆∞·ªùi_d√πng`** ho·∫∑c **`.tn`**\n"
            "‚Üí ƒêo ƒë·ªô thi·ªÉu nƒÉng\n\n"
            "**`.howdamde @ng∆∞·ªùi_d√πng`** ho·∫∑c **`.damde`**\n"
            "‚Üí ƒêo ƒë·ªô d√¢m d√™\n\n"
            "**`.afk [l√Ω do]`**\n"
            "‚Üí ƒê·∫∑t tr·∫°ng th√°i AFK\n\n"
            "**`.avatar @ng∆∞·ªùi_d√πng`** ho·∫∑c **`.av`**\n"
            "‚Üí Xem avatar c·ªßa ng∆∞·ªùi d√πng"
        ),
        inline=True)

    page8.set_footer(text="Trang 8/8 - L·ªánh Gi·∫£i Tr√≠")
    pages.append(page8)

    # T·∫°o h·ªá th·ªëng ph√¢n trang
    current_page = 0

    # T·∫°o view v·ªõi c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng
    view = discord.ui.View(timeout=60)

    # N√∫t trang ƒë·∫ßu
    first_button = discord.ui.Button(
        label="¬´ ƒê·∫ßu",
        style=discord.ButtonStyle.secondary,
        custom_id="first"
    )

    async def first_callback(interaction: discord.Interaction):
        nonlocal current_page
        if interaction.user != ctx.author:
            return await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
        
        current_page = 0
        await interaction.response.edit_message(embed=pages[current_page], view=view)

    first_button.callback = first_callback
    view.add_item(first_button)

    # N√∫t trang tr∆∞·ªõc
    prev_button = discord.ui.Button(
        label="‚óÄÔ∏è Tr∆∞·ªõc",
        style=discord.ButtonStyle.primary,
        custom_id="prev"
    )

    async def prev_callback(interaction: discord.Interaction):
        nonlocal current_page
        if interaction.user != ctx.author:
            return await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
        
        current_page = (current_page - 1) % len(pages)
        await interaction.response.edit_message(embed=pages[current_page], view=view)

    prev_button.callback = prev_callback
    view.add_item(prev_button)

    # N√∫t trang hi·ªán t·∫°i / t·ªïng s·ªë trang (kh√¥ng c√≥ callback)
    page_indicator = discord.ui.Button(
        label=f"1/{len(pages)}",
        style=discord.ButtonStyle.secondary,
        disabled=True,
        custom_id="page_indicator"
    )
    view.add_item(page_indicator)

    # N√∫t trang sau
    next_button = discord.ui.Button(
        label="Sau ‚ñ∂Ô∏è",
        style=discord.ButtonStyle.primary,
        custom_id="next"
    )

    async def next_callback(interaction: discord.Interaction):
        nonlocal current_page
        if interaction.user != ctx.author:
            return await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
        
        current_page = (current_page + 1) % len(pages)
        # C·∫≠p nh·∫≠t s·ªë trang hi·ªán t·∫°i
        page_indicator.label = f"{current_page + 1}/{len(pages)}"
        await interaction.response.edit_message(embed=pages[current_page], view=view)

    next_button.callback = next_callback
    view.add_item(next_button)

    # N√∫t trang cu·ªëi
    last_button = discord.ui.Button(
        label="Cu·ªëi ¬ª",
        style=discord.ButtonStyle.secondary,
        custom_id="last"
    )

    async def last_callback(interaction: discord.Interaction):
        nonlocal current_page
        if interaction.user != ctx.author:
            return await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
        
        current_page = len(pages) - 1
        # C·∫≠p nh·∫≠t s·ªë trang hi·ªán t·∫°i
        page_indicator.label = f"{current_page + 1}/{len(pages)}"
        await interaction.response.edit_message(embed=pages[current_page], view=view)

    last_button.callback = last_callback
    view.add_item(last_button)

    # G·ª≠i trang ƒë·∫ßu ti√™n
    await ctx.send(embed=pages[current_page], view=view)


# Create a new stvgt command that works anywhere
@bot.command(name='stvgt')
async def gioi_thieu(ctx):
    """Hi·ªÉn th·ªã th√¥ng tin gi·ªõi thi·ªáu bot v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i"""
    # Create the main embed with a clean title and description
    embed = discord.Embed(
        title="‚ö° STV BOT ‚ö°",
        description="*Bot gi·∫£i tr√≠ ƒëa nƒÉng v·ªõi nhi·ªÅu minigame h·∫•p d·∫´n v√† h·ªá th·ªëng xu ƒëa d·∫°ng*",
        color=discord.Color.brand_green()
    )
    
    # Add server icon as thumbnail if available
    if ctx.guild.icon:
        embed.set_thumbnail(url=ctx.guild.icon.url)
        
    # Quick access button for game channel
    embed.add_field(
        name="üéÆ K√äNH CH∆†I GAME",
        value=f"[Nh·∫•p v√†o ƒë√¢y ƒë·ªÉ ch∆°i game]({GAME_CHANNEL_LINK})",
        inline=False
    )
    
    # Highlight key game categories with emojis
    embed.add_field(
        name="üé≤ GAME MAY R·ª¶I",
        value="Ch·∫µn l·∫ª ‚Ä¢ T√†i x·ªâu ‚Ä¢ 777 ‚Ä¢ V√≤ng quay",
        inline=True
    )
    
    embed.add_field(
        name="üÉè GAME B√ÄI",
        value="X√¨ d√°ch ‚Ä¢ Poker ‚Ä¢ M·∫≠u binh ‚Ä¢ Ph·ªèm",
        inline=True
    )
    
    # Command categories - minimal and most important
    embed.add_field(
        name="‚öôÔ∏è L·ªÜNH C∆† B·∫¢N",
        value="`stvh` - Xem h∆∞·ªõng d·∫´n ƒë·∫ßy ƒë·ªß\n"
              "`dd` - ƒêi·ªÉm danh (20-50 xu/ng√†y)\n"
              "`xu` - Ki·ªÉm tra xu\n"
              "`shop` - C·ª≠a h√†ng v·∫≠t ph·∫©m",
        inline=False
    )
    
    # Game highlight with custom formatting
    embed.add_field(
        name="‚≠ê GAME N·ªîI B·∫¨T",
        value="```\n"
              "üí• Fight - Th√°ch ƒë·∫•u PvP ng∆∞·ªùi ch∆°i kh√°c\n"
              "üé∞ 777  - M√°y ƒë√°nh b·∫°c v·ªõi jackpot x10\n"
              "üî´ C√¥ Quay Nga - T·ªâ l·ªá 50/50, thua timeout\n"
              "üé≤ B·∫ßu Cua - C∆∞·ª£c v√† th·∫Øng quen thu·ªôc\n"
              "```",
        inline=False
    )
    
    # Footer with version info
    embed.set_footer(text="Prefix: . | STV Bot ‚Ä¢ v1.8")
    
    # Create view for interactive buttons
    view = discord.ui.View(timeout=60)
    
    # Game channel button
    game_button = discord.ui.Button(
        label="V√†o K√™nh Game", 
        style=discord.ButtonStyle.success,
        url=GAME_CHANNEL_LINK,
        emoji="üéÆ"
    )
    view.add_item(game_button)
    
    # Help button
    help_button = discord.ui.Button(
        label="Xem H∆∞·ªõng D·∫´n", 
        style=discord.ButtonStyle.primary,
        emoji="üìñ",
        custom_id="help_button"
    )
    
    async def help_callback(interaction):
        if interaction.user != ctx.author:
            return await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
            
        help_embed = discord.Embed(
            title="üìñ H∆∞·ªõng D·∫´n Nhanh",
            description="M·ªôt s·ªë l·ªánh th√¥ng d·ª•ng ƒë·ªÉ b·∫Øt ƒë·∫ßu:",
            color=discord.Color.blue()
        )
        
        help_embed.add_field(
            name="üéÆ Game Ph·ªï Bi·∫øn",
            value="`cl [ch·∫µn/l·∫ª] [xu]` - Ch∆°i ch·∫µn l·∫ª\n"
                  "`tx [t/x] [xu]` - Ch∆°i t√†i x·ªâu\n"
                  "`xidach [xu]` - Ch∆°i x√¨ d√°ch\n"
                  "`fight @user [xu]` - Th√°ch ƒë·∫•u ng∆∞·ªùi ch∆°i",
            inline=True
        )
        
        help_embed.add_field(
            name="üí∞ Qu·∫£n L√Ω Xu",
            value="`xu` - Xem s·ªë xu\n"
                  "`bank g·ª≠i [xu]` - G·ª≠i xu v√†o ng√¢n h√†ng\n"
                  "`napket [xu]` - N·∫°p xu v√†o k√©t s·∫Øt\n"
                  "`sendxu @user [xu]` - Chuy·ªÉn xu cho ng∆∞·ªùi kh√°c",
            inline=True
        )
        
        help_embed.set_footer(text="S·ª≠ d·ª•ng .stvh trong k√™nh game ƒë·ªÉ xem ƒë·∫ßy ƒë·ªß h∆∞·ªõng d·∫´n")
        await interaction.response.send_message(embed=help_embed, ephemeral=True)
    
    help_button.callback = help_callback
    view.add_item(help_button)
    
    # Daily reward button
    daily_button = discord.ui.Button(
        label="ƒêi·ªÉm Danh", 
        style=discord.ButtonStyle.secondary,
        emoji="üéÅ",
        custom_id="daily_button"
    )
    
    async def daily_callback(interaction):
        if interaction.user != ctx.author:
            return await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
            
        # Redirect to game channel if not in it
        if interaction.channel.id != GAME_CHANNEL_ID:
            await interaction.response.send_message(
                f"L·ªánh n√†y ch·ªâ ho·∫°t ƒë·ªông trong k√™nh ch∆°i game. [Nh·∫•p v√†o ƒë√¢y]({GAME_CHANNEL_LINK}) ƒë·ªÉ ƒë·∫øn k√™nh game.", 
                ephemeral=True
            )
        else:
            # Forward to the existing daily_task command
            await interaction.response.defer()
            await daily_task(ctx)
    
    daily_button.callback = daily_callback
    view.add_item(daily_button)
    
    await ctx.send(embed=embed, view=view)


@bot.command(name='stvad')
@commands.has_permissions(administrator=True)
async def admin_commands(ctx):
    """Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c l·ªánh d√†nh cho qu·∫£n tr·ªã vi√™n v·ªõi ph√¢n trang nh·ªè g·ªçn"""
    # T·∫°o c√°c trang cho h∆∞·ªõng d·∫´n admin
    pages = []

    # Trang 1: T·ªïng quan
    page1 = discord.Embed(title="üëë L·ªánh Admin STV Bot (1/10) üëë",
                          description="T·ªïng quan c√°c l·ªánh qu·∫£n tr·ªã",
                          color=discord.Color.purple())

    page1.add_field(
        name="üìã Danh m·ª•c l·ªánh",
        value=(
            "**Trang 1:** T·ªïng quan\n"
            "**Trang 2:** Qu·∫£n l√Ω xu\n"
            "**Trang 3:** Qu·∫£n l√Ω ng√¢n h√†ng\n"
            "**Trang 4:** Qu·∫£n l√Ω kho·∫£n vay\n"
            "**Trang 5:** Qu·∫£n l√Ω k√©t s·∫Øt\n"
            "**Trang 6:** Qu·∫£n l√Ω drop xu & key\n"
            "**Trang 7:** Qu·∫£n l√Ω k√™nh & tr√≤ ch∆°i\n"
            "**Trang 8:** Qu·∫£n l√Ω th√†nh vi√™n\n"
            "**Trang 9:** Qu·∫£n l√Ω h·ªá th·ªëng\n"
            "**Trang 10:** Qu·∫£n l√Ω whitelist & th√¥ng b√°o"
        ),
        inline=False
    )

    page1.add_field(
        name="üéÆ C√°c game hi·ªán c√≥",
        value=(
            "**Game c∆° b·∫£n:** cl, tx, tungxu, coquaynga, baucua, kbb, kbbpvp, vqmm\n"
            "**Game b√†i:** poker, xidach, maubinh, bacaopvp, phom\n"
            "**Game kh√°c:** pinggo, loto, 777, fight, hoidap, caropvp\n"
            "**Ch·ª©c nƒÉng xu:** dd, vayxu, capxu, shop"
        ),
        inline=False
    )

    page1.add_field(
        name="‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng",
        value=(
            "- L·ªánh admin c√≥ th·ªÉ th·ª±c hi·ªán nh·ªØng thay ƒë·ªïi quan tr·ªçng ƒë·∫øn h·ªá th·ªëng\n"
            "- S·ª≠ d·ª•ng c√≥ tr√°ch nhi·ªám v√† kh√¥ng l·∫°m d·ª•ng quy·ªÅn h·∫°n\n"
            "- T·∫•t c·∫£ c√°c h√†nh ƒë·ªông admin ƒë·ªÅu ƒë∆∞·ª£c ghi log\n"
            "- Nh√¢n v·∫≠t USERID **618702036992655381** l√† owner, c√≥ quy·ªÅn cao nh·∫•t"
        ),
        inline=False
    )

    page1.set_footer(text="S·ª≠ d·ª•ng c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng ƒë·ªÉ chuy·ªÉn trang")
    pages.append(page1)

    # Trang 2: Qu·∫£n l√Ω xu
    page2 = discord.Embed(title="üëë L·ªánh Admin STV Bot (2/10) üëë",
                          description="Qu·∫£n l√Ω xu c·ªßa ng∆∞·ªùi d√πng",
                          color=discord.Color.purple())

    page2.add_field(
        name="üí∞ Qu·∫£n L√Ω Xu C∆° B·∫£n",
        value=(
            "**`.txu @ng∆∞·ªùi_d√πng [s·ªë xu]`** - T·∫∑ng xu cho ng∆∞·ªùi ch∆°i\n"
            "**`.trxu @ng∆∞·ªùi_d√πng [s·ªë xu/all]`** - Tr·ª´ xu c·ªßa ng∆∞·ªùi ch∆°i\n"
            "**`.napxu @ng∆∞·ªùi_d√πng [s·ªë xu]`** - N·∫°p xu v√†o t√†i kho·∫£n ng∆∞·ªùi d√πng\n"
            "**`.ktxu @ng∆∞·ªùi_d√πng`** - Ki·ªÉm tra s·ªë xu c·ªßa ng∆∞·ªùi d√πng\n"
            "**`.bxhxu`** - Xem b·∫£ng x·∫øp h·∫°ng xu c·ªßa server"
        ),
        inline=False
    )

    page2.add_field(
        name="üí∏ Ki·ªÉm Tra √Çm Xu",
        value=(
            "**`.checkam`** (ho·∫∑c **`.camxu`**, **`.amxu`**) - Xem danh s√°ch ng∆∞·ªùi d√πng √¢m xu\n"
            "**`.thihanhan @ng∆∞·ªùi_d√πng [kick/ban]`** - X·ª≠ l√Ω ng∆∞·ªùi d√πng √¢m xu\n"
            "**`.autocheckam`** - Task t·ª± ƒë·ªông ki·ªÉm tra v√† x·ª≠ l√Ω ng∆∞·ªùi d√πng √¢m xu"
        ),
        inline=False
    )

    page2.add_field(
        name="üîÑ Reset Xu & Thao T√°c N√¢ng Cao",
        value=(
            "**`.resetxu @ng∆∞·ªùi_d√πng [s·ªë xu]`** - Reset xu v·ªÅ gi√° tr·ªã c·ª• th·ªÉ\n"
            "**`.resetall @ng∆∞·ªùi_d√πng [s·ªë xu]`** - Reset t·∫•t c·∫£ ti·ªÅn c√πng l√∫c\n"
            "**`.setxu all [s·ªë xu]`** - Thi·∫øt l·∫≠p s·ªë xu cho t·∫•t c·∫£ ng∆∞·ªùi d√πng\n"
            "**`.multixu @ng∆∞·ªùi_d√πng [s·ªë l·∫ßn]`** - Nh√¢n xu c·ªßa ng∆∞·ªùi d√πng"
        ),
        inline=False
    )

    pages.append(page2)

    # Trang 3: Qu·∫£n l√Ω ng√¢n h√†ng
    page3 = discord.Embed(title="üëë L·ªánh Admin STV Bot (3/10) üëë",
                          description="Qu·∫£n l√Ω ng√¢n h√†ng c·ªßa ng∆∞·ªùi d√πng",
                          color=discord.Color.purple())

    page3.add_field(
        name="üè¶ Qu·∫£n L√Ω Ng√¢n H√†ng",
        value=(
            "**`.bankcheck @ng∆∞·ªùi_d√πng`** - Ki·ªÉm tra t√†i kho·∫£n ng√¢n h√†ng c·ªßa ng∆∞·ªùi d√πng\n"
            "**`.bankxoa @ng∆∞·ªùi_d√πng`** - X√≥a t√†i kho·∫£n ng√¢n h√†ng c·ªßa ng∆∞·ªùi d√πng\n"
            "**`.resetbank @ng∆∞·ªùi_d√πng [s·ªë xu]`** - Reset ti·ªÅn ng√¢n h√†ng\n"
            "**`.setinterest [t·ª∑ l·ªá]`** - Thay ƒë·ªïi l√£i su·∫•t ng√¢n h√†ng (m·∫∑c ƒë·ªãnh: 5%)\n"
            "**`.forceinterest`** - √âp bu·ªôc tr·∫£ l√£i ng√¢n h√†ng cho t·∫•t c·∫£ ng∆∞·ªùi d√πng"
        ),
        inline=False
    )

    page3.add_field(
        name="‚õî Qu·∫£n L√Ω Blacklist Ng√¢n H√†ng",
        value=(
            "**`.blbank add @ng∆∞·ªùi_d√πng`** - Th√™m ng∆∞·ªùi d√πng v√†o blacklist ng√¢n h√†ng\n"
            "**`.blbank remove @ng∆∞·ªùi_d√πng`** - X√≥a ng∆∞·ªùi d√πng kh·ªèi blacklist ng√¢n h√†ng\n"
            "**`.bankblview`** (ho·∫∑c **`.blbankview`**) - Xem danh s√°ch ng∆∞·ªùi d√πng b·ªã blacklist\n"
            "**`.bankstats`** - Xem th·ªëng k√™ t·ªïng quan v·ªÅ ng√¢n h√†ng (t·ªïng ti·ªÅn, s·ªë ng∆∞·ªùi d√πng)"
        ),
        inline=False
    )

    page3.add_field(
        name="üí± Ho·∫°t ƒê·ªông Ng√¢n H√†ng",
        value=(
            "**`.banklog [s·ªë l∆∞·ª£ng]`** - Xem l·ªãch s·ª≠ ho·∫°t ƒë·ªông ng√¢n h√†ng\n"
            "**`.banktop`** - Xem danh s√°ch ng∆∞·ªùi d√πng c√≥ nhi·ªÅu ti·ªÅn trong ng√¢n h√†ng nh·∫•t\n"
            "**`.bankstop`** - T·∫°m d·ª´ng h·ªá th·ªëng ng√¢n h√†ng (b·∫£o tr√¨)\n"
            "**`.bankstart`** - M·ªü l·∫°i h·ªá th·ªëng ng√¢n h√†ng"
        ),
        inline=False
    )

    pages.append(page3)

    # Trang 4: Qu·∫£n l√Ω kho·∫£n vay
    page4 = discord.Embed(title="üëë L·ªánh Admin STV Bot (4/10) üëë",
                         description="Qu·∫£n l√Ω kho·∫£n vay c·ªßa ng∆∞·ªùi d√πng",
                         color=discord.Color.purple())

    page4.add_field(
        name="üè¶ Qu·∫£n L√Ω Kho·∫£n Vay",
        value=(
            "**`.checkvay @ng∆∞·ªùi_d√πng`** - Ki·ªÉm tra th√¥ng tin kho·∫£n vay c·ªßa ng∆∞·ªùi d√πng\n"
            "**`.checkvay`** - Ki·ªÉm tra t·∫•t c·∫£ kho·∫£n vay trong h·ªá th·ªëng\n"
            "**`.xoavay @ng∆∞·ªùi_d√πng`** - X√≥a kho·∫£n vay c·ªßa ng∆∞·ªùi d√πng\n"
            "**`.vayxu_config [max_amount] [duration]`** - C·∫•u h√¨nh h·ªá th·ªëng vay xu"
        ),
        inline=False
    )

    page4.add_field(
        name="‚öñÔ∏è X·ª≠ L√Ω Vi Ph·∫°m",
        value=(
            "**`.xulyvay @user [kick/ban]`** - X·ª≠ l√Ω ng∆∞·ªùi d√πng kh√¥ng tr·∫£ n·ª£\n"
            "**`.autoxlvay [kick/ban]`** - X·ª≠ l√Ω t·ª± ƒë·ªông t·∫•t c·∫£ ng∆∞·ªùi kh√¥ng tr·∫£ n·ª£\n"
            "**`.vaystats`** - Xem th·ªëng k√™ v·ªÅ kho·∫£n vay (t·ªïng ti·ªÅn, s·ªë ng∆∞·ªùi vay)\n"
            "**`.vaylogger [on/off]`** - B·∫≠t/t·∫Øt ghi log ho·∫°t ƒë·ªông vay"
        ),
        inline=False
    )

    page4.add_field(
        name="‚öôÔ∏è C√†i ƒê·∫∑t N√¢ng Cao",
        value=(
            "**`.vaysettime @user [gi·ªù]`** - Thay ƒë·ªïi th·ªùi h·∫°n vay cho ng∆∞·ªùi d√πng\n"
            "**`.vaylimit @user [s·ªë xu]`** - Thay ƒë·ªïi h·∫°n m·ª©c vay cho ng∆∞·ªùi d√πng\n"
            "**`.vaybl add @user`** - Th√™m ng∆∞·ªùi d√πng v√†o blacklist vay xu\n"
            "**`.vaybl remove @user`** - X√≥a ng∆∞·ªùi d√πng kh·ªèi blacklist vay xu\n"
            "**`.vayblview`** - Xem danh s√°ch ng∆∞·ªùi d√πng b·ªã c·∫•m vay xu"
        ),
        inline=False
    )

    pages.append(page4)

    # Trang 5: Qu·∫£n l√Ω k√©t s·∫Øt
    page5 = discord.Embed(title="üëë L·ªánh Admin STV Bot (5/10) üëë",
                         description="Qu·∫£n l√Ω k√©t s·∫Øt c·ªßa ng∆∞·ªùi d√πng",
                         color=discord.Color.purple())

    page5.add_field(
        name="üîí Qu·∫£n L√Ω K√©t S·∫Øt C∆° B·∫£n",
        value=(
            "**`.ad_xemket @ng∆∞·ªùi_d√πng`** - Xem k√©t s·∫Øt c·ªßa ng∆∞·ªùi d√πng\n"
            "**`.ad_xoaket @ng∆∞·ªùi_d√πng`** - X√≥a k√©t s·∫Øt c·ªßa ng∆∞·ªùi d√πng\n"
            "**`.resetket @ng∆∞·ªùi_d√πng [s·ªë xu]`** - Reset ti·ªÅn k√©t s·∫Øt\n"
            "**`.resetall @ng∆∞·ªùi_d√πng [s·ªë xu]`** - Reset t·∫•t c·∫£ ti·ªÅn c√πng l√∫c"
        ),
        inline=False
    )

    page5.add_field(
        name="üíº Qu·∫£n L√Ω K√©t S·∫Øt N√¢ng Cao",
        value=(
            "**`.kettop`** - Xem danh s√°ch ng∆∞·ªùi d√πng c√≥ nhi·ªÅu ti·ªÅn trong k√©t nh·∫•t\n"
            "**`.ketlog [s·ªë l∆∞·ª£ng]`** - Xem l·ªãch s·ª≠ ho·∫°t ƒë·ªông k√©t s·∫Øt\n"
            "**`.ketmodify @ng∆∞·ªùi_d√πng [+/-s·ªë xu]`** - TƒÉng/gi·∫£m xu trong k√©t c·ªßa ng∆∞·ªùi d√πng\n"
            "**`.ketstats`** - Xem th·ªëng k√™ t·ªïng quan v·ªÅ k√©t s·∫Øt (t·ªïng ti·ªÅn, s·ªë ng∆∞·ªùi d√πng)"
        ),
        inline=False
    )

    page5.add_field(
        name="‚öôÔ∏è C√†i ƒê·∫∑t K√©t S·∫Øt",
        value=(
            "**`.ketlimit @user [s·ªë xu]`** - Thi·∫øt l·∫≠p gi·ªõi h·∫°n xu trong k√©t cho ng∆∞·ªùi d√πng\n"
            "**`.ketlimit all [s·ªë xu]`** - Thi·∫øt l·∫≠p gi·ªõi h·∫°n xu trong k√©t cho t·∫•t c·∫£\n" 
            "**`.ketdisable @user`** - V√¥ hi·ªáu h√≥a k√©t s·∫Øt c·ªßa ng∆∞·ªùi d√πng\n"
            "**`.ketenable @user`** - K√≠ch ho·∫°t l·∫°i k√©t s·∫Øt c·ªßa ng∆∞·ªùi d√πng\n"
            "**`.rutketforce @user [s·ªë xu]`** - B·∫Øt bu·ªôc r√∫t xu t·ª´ k√©t c·ªßa ng∆∞·ªùi d√πng"
        ),
        inline=False
    )

    pages.append(page5)

    # Trang 6: Qu·∫£n l√Ω drop xu & key
    page6 = discord.Embed(title="üëë L·ªánh Admin STV Bot (6/10) üëë",
                         description="Qu·∫£n l√Ω drop xu v√† key",
                         color=discord.Color.purple())

    page6.add_field(
        name="üéÅ Qu·∫£n L√Ω Drop Xu",
        value=(
            "**`.dropxu [s·ªë xu] [th·ªùi gian] [tin nh·∫Øn]`** - T·∫°o drop xu m·ªõi v·ªõi th·ªùi h·∫°n t·ª± ƒë·ªông\n"
            "**`.stopdrop [ID message]`** - D·ª´ng drop xu ƒëang ho·∫°t ƒë·ªông\n"
            "**`.listdrop`** (ho·∫∑c **`.lsdrop`**, **`.droplist`**) - Xem danh s√°ch drop xu ƒëang ho·∫°t ƒë·ªông\n"
            "**`.dropreset`** - Reset v√† x√≥a t·∫•t c·∫£ drop xu ƒëang ho·∫°t ƒë·ªông\n"
            "**`.dropcustom [emoji] [s·ªë xu] [th·ªùi gian] [tin nh·∫Øn]`** - T·∫°o drop v·ªõi emoji t√πy ch·ªçn"
        ),
        inline=False
    )

    page6.add_field(
        name="üîë Qu·∫£n L√Ω Key",
        value=(
            "**`.tkey [s·ªë xu] [s·ªë l∆∞·ª£t] [s·ªë l∆∞·ª£ng]`** - T·∫°o key ƒë·ªïi xu\n"
            "**`.tkey [s·ªë xu] [s·ªë l∆∞·ª£t] [s·ªë l∆∞·ª£ng] @user`** - T·∫°o key v√† g·ª≠i DM cho ng∆∞·ªùi d√πng\n"
            "**`.ckey [m√£_key]`** - Ki·ªÉm tra th√¥ng tin key\n"
            "**`.xoakey all`** - X√≥a t·∫•t c·∫£ key\n"
            "**`.xoakey [s·ªë l∆∞·ª£ng]`** - X√≥a s·ªë l∆∞·ª£ng key c≈© nh·∫•t\n"
            "**`.keylog`** - Xem l·ªãch s·ª≠ s·ª≠ d·ª•ng key\n"
            "**`.dropkey [s·ªë xu] [s·ªë l∆∞·ª£t] [s·ªë l∆∞·ª£ng] [tin nh·∫Øn]`** - T·∫°o key drop trong k√™nh\n"
            "**`.keystats`** - Xem th·ªëng k√™ v·ªÅ h·ªá th·ªëng key"
        ),
        inline=False
    )

    page6.add_field(
        name="üéÆ Qu·∫£n L√Ω Giveaway",
        value=(
            "**`.giveaway [k√™nh] [th·ªùi gian] [s·ªë ng∆∞·ªùi th·∫Øng] [ph·∫ßn th∆∞·ªüng]`** - T·∫°o giveaway\n"
            "**`.gend [ID tin nh·∫Øn]`** - K·∫øt th√∫c giveaway s·ªõm\n"
            "**`.greroll [ID tin nh·∫Øn]`** - Quay l·∫°i giveaway ƒë·ªÉ ch·ªçn ng∆∞·ªùi th·∫Øng m·ªõi\n"
            "**`.glist`** - Li·ªát k√™ t·∫•t c·∫£ giveaway ƒëang ho·∫°t ƒë·ªông"
        ),
        inline=False
    )

    pages.append(page6)

    # Trang 7: Qu·∫£n l√Ω k√™nh & tr√≤ ch∆°i
    page7 = discord.Embed(title="üëë L·ªánh Admin STV Bot (7/10) üëë",
                         description="Qu·∫£n l√Ω k√™nh v√† tr√≤ ch∆°i",
                         color=discord.Color.purple())

    page7.add_field(
        name="üéÆ Qu·∫£n L√Ω K√™nh & Tr√≤ Ch∆°i",
        value=(
            "**`.nuke [#k√™nh]`** - X√≥a s·∫°ch v√† t·∫°o l·∫°i k√™nh\n"
            "**`.stvdis [t√™n game]`** - B·∫≠t/t·∫Øt tr√≤ ch∆°i c·ª• th·ªÉ\n"
            "**`.stvdis all`** - B·∫≠t/t·∫Øt t·∫•t c·∫£ tr√≤ ch∆°i\n" 
            "**`.stvdis list`** - Xem danh s√°ch tr√≤ ch∆°i ƒë√£ b·ªã v√¥ hi·ªáu h√≥a\n"
            "**`.snipe [s·ªë l∆∞·ª£ng] [@ng∆∞·ªùi_d√πng1 @ng∆∞·ªùi_d√πng2]`** - Xem tin nh·∫Øn ƒë√£ x√≥a\n"
            "**`.purge [s·ªë l∆∞·ª£ng]`** - X√≥a nhanh nhi·ªÅu tin nh·∫Øn trong k√™nh"
        ),
        inline=False
    )

    page7.add_field(
        name="‚öôÔ∏è Qu·∫£n L√Ω Bot & Server",
        value=(
            "**`.stvrestart`** - Kh·ªüi ƒë·ªông l·∫°i bot (ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu)\n"
            "**`.dms_bypass add @user`** - Cho ph√©p ng∆∞·ªùi d√πng bypass ki·ªÉm tra l·ªánh dms\n"
            "**`.dms_bypass remove @user`** - X√≥a quy·ªÅn bypass l·ªánh dms\n"
            "**`.dms_bypass list`** - Xem danh s√°ch ng∆∞·ªùi d√πng c√≥ quy·ªÅn bypass l·ªánh dms\n"
            "**`.config [setting] [value]`** - Thay ƒë·ªïi c√†i ƒë·∫∑t bot\n"
            "**`.setgamechannel [#k√™nh]`** - ƒê·∫∑t k√™nh game m·∫∑c ƒë·ªãnh\n"
            "**`.gamestats`** - Xem th·ªëng k√™ v·ªÅ c√°c tr√≤ ch∆°i (s·ªë l·∫ßn ch∆°i, t·ªïng ti·ªÅn c∆∞·ª£c)"
        ),
        inline=False
    )

    page7.add_field(
        name="üéµ Qu·∫£n L√Ω Nh·∫°c",
        value=(
            "**`.setupmusic [#k√™nh]`** - Thi·∫øt l·∫≠p k√™nh ƒëi·ªÅu khi·ªÉn nh·∫°c\n"
            "**`.musicconfig [setting] [value]`** - C·∫•u h√¨nh h·ªá th·ªëng nh·∫°c\n"
            "**`.musicroles [role]`** - Thi·∫øt l·∫≠p role c√≥ quy·ªÅn ƒëi·ªÅu khi·ªÉn nh·∫°c\n"
            "**`.musicstop`** - D·ª´ng v√† tho√°t kh·ªèi k√™nh nh·∫°c"
        ),
        inline=False
    )

    pages.append(page7)

    # Trang 8: Qu·∫£n l√Ω th√†nh vi√™n
    page8 = discord.Embed(title="üëë L·ªánh Admin STV Bot (8/10) üëë",
                         description="Qu·∫£n l√Ω th√†nh vi√™n",
                         color=discord.Color.purple())

    page8.add_field(
        name="üëÆ‚Äç‚ôÇÔ∏è Qu·∫£n L√Ω Th√†nh Vi√™n C∆° B·∫£n",
        value=(
            "**`.kick @user [l√Ω do]`** - ƒêu·ªïi ng∆∞·ªùi d√πng kh·ªèi server\n"
            "**`.ban @user [l√Ω do]`** - C·∫•m ng∆∞·ªùi d√πng kh·ªèi server\n"
            "**`.unban [user_id] [l√Ω do]`** - G·ª° l·ªánh c·∫•m ng∆∞·ªùi d√πng\n"
            "**`.timeout @user [th·ªùi_gian] [l√Ω do]`** - Timeout th√†nh vi√™n (vd: 10m, 1h, 1d)\n"
            "**`.untimeout @user [l√Ω do]`** - H·ªßy timeout cho th√†nh vi√™n\n"
            "**`.mute @user [l√Ω do]`** - T·∫Øt ti·∫øng th√†nh vi√™n\n"
            "**`.unmute @user [l√Ω do]`** - B·ªè t·∫Øt ti·∫øng th√†nh vi√™n"
        ),
        inline=False
    )

    page8.add_field(
        name="üì® Tin Nh·∫Øn & C·∫£nh B√°o",
        value=(
            "**`.dms @user [n·ªôi dung]`** - G·ª≠i tin nh·∫Øn DM t·ªõi ng∆∞·ªùi d√πng qua bot\n"
            "**`.warn add @user [l√Ω do]`** - C·∫£nh c√°o th√†nh vi√™n\n"
            "**`.warn remove @user [s·ªë c·∫£nh c√°o]`** - X√≥a c·∫£nh c√°o cho th√†nh vi√™n\n"
            "**`.warn list [@user]`** - Xem danh s√°ch c·∫£nh c√°o c·ªßa th√†nh vi√™n\n"
            "**`.warn clear @user`** - X√≥a t·∫•t c·∫£ c·∫£nh c√°o c·ªßa th√†nh vi√™n\n"
            "**`.dmslog [s·ªë l∆∞·ª£ng]`** - Xem l·ªãch s·ª≠ tin nh·∫Øn DMS ƒë√£ g·ª≠i\n"
            "**`.whoping @user`** - Ki·ªÉm tra ai ƒë√£ ping ng∆∞·ªùi d√πng n√†y"
        ),
        inline=False
    )

    page8.add_field(
        name="üîç Gi√°m S√°t & Th√¥ng Tin",
        value=(
            "**`.userinfo @user`** - Xem th√¥ng tin chi ti·∫øt v·ªÅ ng∆∞·ªùi d√πng\n"
            "**`.checkjoin @user`** - Xem th·ªùi gian tham gia server c·ªßa ng∆∞·ªùi d√πng\n"
            "**`.checkchannel @user`** - Xem c√°c k√™nh ng∆∞·ªùi d√πng c√≥ th·ªÉ truy c·∫≠p\n"
            "**`.rolelist [@user]`** - Xem danh s√°ch role c·ªßa ng∆∞·ªùi d√πng ho·∫∑c server\n"
            "**`.serverinfo`** - Xem th√¥ng tin t·ªïng quan v·ªÅ server\n"
            "**`.invites [@user]`** - Xem s·ªë l∆∞·ª£t m·ªùi c·ªßa ng∆∞·ªùi d√πng ho·∫∑c server"
        ),
        inline=False
    )

    pages.append(page8)

    # Trang 9: Qu·∫£n l√Ω h·ªá th·ªëng
    page9 = discord.Embed(title="üëë L·ªánh Admin STV Bot (9/10) üëë",
                         description="Qu·∫£n l√Ω h·ªá th·ªëng v√† blacklist",
                         color=discord.Color.purple())

    page9.add_field(
        name="üîÑ Qu·∫£n L√Ω Danh S√°ch ƒêen",
        value=(
            "**`.blacklist add @ng∆∞·ªùi_d√πng`** (ho·∫∑c **`.bl`**) - Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch ƒëen\n"
            "**`.blacklist remove @ng∆∞·ªùi_d√πng`** - X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch ƒëen\n"
            "**`.blacklistview`** (ho·∫∑c **`.blview`**) - Xem danh s√°ch ng∆∞·ªùi d√πng ƒë√£ b·ªã ch·∫∑n\n"
            "**`.blacklist reason @user [l√Ω do]`** - Ghi ch√∫ l√Ω do ƒë∆∞a v√†o danh s√°ch ƒëen"
        ),
        inline=False
    )

    page9.add_field(
        name="üë• Qu·∫£n L√Ω Tr·∫°ng Th√°i Ng∆∞·ªùi D√πng",
        value=(
            "**`.afklist`** - Xem danh s√°ch ng∆∞·ªùi d√πng ƒëang AFK\n"
            "**`.afkremove @user`** - X√≥a tr·∫°ng th√°i AFK c·ªßa ng∆∞·ªùi d√πng\n"
            "**`.afksetting [th·ªùi gian]`** - Thi·∫øt l·∫≠p th·ªùi gian AFK t·ªëi ƒëa\n"
            "**`.afkmessage [tin nh·∫Øn]`** - Thi·∫øt l·∫≠p tin nh·∫Øn m·∫∑c ƒë·ªãnh khi ping ng∆∞·ªùi AFK"
        ),
        inline=False
    )

    page9.add_field(
        name="üîé Gi√°m S√°t H·ªá Th·ªëng",
        value=(
            "**`.logs [lo·∫°i] [s·ªë l∆∞·ª£ng]`** - Xem log h·ªá th·ªëng (command, error, admin)\n"
            "**`.stats`** - Xem th·ªëng k√™ bot (uptime, s·ªë l·ªánh, memory)\n"
            "**`.statsreset`** - Reset th·ªëng k√™ v·ªÅ s·ªë l·ªánh ƒë√£ s·ª≠ d·ª•ng\n"
            "**`.cooldownreset @user`** - Reset cooldown cho ng∆∞·ªùi d√πng\n"
            "**`.cooldownlist`** - Xem danh s√°ch ng∆∞·ªùi d√πng ƒëang trong cooldown\n"
            "**`.savedata`** - L∆∞u d·ªØ li·ªáu th·ªß c√¥ng (xu, bank, inventory)"
        ),
        inline=False
    )

    pages.append(page9)

    # Trang 10: Qu·∫£n l√Ω whitelist v√† th√¥ng b√°o
    page10 = discord.Embed(title="üëë L·ªánh Admin STV Bot (10/10) üëë",
                          description="Qu·∫£n l√Ω whitelist v√† th√¥ng b√°o",
                          color=discord.Color.purple())

    page10.add_field(
        name="üîÆ Qu·∫£n L√Ω Whitelist",
        value=(
            "**`.wl add @ng∆∞·ªùi_d√πng`** - Th√™m ng∆∞·ªùi d√πng v√†o whitelist (lu√¥n th·∫Øng m·ªçi tr√≤ ch∆°i)\n"
            "**`.wl remove @ng∆∞·ªùi_d√πng`** - X√≥a ng∆∞·ªùi d√πng kh·ªèi whitelist\n"
            "**`.wl list`** - Xem danh s√°ch t√≥m t·∫Øt ng∆∞·ªùi d√πng trong whitelist\n"
            "**`.wlview`** - Xem danh s√°ch chi ti·∫øt ng∆∞·ªùi d√πng trong whitelist\n"
            "**`.wl chance @user [t·ªâ l·ªá]`** - Thi·∫øt l·∫≠p t·ªâ l·ªá th·∫Øng c·ª• th·ªÉ cho ng∆∞·ªùi d√πng (0-100%)"
        ),
        inline=False
    )

    page10.add_field(
        name="üì¢ H·ªá Th·ªëng Th√¥ng B√°o",
        value=(
            "**`.tb [k√™nh/here/all] [ti√™u ƒë·ªÅ] [n·ªôi dung]`** - G·ª≠i th√¥ng b√°o v·ªõi embed ƒë·∫πp\n"
            "**`.tb t·∫°o`** - M·ªü tr√¨nh t·∫°o th√¥ng b√°o t∆∞∆°ng t√°c\n"
            "**`.setuplog [#k√™nh]`** - Thi·∫øt l·∫≠p k√™nh ghi log\n" 
            "**`.embed [json/code]`** - T·∫°o v√† g·ª≠i embed t·ª´ JSON ho·∫∑c code\n"
            "**`.poll [#k√™nh] [c√¢u h·ªèi] [l·ª±a ch·ªçn1] [l·ª±a ch·ªçn2]...`** - T·∫°o cu·ªôc thƒÉm d√≤ √Ω ki·∫øn"
        ),
        inline=False
    )

    page10.add_field(
        name="‚ÑπÔ∏è Th√¥ng tin h·ªØu √≠ch",
        value=(
            "- Game ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t t·ª∑ l·ªá: th·∫Øng 50%, thua 50%\n"
            "- Whitelist gi√∫p ng∆∞·ªùi d√πng lu√¥n th·∫Øng m·ªçi tr√≤ ch∆°i\n"
            "- S·ª≠ d·ª•ng `.stvh` ƒë·ªÉ xem danh s√°ch tr√≤ ch∆°i hi·ªán c√≥\n"
            "- S·ª≠ d·ª•ng `.stvgt` ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin gi·ªõi thi·ªáu bot\n"
            "- T·∫•t c·∫£ thao t√°c qu·∫£n tr·ªã ƒë∆∞·ª£c ghi l·∫°i trong k√™nh nh·∫≠t k√Ω\n"
            "- D√πng `.checkvay` ƒë·ªÉ ki·ªÉm tra ng∆∞·ªùi d√πng ch∆∞a tr·∫£ n·ª£ vay xu"
        ),
        inline=False
    )

    page10.set_footer(text=f"Admin: {ctx.author.name} | {ctx.guild.name} | {datetime.now().strftime('%d/%m/%Y')}")

    pages.append(page10)

    # T·∫°o h·ªá th·ªëng ph√¢n trang
    current_page = 0

    # T·∫°o view v·ªõi c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng
    view = discord.ui.View(timeout=300)  # TƒÉng th·ªùi gian timeout l√™n 5 ph√∫t

    # N√∫t trang ƒë·∫ßu
    first_button = discord.ui.Button(label="¬´ ƒê·∫ßu",
                                     style=discord.ButtonStyle.secondary)

    async def first_callback(interaction: discord.Interaction):
        nonlocal current_page
        if interaction.user != ctx.author:
            return await interaction.response.send_message(
                "B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)

        current_page = 0
        await interaction.response.edit_message(embed=pages[current_page],
                                                view=view)

    first_button.callback = first_callback
    view.add_item(first_button)

    # N√∫t trang tr∆∞·ªõc
    prev_button = discord.ui.Button(label="‚óÄÔ∏è Trang tr∆∞·ªõc",
                                    style=discord.ButtonStyle.primary)

    async def prev_callback(interaction: discord.Interaction):
        nonlocal current_page
        if interaction.user != ctx.author:
            return await interaction.response.send_message(
                "B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)

        current_page = (current_page - 1) % len(pages)
        await interaction.response.edit_message(embed=pages[current_page],
                                                view=view)

    prev_button.callback = prev_callback
    view.add_item(prev_button)

    # Hi·ªÉn th·ªã s·ªë trang hi·ªán t·∫°i
    page_indicator = discord.ui.Button(
        label=f"1/{len(pages)}", 
        style=discord.ButtonStyle.secondary,
        disabled=True
    )
    view.add_item(page_indicator)

    # N√∫t trang sau
    next_button = discord.ui.Button(label="Trang sau ‚ñ∂Ô∏è",
                                    style=discord.ButtonStyle.primary)

    async def next_callback(interaction: discord.Interaction):
        nonlocal current_page
        if interaction.user != ctx.author:
            return await interaction.response.send_message(
                "B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)

        current_page = (current_page + 1) % len(pages)
        # C·∫≠p nh·∫≠t s·ªë trang hi·ªán t·∫°i
        page_indicator.label = f"{current_page + 1}/{len(pages)}"
        await interaction.response.edit_message(embed=pages[current_page],
                                                view=view)

    next_button.callback = next_callback
    view.add_item(next_button)

    # N√∫t trang cu·ªëi
    last_button = discord.ui.Button(label="Cu·ªëi ¬ª",
                                    style=discord.ButtonStyle.secondary)

    async def last_callback(interaction: discord.Interaction):
        nonlocal current_page
        if interaction.user != ctx.author:
            return await interaction.response.send_message(
                "B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)

        current_page = len(pages) - 1
        # C·∫≠p nh·∫≠t s·ªë trang hi·ªán t·∫°i
        page_indicator.label = f"{current_page + 1}/{len(pages)}"
        await interaction.response.edit_message(embed=pages[current_page],
                                                view=view)

    last_button.callback = last_callback
    view.add_item(last_button)

    # G·ª≠i trang ƒë·∫ßu ti√™n
    await ctx.send(embed=pages[current_page], view=view)


@admin_commands.error
async def admin_commands_error(ctx, error):
    """X·ª≠ l√Ω l·ªói khi kh√¥ng ƒë·ªß quy·ªÅn ch·∫°y l·ªánh stvad"""
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚õî Quy·ªÅn h·∫°n kh√¥ng ƒë·ªß",
            description="B·∫°n c·∫ßn c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
            color=discord.Color.red())
        await ctx.send(embed=embed)



@bot.command(name='tb', aliases=['announce', 'thongbao', 'tbb'])
@commands.has_permissions(administrator=True)
async def admin_announcement(ctx, channel_option: str = None, title: str = None, *, content: str = None):
    """G·ª≠i th√¥ng b√°o quan tr·ªçng t·ª´ admin v·ªõi thi·∫øt k·∫ø ƒë·∫πp
    
    S·ª≠ d·ª•ng:
    .tb [k√™nh/here/all] [ti√™u ƒë·ªÅ] [n·ªôi dung] - G·ª≠i th√¥ng b√°o admin
    .tb t·∫°o - M·ªü tr√¨nh t·∫°o th√¥ng b√°o t∆∞∆°ng t√°c
    """
    # X√≥a l·ªánh g·ªëc
    try:
        await ctx.message.delete()
    except:
        pass

    # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n·∫øu kh√¥ng c√≥ ƒë·ªß th√¥ng tin
    if channel_option is None or channel_option.lower() == "help":
        embed = discord.Embed(
            title="üì¢ Th√¥ng B√°o Admin - H∆∞·ªõng D·∫´n",
            description="G·ª≠i th√¥ng b√°o quan tr·ªçng t·ª´ admin v·ªõi thi·∫øt k·∫ø ƒë·∫πp",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.tb [k√™nh/here/all] [ti√™u ƒë·ªÅ] [n·ªôi dung]`",
            inline=False
        )
        
        embed.add_field(
            name="T√πy ch·ªçn k√™nh",
            value=(
                "`#t√™n-k√™nh` - G·ª≠i th√¥ng b√°o v√†o k√™nh c·ª• th·ªÉ\n"
                "`here` - G·ª≠i th√¥ng b√°o v√†o k√™nh hi·ªán t·∫°i, ping @here\n"
                "`all` - G·ª≠i th√¥ng b√°o v√†o k√™nh hi·ªán t·∫°i, ping @everyone"
            ),
            inline=False
        )
        
        embed.add_field(
            name="V√≠ d·ª•",
            value=(
                "`.tb #th√¥ng-b√°o \"C·∫≠p Nh·∫≠t M√°y Ch·ªß\" Server s·∫Ω b·∫£o tr√¨ v√†o ng√†y mai...`\n"
                "`.tb here \"S·ª± Ki·ªán M·ªõi\" S·ª± ki·ªán s·∫Ω di·ªÖn ra v√†o cu·ªëi tu·∫ßn...`"
            ),
            inline=False
        )
        
        embed.add_field(
            name="ƒê·ªãnh d·∫°ng vƒÉn b·∫£n",
            value=(
                "B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c ƒë·ªãnh d·∫°ng Markdown:\n"
                "**in ƒë·∫≠m**, *in nghi√™ng*, __g·∫°ch d∆∞·ªõi__, ~~g·∫°ch ngang~~\n"
                "`code ƒë∆°n d√≤ng`, ```code nhi·ªÅu d√≤ng```"
            ),
            inline=False
        )
        
        embed.set_footer(text="Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y")
        await ctx.send(embed=embed, delete_after=60)
        return
    
    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng mu·ªën s·ª≠ d·ª•ng tr√¨nh t·∫°o t∆∞∆°ng t√°c
    if channel_option.lower() in ["t·∫°o", "create", "interactive", "builder"]:
        await create_interactive_announcement(ctx)
        return
    
    # Ki·ªÉm tra n·∫øu ƒë·∫ßy ƒë·ªß th√¥ng tin
    if title is None or content is None:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu th√¥ng tin",
            description="B·∫°n c·∫ßn cung c·∫•p ƒë·∫ßy ƒë·ªß ti√™u ƒë·ªÅ v√† n·ªôi dung th√¥ng b√°o.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed, delete_after=10)
        return
    
    # X√°c ƒë·ªãnh k√™nh g·ª≠i th√¥ng b√°o
    target_channel = ctx.channel  # M·∫∑c ƒë·ªãnh l√† k√™nh hi·ªán t·∫°i
    mention_type = None
    
    if channel_option.lower() == "here":
        mention_type = "@here"
    elif channel_option.lower() == "all" or channel_option.lower() == "everyone":
        mention_type = "@everyone"
    else:
        # Th·ª≠ tr√≠ch xu·∫•t ID k√™nh t·ª´ mention
        channel_id_match = re.search(r'<#(\d+)>', channel_option)
        if channel_id_match:
            channel_id = int(channel_id_match.group(1))
            found_channel = ctx.guild.get_channel(channel_id)
            if found_channel:
                target_channel = found_channel
            else:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng t√¨m th·∫•y k√™nh",
                    description="K√™nh b·∫°n ch·ªâ ƒë·ªãnh kh√¥ng t·ªìn t·∫°i ho·∫∑c bot kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.",
                    color=discord.Color.red()
                )
                await ctx.send(embed=embed, delete_after=10)
                return
        else:
            # Th·ª≠ t√¨m k√™nh theo t√™n
            if channel_option.startswith('#'):
                channel_name = channel_option[1:]
            else:
                channel_name = channel_option
                
            found_channel = discord.utils.get(ctx.guild.text_channels, name=channel_name)
            if found_channel:
                target_channel = found_channel
            else:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng t√¨m th·∫•y k√™nh",
                    description=f"Kh√¥ng t√¨m th·∫•y k√™nh '{channel_option}'.",
                    color=discord.Color.red()
                )
                await ctx.send(embed=embed, delete_after=10)
                return
    
    # T·∫°o embed th√¥ng b√°o
    announcement_embed = create_announcement_embed(ctx.author, title, content)
    
    # G·ª≠i th√¥ng b√°o
    try:
        if mention_type:
            allowed_mentions = discord.AllowedMentions(everyone=True)
            announcement_message = await target_channel.send(
                content=mention_type,
                embed=announcement_embed,
                allowed_mentions=allowed_mentions
            )
        else:
            announcement_message = await target_channel.send(embed=announcement_embed)
            
        # G·ª≠i x√°c nh·∫≠n cho admin
        confirm_embed = discord.Embed(
            title="‚úÖ Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i",
            description=f"Th√¥ng b√°o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn {target_channel.mention}.",
            color=discord.Color.green()
        )
        
        confirm_embed.add_field(
            name="Ti√™u ƒë·ªÅ", 
            value=title[:100] + "..." if len(title) > 100 else title,
            inline=False
        )
        
        # Th√™m n√∫t ƒë·ªÉ nh·∫£y ƒë·∫øn th√¥ng b√°o
        view = discord.ui.View()
        view.add_item(discord.ui.Button(
            label="Xem th√¥ng b√°o", 
            style=discord.ButtonStyle.link, 
            url=announcement_message.jump_url
        ))
        
        await ctx.send(embed=confirm_embed, view=view, delete_after=30)
    
    except discord.Forbidden:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß quy·ªÅn",
            description=f"Bot kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn v√†o k√™nh {target_channel.mention}.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed, delete_after=10)
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói khi g·ª≠i th√¥ng b√°o: {str(e)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed, delete_after=10)


def create_announcement_embed(author, title, content):
    """T·∫°o embed th√¥ng b√°o admin ƒë·∫πp m·∫Øt"""
    embed = discord.Embed(
        title=f"üì¢ {title}",
        description=content,
        color=discord.Color.gold()
    )
    
    # Th√™m th√¥ng tin th·ªùi gian v√† ng∆∞·ªùi g·ª≠i
    embed.set_footer(
        text=f"Th√¥ng b√°o b·ªüi {author.display_name}",
        icon_url=author.display_avatar.url
    )
    
    # Th√™m timestamp
    embed.timestamp = datetime.now()
    
    return embed


async def create_interactive_announcement(ctx):
    """M·ªü tr√¨nh t·∫°o th√¥ng b√°o t∆∞∆°ng t√°c cho admin"""
    # D·ªØ li·ªáu ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin c·ªßa th√¥ng b√°o
    announcement_data = {
        "title": "",
        "content": "",
        "color": discord.Color.gold(),
        "channel": ctx.channel,
        "mention": "none",
        "image_url": None
    }
    
    # T·∫°o message ban ƒë·∫ßu v·ªõi embed
    builder_embed = discord.Embed(
        title="üîß T·∫°o Th√¥ng B√°o Admin",
        description="S·ª≠ d·ª•ng c√°c n√∫t b√™n d∆∞·ªõi ƒë·ªÉ thi·∫øt l·∫≠p th√¥ng b√°o c·ªßa b·∫°n.",
        color=discord.Color.blue()
    )
    
    builder_embed.add_field(
        name="B∆∞·ªõc 1Ô∏è‚É£",
        value="Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† n·ªôi dung",
        inline=False
    )
    
    builder_embed.add_field(
        name="B∆∞·ªõc 2Ô∏è‚É£",
        value="T√πy ch·ªânh m√†u s·∫Øc v√† k√™nh",
        inline=False
    )
    
    builder_embed.add_field(
        name="B∆∞·ªõc 3Ô∏è‚É£",
        value="Xem tr∆∞·ªõc v√† g·ª≠i th√¥ng b√°o",
        inline=False
    )
    
    # T·∫°o view v·ªõi c√°c n√∫t ƒëi·ªÅu khi·ªÉn
    view = AnnouncementBuilderView(ctx, announcement_data)
    message = await ctx.send(embed=builder_embed, view=view)
    
    # L∆∞u message ƒë·ªÉ c·∫≠p nh·∫≠t sau n√†y
    view.message = message


# View cho c√¥ng c·ª• t·∫°o th√¥ng b√°o t∆∞∆°ng t√°c
class AnnouncementBuilderView(discord.ui.View):
    def __init__(self, ctx, announcement_data):
        super().__init__(timeout=600)  # 10 ph√∫t timeout
        self.ctx = ctx
        self.announcement_data = announcement_data
        self.message = None
        self.preview_message = None
    
    async def on_timeout(self):
        # Th√¥ng b√°o h·∫øt th·ªùi gian ch·ªânh s·ª≠a
        timeout_embed = discord.Embed(
            title="‚è±Ô∏è H·∫øt th·ªùi gian",
            description="Th·ªùi gian t·∫°o th√¥ng b√°o ƒë√£ h·∫øt. Vui l√≤ng ch·∫°y l·∫°i l·ªánh `.tt t·∫°o` n·∫øu b·∫°n mu·ªën ti·∫øp t·ª•c.",
            color=discord.Color.red()
        )
        
        # X√≥a t·∫•t c·∫£ c√°c n√∫t
        self.clear_items()
        
        try:
            await self.message.edit(embed=timeout_embed, view=self)
        except:
            pass
    
    # N√∫t thi·∫øt l·∫≠p ti√™u ƒë·ªÅ
    @discord.ui.button(label="Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ", style=discord.ButtonStyle.primary, row=0)
    async def set_title_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # T·∫°o modal ƒë·ªÉ nh·∫≠p ti√™u ƒë·ªÅ
        modal = TitleInputModal(self)
        await interaction.response.send_modal(modal)
    
    # N√∫t thi·∫øt l·∫≠p n·ªôi dung
    @discord.ui.button(label="Thi·∫øt l·∫≠p n·ªôi dung", style=discord.ButtonStyle.primary, row=0)
    async def set_content_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # T·∫°o modal ƒë·ªÉ nh·∫≠p n·ªôi dung
        modal = ContentInputModal(self)
        await interaction.response.send_modal(modal)
    
    # N√∫t thi·∫øt l·∫≠p m√†u s·∫Øc
    @discord.ui.button(label="ƒê·ªïi m√†u s·∫Øc", style=discord.ButtonStyle.secondary, row=1)
    async def set_color_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # T·∫°o danh s√°ch m√†u s·∫Øc
        colors = [
            ("üî¥ ƒê·ªè", discord.Color.red()),
            ("üîµ Xanh d∆∞∆°ng", discord.Color.blue()),
            ("üü¢ Xanh l√°", discord.Color.green()),
            ("üü° V√†ng", discord.Color.gold()),
            ("üü£ T√≠m", discord.Color.purple()),
            ("‚ö´ ƒêen", discord.Color.darker_grey()),
            ("‚ö™ Tr·∫Øng", discord.Color.light_grey())
        ]
        
        # T·∫°o select menu cho m√†u s·∫Øc
        select = discord.ui.Select(
            placeholder="Ch·ªçn m√†u s·∫Øc cho th√¥ng b√°o",
            options=[
                discord.SelectOption(label=name, value=str(i))
                for i, (name, _) in enumerate(colors)
            ]
        )
        
        async def select_callback(select_interaction):
            # L·∫•y m√†u ƒë∆∞·ª£c ch·ªçn
            color_index = int(select_interaction.data["values"][0])
            self.announcement_data["color"] = colors[color_index][1]
            
            # C·∫≠p nh·∫≠t embed
            await self.update_builder_embed()
            await select_interaction.response.defer()
        
        select.callback = select_callback
        
        # T·∫°o view m·ªõi v·ªõi select menu
        color_view = discord.ui.View()
        color_view.add_item(select)
        
        await interaction.response.send_message("Ch·ªçn m√†u s·∫Øc cho th√¥ng b√°o c·ªßa b·∫°n:", view=color_view, ephemeral=True)
    
    # N√∫t thi·∫øt l·∫≠p k√™nh
    @discord.ui.button(label="Ch·ªçn k√™nh", style=discord.ButtonStyle.secondary, row=1)
    async def set_channel_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # T·∫°o danh s√°ch c√°c k√™nh
        channels = [channel for channel in self.ctx.guild.text_channels 
                  if channel.permissions_for(self.ctx.guild.me).send_messages]
        
        # T·∫°o select menu cho k√™nh
        # N·∫øu c√≥ qu√° nhi·ªÅu k√™nh, ch·ªâ hi·ªÉn th·ªã 25 k√™nh ƒë·∫ßu ti√™n (gi·ªõi h·∫°n c·ªßa select menu)
        select_options = []
        for i, channel in enumerate(channels[:25]):
            select_options.append(
                discord.SelectOption(
                    label=channel.name,
                    value=str(i),
                    description=f"#{channel.name}"
                )
            )
        
        select = discord.ui.Select(
            placeholder="Ch·ªçn k√™nh ƒë·ªÉ g·ª≠i th√¥ng b√°o",
            options=select_options
        )
        
        async def select_callback(select_interaction):
            # L·∫•y k√™nh ƒë∆∞·ª£c ch·ªçn
            channel_index = int(select_interaction.data["values"][0])
            self.announcement_data["channel"] = channels[channel_index]
            
            # C·∫≠p nh·∫≠t embed
            await self.update_builder_embed()
            await select_interaction.response.defer()
        
        select.callback = select_callback
        
        # T·∫°o view m·ªõi v·ªõi select menu
        channel_view = discord.ui.View()
        channel_view.add_item(select)
        
        await interaction.response.send_message("Ch·ªçn k√™nh ƒë·ªÉ g·ª≠i th√¥ng b√°o:", view=channel_view, ephemeral=True)
    
    # N√∫t thi·∫øt l·∫≠p mention
    @discord.ui.button(label="Thi·∫øt l·∫≠p mention", style=discord.ButtonStyle.secondary, row=1)
    async def set_mention_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # T·∫°o danh s√°ch c√°c lo·∫°i mention
        mention_types = [
            ("Kh√¥ng ping", "none"),
            ("@here - Ping ng∆∞·ªùi ƒëang online", "here"),
            ("@everyone - Ping t·∫•t c·∫£", "everyone")
        ]
        
        # T·∫°o select menu cho mention
        select = discord.ui.Select(
            placeholder="Ch·ªçn lo·∫°i mention",
            options=[
                discord.SelectOption(
                    label=name,
                    value=value,
                    description=f"S·ª≠ d·ª•ng {value}" if value != "none" else "Kh√¥ng ping ai"
                )
                for name, value in mention_types
            ]
        )
        
        async def select_callback(select_interaction):
            # L·∫•y mention ƒë∆∞·ª£c ch·ªçn
            self.announcement_data["mention"] = select_interaction.data["values"][0]
            
            # C·∫≠p nh·∫≠t embed
            await self.update_builder_embed()
            await select_interaction.response.defer()
        
        select.callback = select_callback
        
        # T·∫°o view m·ªõi v·ªõi select menu
        mention_view = discord.ui.View()
        mention_view.add_item(select)
        
        await interaction.response.send_message("Ch·ªçn lo·∫°i mention cho th√¥ng b√°o:", view=mention_view, ephemeral=True)
    
    # N√∫t th√™m h√¨nh ·∫£nh
    @discord.ui.button(label="Th√™m h√¨nh ·∫£nh", style=discord.ButtonStyle.secondary, row=2)
    async def add_image_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # T·∫°o modal ƒë·ªÉ nh·∫≠p URL h√¨nh ·∫£nh
        modal = ImageURLModal(self)
        await interaction.response.send_modal(modal)
    
    # N√∫t xem tr∆∞·ªõc
    @discord.ui.button(label="Xem tr∆∞·ªõc", style=discord.ButtonStyle.success, row=3)
    async def preview_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Ki·ªÉm tra xem ƒë√£ c√≥ ƒë·ªß th√¥ng tin ch∆∞a
        if not self.announcement_data["title"] or not self.announcement_data["content"]:
            await interaction.response.send_message(
                "‚ö†Ô∏è B·∫°n c·∫ßn thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† n·ªôi dung tr∆∞·ªõc khi xem tr∆∞·ªõc!",
                ephemeral=True
            )
            return
        
        # T·∫°o embed ƒë·ªÉ xem tr∆∞·ªõc
        preview_embed = self.create_preview_embed()
        
        # N·∫øu ƒë√£ c√≥ tin nh·∫Øn xem tr∆∞·ªõc, c·∫≠p nh·∫≠t n√≥
        if self.preview_message:
            try:
                await self.preview_message.edit(embed=preview_embed)
                await interaction.response.send_message(
                    "‚úÖ ƒê√£ c·∫≠p nh·∫≠t b·∫£n xem tr∆∞·ªõc!",
                    ephemeral=True
                )
                return
            except:
                pass
        
        # G·ª≠i tin nh·∫Øn xem tr∆∞·ªõc m·ªõi
        await interaction.response.defer()
        self.preview_message = await self.ctx.send(
            "üìù **B·∫£n xem tr∆∞·ªõc th√¥ng b√°o:**",
            embed=preview_embed
        )
    
    # N√∫t g·ª≠i th√¥ng b√°o
    @discord.ui.button(label="G·ª≠i th√¥ng b√°o", style=discord.ButtonStyle.danger, row=3)
    async def send_announcement_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Ki·ªÉm tra xem ƒë√£ c√≥ ƒë·ªß th√¥ng tin ch∆∞a
        if not self.announcement_data["title"] or not self.announcement_data["content"]:
            await interaction.response.send_message(
                "‚ö†Ô∏è B·∫°n c·∫ßn thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† n·ªôi dung tr∆∞·ªõc khi g·ª≠i th√¥ng b√°o!",
                ephemeral=True
            )
            return
        
        # T·∫°o embed th√¥ng b√°o
        announcement_embed = self.create_preview_embed()
        
        # G·ª≠i th√¥ng b√°o
        target_channel = self.announcement_data["channel"]
        mention_type = self.announcement_data["mention"]
        
        try:
            if mention_type == "here":
                allowed_mentions = discord.AllowedMentions(everyone=True)
                announcement_message = await target_channel.send(
                    content="@here",
                    embed=announcement_embed,
                    allowed_mentions=allowed_mentions
                )
            elif mention_type == "everyone":
                allowed_mentions = discord.AllowedMentions(everyone=True)
                announcement_message = await target_channel.send(
                    content="@everyone",
                    embed=announcement_embed,
                    allowed_mentions=allowed_mentions
                )
            else:
                announcement_message = await target_channel.send(embed=announcement_embed)
            
            # C·∫≠p nh·∫≠t tr√¨nh t·∫°o th√¥ng b√°o th√†nh c√¥ng c√¥ng
            success_embed = discord.Embed(
                title="‚úÖ Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i",
                description=f"Th√¥ng b√°o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn {target_channel.mention}.",
                color=discord.Color.green()
            )
            
            # X√≥a t·∫•t c·∫£ c√°c n√∫t
            self.clear_items()
            
            # Th√™m n√∫t ƒë·ªÉ nh·∫£y ƒë·∫øn th√¥ng b√°o
            self.add_item(discord.ui.Button(
                label="Xem th√¥ng b√°o", 
                style=discord.ButtonStyle.link, 
                url=announcement_message.jump_url
            ))
            
            await self.message.edit(embed=success_embed, view=self)
            
            # X√≥a tin nh·∫Øn xem tr∆∞·ªõc n·∫øu c√≥
            if self.preview_message:
                try:
                    await self.preview_message.delete()
                except:
                    pass
            
            await interaction.response.defer()
            
        except discord.Forbidden:
            await interaction.response.send_message(
                f"‚ùå Bot kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn v√†o k√™nh {target_channel.mention}.",
                ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i th√¥ng b√°o: {str(e)}",
                ephemeral=True
            )
    
    # N√∫t h·ªßy
    @discord.ui.button(label="H·ªßy", style=discord.ButtonStyle.secondary, row=3)
    async def cancel_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Hi·ªÉn th·ªã th√¥ng b√°o h·ªßy
        cancel_embed = discord.Embed(
            title="‚ùå ƒê√£ h·ªßy",
            description="Vi·ªác t·∫°o th√¥ng b√°o ƒë√£ b·ªã h·ªßy.",
            color=discord.Color.red()
        )
        
        # X√≥a t·∫•t c·∫£ c√°c n√∫t
        self.clear_items()
        
        await self.message.edit(embed=cancel_embed, view=self)
        
        # X√≥a tin nh·∫Øn xem tr∆∞·ªõc n·∫øu c√≥
        if self.preview_message:
            try:
                await self.preview_message.delete()
            except:
                pass
        
        await interaction.response.defer()
    
    async def update_builder_embed(self):
        """C·∫≠p nh·∫≠t embed c·ªßa tr√¨nh t·∫°o th√¥ng b√°o"""
        builder_embed = discord.Embed(
            title="üîß T·∫°o Th√¥ng B√°o Admin",
            description="S·ª≠ d·ª•ng c√°c n√∫t b√™n d∆∞·ªõi ƒë·ªÉ thi·∫øt l·∫≠p th√¥ng b√°o c·ªßa b·∫°n.",
            color=discord.Color.blue()
        )
        
        # Hi·ªÉn th·ªã th√¥ng tin ƒë√£ thi·∫øt l·∫≠p
        if self.announcement_data["title"]:
            builder_embed.add_field(
                name="üìù Ti√™u ƒë·ªÅ",
                value=self.announcement_data["title"],
                inline=False
            )
        else:
            builder_embed.add_field(
                name="üìù Ti√™u ƒë·ªÅ",
                value="‚ùå Ch∆∞a thi·∫øt l·∫≠p",
                inline=False
            )
        
        if self.announcement_data["content"]:
            # Hi·ªÉn th·ªã t√≥m t·∫Øt n·ªôi dung n·∫øu qu√° d√†i
            content = self.announcement_data["content"]
            if len(content) > 100:
                content = content[:100] + "..."
            
            builder_embed.add_field(
                name="üìÑ N·ªôi dung",
                value=content,
                inline=False
            )
        else:
            builder_embed.add_field(
                name="üìÑ N·ªôi dung",
                value="‚ùå Ch∆∞a thi·∫øt l·∫≠p",
                inline=False
            )
        
        builder_embed.add_field(
            name="üé® M√†u s·∫Øc",
            value=f"HEX: #{self.announcement_data['color'].value:06x}",
            inline=True
        )
        
        builder_embed.add_field(
            name="üì¢ K√™nh",
            value=f"#{self.announcement_data['channel'].name}",
            inline=True
        )
        
        mention_display = {
            "none": "Kh√¥ng ping",
            "here": "@here",
            "everyone": "@everyone"
        }
        
        builder_embed.add_field(
            name="üë• Mention",
            value=mention_display[self.announcement_data["mention"]],
            inline=True
        )
        
        if self.announcement_data["image_url"]:
            builder_embed.add_field(
                name="üñºÔ∏è H√¨nh ·∫£nh",
                value=f"[Xem h√¨nh ·∫£nh]({self.announcement_data['image_url']})",
                inline=True
            )
            builder_embed.set_image(url=self.announcement_data["image_url"])
        
        # C·∫≠p nh·∫≠t message
        await self.message.edit(embed=builder_embed, view=self)
    
    def create_preview_embed(self):
        """T·∫°o embed xem tr∆∞·ªõc d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ thi·∫øt l·∫≠p"""
        embed = discord.Embed(
            title=f"üì¢ {self.announcement_data['title']}",
            description=self.announcement_data["content"],
            color=self.announcement_data["color"]
        )
        
        # Th√™m th√¥ng tin th·ªùi gian v√† ng∆∞·ªùi g·ª≠i
        embed.set_footer(
            text=f"Th√¥ng b√°o b·ªüi {self.ctx.author.display_name}",
            icon_url=self.ctx.author.display_avatar.url
        )
        
        # Th√™m h√¨nh ·∫£nh n·∫øu c√≥
        if self.announcement_data["image_url"]:
            embed.set_image(url=self.announcement_data["image_url"])
        
        # Th√™m timestamp
        embed.timestamp = datetime.now()
        
        return embed


# Modal ƒë·ªÉ nh·∫≠p ti√™u ƒë·ªÅ
class TitleInputModal(discord.ui.Modal):
    def __init__(self, view):
        super().__init__(title="Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ th√¥ng b√°o")
        self.view = view
        
        self.title_input = discord.ui.TextInput(
            label="Ti√™u ƒë·ªÅ th√¥ng b√°o",
            placeholder="Nh·∫≠p ti√™u ƒë·ªÅ th√¥ng b√°o c·ªßa b·∫°n",
            default=self.view.announcement_data["title"],
            max_length=256
        )
        
        self.add_item(self.title_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        self.view.announcement_data["title"] = self.title_input.value
        await interaction.response.send_message("‚úÖ ƒê√£ thi·∫øt l·∫≠p ti√™u ƒë·ªÅ th√¥ng b√°o!", ephemeral=True)
        await self.view.update_builder_embed()


# Modal ƒë·ªÉ nh·∫≠p n·ªôi dung
class ContentInputModal(discord.ui.Modal):
    def __init__(self, view):
        super().__init__(title="Thi·∫øt l·∫≠p n·ªôi dung th√¥ng b√°o")
        self.view = view
        
        self.content_input = discord.ui.TextInput(
            label="N·ªôi dung th√¥ng b√°o",
            placeholder="Nh·∫≠p n·ªôi dung th√¥ng b√°o c·ªßa b·∫°n",
            default=self.view.announcement_data["content"],
            style=discord.TextStyle.paragraph,
            max_length=4000
        )
        
        self.add_item(self.content_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        self.view.announcement_data["content"] = self.content_input.value
        await interaction.response.send_message("‚úÖ ƒê√£ thi·∫øt l·∫≠p n·ªôi dung th√¥ng b√°o!", ephemeral=True)
        await self.view.update_builder_embed()


# Modal ƒë·ªÉ nh·∫≠p URL h√¨nh ·∫£nh
class ImageURLModal(discord.ui.Modal):
    def __init__(self, view):
        super().__init__(title="Th√™m h√¨nh ·∫£nh")
        self.view = view
        
        self.image_url_input = discord.ui.TextInput(
            label="URL h√¨nh ·∫£nh",
            placeholder="Nh·∫≠p URL h√¨nh ·∫£nh c·ªßa b·∫°n (ƒë·ªÉ tr·ªëng ƒë·ªÉ x√≥a)",
            default=self.view.announcement_data["image_url"] or "",
            required=False
        )
        
        self.add_item(self.image_url_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        url = self.image_url_input.value.strip()
        if url:
            if url.startswith(('http://', 'https://')) and any(url.endswith(ext) for ext in ['.png', '.jpg', '.jpeg', '.gif', '.webp']):
                self.view.announcement_data["image_url"] = url
                await interaction.response.send_message("‚úÖ ƒê√£ th√™m h√¨nh ·∫£nh v√†o th√¥ng b√°o!", ephemeral=True)
            else:
                await interaction.response.send_message("‚ùå URL kh√¥ng h·ª£p l·ªá! URL ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng http:// ho·∫∑c https:// v√† k·∫øt th√∫c b·∫±ng .png, .jpg, .jpeg, .gif ho·∫∑c .webp", ephemeral=True)
                return
        else:
            self.view.announcement_data["image_url"] = None
            await interaction.response.send_message("‚úÖ ƒê√£ x√≥a h√¨nh ·∫£nh kh·ªèi th√¥ng b√°o!", ephemeral=True)
        
        await self.view.update_builder_embed()


@admin_announcement.error
async def admin_announcement_error(ctx, error):
    """X·ª≠ l√Ω l·ªói cho l·ªánh tb"""
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå Thi·∫øu quy·ªÅn",
            description="B·∫°n c·∫ßn c√≥ quy·ªÅn Administrator ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed, delete_after=10)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed, delete_after=10)


# 1. Th√™m x·ª≠ l√Ω l·ªánh kh√¥ng h·ª£p l·ªá
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandError) and ctx.command and ctx.command.name in ['kick', 'ban', 'dms']:
        # Kh√¥ng l√†m g√¨ v√¨ l·ªói ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong decorator owner_only
        pass
    # X·ª≠ l√Ω c√°c l·ªói kh√°c nh∆∞ trong code g·ªëc
    elif isinstance(error, commands.CommandNotFound):
        embed = discord.Embed(
            title="‚ùì L·ªánh kh√¥ng h·ª£p l·ªá",
            description="L·ªánh b·∫°n v·ª´a nh·∫≠p kh√¥ng t·ªìn t·∫°i ho·∫∑c sai c√∫ ph√°p.",
            color=discord.Color.orange())
        embed.add_field(
            name="C·∫ßn tr·ª£ gi√∫p?",
            value="Vui l√≤ng s·ª≠ d·ª•ng l·ªánh `.stvh` ƒë·ªÉ xem danh s√°ch c√°c l·ªánh c√≥ s·∫µn.",
            inline=False)
        embed.add_field(
            name="K√™nh ch∆°i game",
            value=f"T·∫•t c·∫£ c√°c l·ªánh ch∆°i game ch·ªâ ho·∫°t ƒë·ªông trong <#{GAME_CHANNEL_ID}>",
            inline=False)
        await ctx.send(embed=embed)


# 3. Th√™m l·ªánh ƒëo chi·ªÅu cao (kh√¥ng c·∫ßn check_channel)
@bot.command(name='howheight', aliases=['chieucho', 'cao'])
async def howheight(ctx, member: discord.Member = None):
    """Ki·ªÉm tra chi·ªÅu cao c·ªßa m·ªôt th√†nh vi√™n v·ªõi k·∫øt qu·∫£ ng·∫´u nhi√™n"""
    # Ki·ªÉm tra cooldown ƒë·ªÉ tr√°nh spam
    user_id = ctx.author.id
    current_time = datetime.now()
    
    # S·ª≠ d·ª•ng c√πng dict howgay_cooldown
    if user_id in howgay_cooldown:
        time_since_last_use = (current_time - howgay_cooldown[user_id]).total_seconds()
        if time_since_last_use < 30:  # 30 gi√¢y cooldown
            remaining = int(30 - time_since_last_use)
            await ctx.send(f"‚è≥ Vui l√≤ng ƒë·ª£i {remaining} gi√¢y n·ªØa tr∆∞·ªõc khi d√πng l·∫°i l·ªánh n√†y.")
            return
    
    # C·∫≠p nh·∫≠t th·ªùi gian s·ª≠ d·ª•ng
    howgay_cooldown[user_id] = current_time
    
    # X√°c ƒë·ªãnh ng∆∞·ªùi ƒë∆∞·ª£c ki·ªÉm tra
    target = member or ctx.author
    
    # T√¨m role L√πn trong server, t·∫°o n·∫øu kh√¥ng c√≥
    short_role = discord.utils.get(ctx.guild.roles, name="üßô L√πn")
    if not short_role:
        try:
            short_role = await ctx.guild.create_role(
                name="üßô L√πn",
                color=discord.Color.dark_gold(),
                reason="T·∫°o role cho l·ªánh howheight"
            )
        except:
            short_role = None
    
    # X√°c ƒë·ªãnh chi·ªÅu cao
    # N·∫øu ng∆∞·ªùi d√πng l√† admin, chi·ªÅu cao t·ª´ 1m70 ƒë·∫øn 1m90
    if target.guild_permissions.administrator:
        height = random.randint(170, 190)
    elif target.bot:
        height = 200  # Bot cao v√∫t
    else:
        height = random.randint(140, 190)  # 140cm - 190cm
    
    # Format hi·ªÉn th·ªã chi·ªÅu cao
    height_display = f"{height // 100}m{height % 100:02d}"
    
    # T·∫°o bi·ªÉu t∆∞·ª£ng d·ª±a v√†o chi·ªÅu cao
    if height < 150:
        emoji = "üßô"
        color = discord.Color.dark_gold()
        message = "Qu√° l√πn! Minion tr√¥ng c√≤n cao h∆°n!"
    elif height < 160:
        emoji = "üßù"
        color = discord.Color.gold()
        message = "H∆°i l√πn m·ªôt ch√∫t, nh∆∞ng v·∫´n d·ªÖ th∆∞∆°ng!"
    elif height < 170:
        emoji = "üôÇ"
        color = discord.Color.blue()
        message = "Chi·ªÅu cao trung b√¨nh, kh√° l√† chu·∫©n!"
    elif height < 180:
        emoji = "üèÉ"
        color = discord.Color.green()
        message = "Chi·ªÅu cao l√Ω t∆∞·ªüng! Perfect!"
    else:
        emoji = "üèÄ"
        color = discord.Color.purple()
        message = "Cao qu√°! C√≥ ƒëi thi b√≥ng r·ªï kh√¥ng?"
    
    # T·∫°o progress bar
    height_percent = min(100, int((height - 140) / 60 * 100))  # 140cm-200cm map to 0-100%
    progress_bar = "üü©" * (height_percent // 10) + "‚¨ú" * ((100 - height_percent) // 10)
    
    # T·∫°o embed
    embed = discord.Embed(
        title=f"üìè M√°y ƒëo chi·ªÅu cao",
        description=f"Chi·ªÅu cao c·ªßa {target.mention}",
        color=color
    )
    embed.add_field(
        name="K·∫øt qu·∫£", 
        value=f"**{height_display}** {emoji}", 
        inline=False
    )
    embed.add_field(
        name="M·ª©c ƒë·ªô", 
        value=progress_bar, 
        inline=False
    )
    embed.add_field(
        name="Nh·∫≠n x√©t", 
        value=message, 
        inline=False
    )
    embed.set_thumbnail(url=target.display_avatar.url)
    
    # G·ª≠i k·∫øt qu·∫£
    await ctx.send(embed=embed)
    
    # N·∫øu height < 155cm, th√™m role L√πn trong 1 gi·ªù
    if height < 155 and short_role and not target.bot and target.id != ctx.guild.owner_id:
        try:
            await target.add_roles(short_role)
            
            # Th√¥ng b√°o v·ªÅ vi·ªác th√™m role
            dm_embed = discord.Embed(
                title="üßô B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c role L√πn!",
                description="B·∫°n qu√° l√πn n√™n ƒë√£ ƒë∆∞·ª£c th√™m role L√πn trong 1 gi·ªù.",
                color=discord.Color.dark_gold()
            )
            dm_embed.add_field(
                name="K·∫øt qu·∫£", 
                value=f"Chi·ªÅu cao: **{height_display}**", 
                inline=True
            )
            dm_embed.add_field(
                name="Th·ªùi h·∫°n", 
                value="Role s·∫Ω t·ª± ƒë·ªông b·ªã g·ª° sau 1 gi·ªù", 
                inline=True
            )
            
            try:
                await target.send(embed=dm_embed)
            except:
                pass  # B·ªè qua n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM
                
            # G·ª° role sau 1 gi·ªù
            bot.loop.create_task(remove_short_role_after_duration(target.id, ctx.guild.id, short_role.id))
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ th√™m role L√πn: {str(e)}")

# H√†m ph·ª• tr·ª£ ƒë·ªÉ g·ª° role L√πn sau 1 gi·ªù
async def remove_short_role_after_duration(user_id, guild_id, role_id):
    """G·ª° role L√πn sau 1 gi·ªù"""
    await asyncio.sleep(3600)  # 1 gi·ªù = 3600 gi√¢y
    
    # T√¨m guild
    guild = bot.get_guild(guild_id)
    if not guild:
        return
        
    # T√¨m member
    member = guild.get_member(user_id)
    if not member:
        return
        
    # T√¨m role
    role = guild.get_role(role_id)
    if not role or role not in member.roles:
        return
        
    # G·ª° role
    try:
        await member.remove_roles(role)
        
        # Th√¥ng b√°o qua DM
        try:
            dm_embed = discord.Embed(
                title="üßô Role L√πn ƒë√£ h·∫øt h·∫°n",
                description="Role L√πn t·∫°m th·ªùi c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª° b·ªè sau 1 gi·ªù.",
                color=discord.Color.blue()
            )
            await member.send(embed=dm_embed)
        except:
            pass  # B·ªè qua n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM
    except:
        pass  # B·ªè qua n·∫øu kh√¥ng g·ª° ƒë∆∞·ª£c role


@bot.command(name='howrb', aliases=['drinklevel', 'ruou', 'bia'])
async def how_drink(ctx, member: discord.Member = None):
    """Ki·ªÉm tra kh·∫£ nƒÉng u·ªëng r∆∞·ª£u/bia c·ªßa m·ªôt th√†nh vi√™n v·ªõi k·∫øt qu·∫£ ng·∫´u nhi√™n"""
    target = member or ctx.author

    # T√≠nh to√°n kh·∫£ nƒÉng u·ªëng
    beer_level = random.randint(2, 24)  # S·ªë lon bia c√≥ th·ªÉ u·ªëng (2-24 lon)
    wine_level = random.randint(1, 12)  # S·ªë ly r∆∞·ª£u c√≥ th·ªÉ u·ªëng (1-12 ly)
    tolerance = random.randint(1, 100)  # ƒê·ªô ch·ªãu ƒë·ª±ng (%)

    # X√°c ƒë·ªãnh m·ª©c ƒë·ªô v√† th√¥ng ƒëi·ªáp
    if beer_level < 5:
        level_text = "G√† qu√°! M·ªõi v√†i lon ƒë√£ ng√£"
        emoji = "üê£"
        color = discord.Color.light_grey()
    elif beer_level < 10:
        level_text = "Kh√° y·∫øu, c·∫ßn r√®n luy·ªán th√™m"
        emoji = "üêî"
        color = discord.Color.teal()
    elif beer_level < 15:
        level_text = "Kh·∫£ nƒÉng u·ªëng trung b√¨nh, c√≥ th·ªÉ ƒë·ªëi ƒë·∫ßu v·ªõi d√¢n nh·∫≠u"
        emoji = "ü¶ä"
        color = discord.Color.blue()
    elif beer_level < 20:
        level_text = "Cao th·ªß r·ªìi ƒë·∫•y! U·ªëng nh∆∞ h≈© ch√¨m!"
        emoji = "üêò"
        color = discord.Color.orange()
    else:
        level_text = "Qu√°i v·∫≠t bia! Kh√¥ng c√≥ ƒë·ªëi th·ªß!"
        emoji = "üêâ"
        color = discord.Color.gold()

    # T·∫°o thanh tr·∫°ng th√°i
    beer_bar = "üç∫" * (beer_level // 3) + "‚¨ú" * (8 - (beer_level // 3))
    wine_bar = "üç∑" * (wine_level // 2) + "‚¨ú" * (6 - (wine_level // 2))

    # T·∫°o embed
    embed = discord.Embed(title=f"üçª M√°y ƒëo kh·∫£ nƒÉng u·ªëng r∆∞·ª£u bia",
                          description=f"Kh·∫£ nƒÉng u·ªëng c·ªßa {target.mention}",
                          color=color)

    embed.add_field(name="üç∫ Kh·∫£ nƒÉng u·ªëng bia",
                    value=f"**{beer_level} lon**\n{beer_bar}",
                    inline=False)

    embed.add_field(name="üç∑ Kh·∫£ nƒÉng u·ªëng r∆∞·ª£u",
                    value=f"**{wine_level} ly**\n{wine_bar}",
                    inline=False)

    embed.add_field(name="üí™ ƒê·ªô ch·ªãu ƒë·ª±ng",
                    value=f"**{tolerance}%**",
                    inline=True)

    embed.add_field(name="üìä ƒê√°nh gi√°",
                    value=f"{emoji} {level_text}",
                    inline=True)

    embed.set_thumbnail(url=target.display_avatar.url)
    embed.set_footer(
        text="Nh·∫Øc nh·ªü: U·ªëng c√≥ tr√°ch nhi·ªám, kh√¥ng l√°i xe khi ƒë√£ u·ªëng r∆∞·ª£u bia!"
    )

    await ctx.send(embed=embed)


# T·∫°o l·ªánh ƒë·ªÉ nh·∫Øc nh·ªü ng∆∞·ªùi d√πng ƒëi ƒë·∫øn k√™nh ch∆°i game
@bot.command(name='gamechannel', aliases=['gc'])
async def game_channel(ctx):
    """Hi·ªÉn th·ªã link k√™nh ch∆°i game"""
    embed = discord.Embed(
        title="üéÆ K√™nh Ch∆°i Game",
        description=
        f"T·∫•t c·∫£ c√°c l·ªánh ch∆°i game ch·ªâ ho·∫°t ƒë·ªông trong k√™nh <#{GAME_CHANNEL_ID}>",
        color=discord.Color.blue())
    embed.add_field(
        name="üîó Li√™n k·∫øt nhanh",
        value=f"[Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ ƒë·∫øn k√™nh ch∆°i game]({GAME_CHANNEL_LINK})",
        inline=False)
    embed.set_footer(
        text="ƒê·∫£m b·∫£o b·∫°n ƒëang ·ªü k√™nh ƒë√∫ng ƒë·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh bot")
    await ctx.send(embed=embed)


# Theo d√µi ng∆∞·ªùi th·∫Øng cu·ªôc fight g·∫ßn nh·∫•t v√† c√≥ quy·ªÅn kill
recent_fight_winners = {}  # {user_id: [target_id, timestamp]}


@bot.command(name='fight')
@check_channel()
@check_game_enabled('fight')
async def fight_command(ctx, member: discord.Member = None, bet: str = None):
    """Th√°ch ƒë·∫•u v·ªõi ng∆∞·ªùi ch∆°i kh√°c - Phi√™n b·∫£n n√¢ng c·∫•p"""
    if member is None or bet is None:
        embed = discord.Embed(
            title="‚öîÔ∏è Fight - H∆∞·ªõng D·∫´n",
            description=
            "Th√°ch ƒë·∫•u v·ªõi ng∆∞·ªùi ch∆°i kh√°c.\nV√≠ d·ª•: `.fight @t√™n_ng∆∞·ªùi_ch∆°i 50` ho·∫∑c `.fight @t√™n_ng∆∞·ªùi_ch∆°i all`",
            color=discord.Color.blue())
        embed.add_field(
            name="Lu·∫≠t ch∆°i",
            value="- M·ªói ng∆∞·ªùi ch∆°i c√≥ 100 HP v√† 3 d·∫°ng ƒë√≤n t·∫•n c√¥ng\n"
            "- T·∫•n c√¥ng th∆∞·ªùng (‚öîÔ∏è): G√¢y 15-25 s√°t th∆∞∆°ng\n"
            "- T·∫•n c√¥ng m·∫°nh (üó°Ô∏è): G√¢y 30-40 s√°t th∆∞∆°ng nh∆∞ng c√≥ 30% t·ª∑ l·ªá h·ª•t\n"
            "- Chi√™u ƒë·∫∑c bi·ªát (‚ö°): G√¢y 50-60 s√°t th∆∞∆°ng nh∆∞ng ch·ªâ d√πng ƒë∆∞·ª£c 1 l·∫ßn",
            inline=False)
        embed.add_field(
            name="Ph·∫ßn th∆∞·ªüng",
            value="Ng∆∞·ªùi th·∫Øng nh·∫≠n x1.5 ti·ªÅn c∆∞·ª£c v√† c√≥ quy·ªÅn timeout ƒë·ªëi th·ªß",
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id
    target_id = member.id

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra ng∆∞·ªùi ch∆°i kh√¥ng th·ªÉ th√°ch ƒë·∫•u ch√≠nh m√¨nh
    if user_id == target_id:
        embed = discord.Embed(
            title="‚öîÔ∏è Fight",
            description="B·∫°n kh√¥ng th·ªÉ th√°ch ƒë·∫•u ch√≠nh m√¨nh!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra s·ªë ti·ªÅn c∆∞·ª£c
    if bet_amount <= 0:
        embed = discord.Embed(title="‚öîÔ∏è Fight",
                              description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0 xu.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra c·∫£ hai ng∆∞·ªùi ch∆°i c√≥ ƒë·ªß xu kh√¥ng
    if currency[user_id] < bet_amount:
        embed = discord.Embed(
            title="‚öîÔ∏è Fight",
            description=
            f"{ctx.author.mention}, b·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c! B·∫°n hi·ªán c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[target_id] < bet_amount:
        embed = discord.Embed(
            title="‚öîÔ∏è Fight",
            description=
            f"{member.mention} kh√¥ng ƒë·ªß xu ƒë·ªÉ ch·∫•p nh·∫≠n th√°ch ƒë·∫•u! H·ªç hi·ªán c√≥ {currency[target_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # T·∫°o th√¥ng b√°o th√°ch ƒë·∫•u
    embed = discord.Embed(
        title="‚öîÔ∏è TH√ÅCH ƒê·∫§U!",
        description=
        f"{ctx.author.mention} th√°ch ƒë·∫•u {member.mention} v·ªõi {bet_amount} xu!",
        color=discord.Color.gold())
    embed.add_field(
        name="Th√¥ng tin tr·∫≠n ƒë·∫•u",
        value=
        "- M·ªói ng∆∞·ªùi ch∆°i c√≥ 100 HP\n- Ba d·∫°ng t·∫•n c√¥ng: Th∆∞·ªùng, M·∫°nh, ƒê·∫∑c bi·ªát\n- Ng∆∞·ªùi h·∫øt m√°u tr∆∞·ªõc s·∫Ω thua",
        inline=False)
    embed.add_field(
        name="C√°ch ch·∫•p nh·∫≠n",
        value=f"{member.mention} h√£y ·∫•n n√∫t 'Ch·∫•p nh·∫≠n' ƒë·ªÉ b·∫Øt ƒë·∫ßu!",
        inline=False)

    # T·∫°o c√°c n√∫t ph·∫£n h·ªìi
    accept_button = discord.ui.Button(label="Ch·∫•p nh·∫≠n",
                                      style=discord.ButtonStyle.green,
                                      emoji="‚úÖ")
    decline_button = discord.ui.Button(label="T·ª´ ch·ªëi",
                                       style=discord.ButtonStyle.red,
                                       emoji="‚ùå")

    view = discord.ui.View(timeout=30)
    view.add_item(accept_button)
    view.add_item(decline_button)

    challenge_msg = await ctx.send(embed=embed, view=view)

    async def accept_callback(interaction):
        if interaction.user.id != target_id:
            await interaction.response.send_message(
                "B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u!", ephemeral=True)
            return

        # V√¥ hi·ªáu h√≥a n√∫t ch·∫•p nh·∫≠n/t·ª´ ch·ªëi
        for child in view.children:
            child.disabled = True
        await interaction.response.edit_message(view=view)

        # Kh·ªüi t·∫°o tr·∫≠n ƒë·∫•u
        player1_hp = 100
        player2_hp = 100
        player1_special = True
        player2_special = True
        current_turn = ctx.author  # Ng∆∞·ªùi th√°ch ƒë·∫•u ƒëi tr∆∞·ªõc

        # T·∫°o view cho c√°c n√∫t t·∫•n c√¥ng
        class AttackView(discord.ui.View):

            def __init__(self, player):
                super().__init__(timeout=30)
                self.player = player
                self.choice = None
                special_disabled = (player.id == user_id
                                    and not player1_special) or (
                                        player.id == target_id
                                        and not player2_special)

                # N√∫t t·∫•n c√¥ng th∆∞·ªùng
                normal_attack = discord.ui.Button(
                    label="T·∫•n c√¥ng th∆∞·ªùng (15-25)",
                    style=discord.ButtonStyle.primary,
                    emoji="‚öîÔ∏è",
                    custom_id="normal")
                normal_attack.callback = self.normal_callback
                self.add_item(normal_attack)

                # N√∫t t·∫•n c√¥ng m·∫°nh
                strong_attack = discord.ui.Button(
                    label="T·∫•n c√¥ng m·∫°nh (30-40, 30% miss)",
                    style=discord.ButtonStyle.danger,
                    emoji="üó°Ô∏è",
                    custom_id="strong")
                strong_attack.callback = self.strong_callback
                self.add_item(strong_attack)

                # N√∫t chi√™u ƒë·∫∑c bi·ªát
                special_attack = discord.ui.Button(
                    label="Chi√™u ƒë·∫∑c bi·ªát (50-60)",
                    style=discord.ButtonStyle.success,
                    emoji="‚ö°",
                    disabled=special_disabled,
                    custom_id="special")
                special_attack.callback = self.special_callback
                self.add_item(special_attack)

            async def normal_callback(self, interaction):
                if interaction.user.id != self.player.id:
                    await interaction.response.send_message(
                        "Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!", ephemeral=True)
                    return
                self.choice = "normal"
                for child in self.children:
                    child.disabled = True
                await interaction.response.edit_message(view=self)
                self.stop()

            async def strong_callback(self, interaction):
                if interaction.user.id != self.player.id:
                    await interaction.response.send_message(
                        "Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!", ephemeral=True)
                    return
                self.choice = "strong"
                for child in self.children:
                    child.disabled = True
                await interaction.response.edit_message(view=self)
                self.stop()

            async def special_callback(self, interaction):
                if interaction.user.id != self.player.id:
                    await interaction.response.send_message(
                        "Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!", ephemeral=True)
                    return
                self.choice = "special"
                for child in self.children:
                    child.disabled = True
                await interaction.response.edit_message(view=self)
                self.stop()

        # B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p tr·∫≠n ƒë·∫•u
        turn_count = 0
        battle_log = []

        while player1_hp > 0 and player2_hp > 0 and turn_count < 10:  # T·ªëi ƒëa 10 l∆∞·ª£t
            turn_count += 1

            # Hi·ªÉn th·ªã tr·∫°ng th√°i tr·∫≠n ƒë·∫•u
            status_embed = discord.Embed(
                title=f"‚öîÔ∏è L∆∞·ª£t {turn_count}",
                description=f"L∆∞·ª£t c·ªßa {current_turn.mention}",
                color=discord.Color.blue())

            # Hi·ªÉn th·ªã thanh m√°u
            p1_health_bar = "‚ù§Ô∏è" * (player1_hp // 10) + "üñ§" * (
                (100 - player1_hp) // 10)
            p2_health_bar = "‚ù§Ô∏è" * (player2_hp // 10) + "üñ§" * (
                (100 - player2_hp) // 10)

            status_embed.add_field(
                name=f"{ctx.author.display_name} - {player1_hp}/100 HP",
                value=p1_health_bar,
                inline=False)
            status_embed.add_field(
                name=f"{member.display_name} - {player2_hp}/100 HP",
                value=p2_health_bar,
                inline=False)

            if battle_log:
                status_embed.add_field(
                    name="Di·ªÖn bi·∫øn tr·∫≠n ƒë·∫•u",
                    value="\n".join(
                        battle_log[-3:]),  # Hi·ªÉn th·ªã 3 d√≤ng g·∫ßn nh·∫•t
                    inline=False)

            # Hi·ªÉn th·ªã n√∫t t·∫•n c√¥ng cho ng∆∞·ªùi ch∆°i hi·ªán t·∫°i
            attack_view = AttackView(current_turn)
            attack_msg = await interaction.followup.send(embed=status_embed,
                                                         view=attack_view)

            # Ch·ªù ng∆∞·ªùi ch∆°i ch·ªçn ƒë√≤n t·∫•n c√¥ng
            timeout = await attack_view.wait()
            if timeout or attack_view.choice is None:
                battle_log.append(
                    f"‚è±Ô∏è {current_turn.display_name} ƒë√£ b·ªè l·ª° l∆∞·ª£t!")
                # Ng∆∞·ªùi c√≤n l·∫°i t·ª± ƒë·ªông th·∫Øng n·∫øu ƒë·ªëi th·ªß b·ªè l·ª° l∆∞·ª£t
                if current_turn == ctx.author:
                    player1_hp = 0
                else:
                    player2_hp = 0
                break

            # X·ª≠ l√Ω ƒë√≤n t·∫•n c√¥ng
            attacker = current_turn.display_name
            defender = member.display_name if current_turn == ctx.author else ctx.author.display_name

            if attack_view.choice == "normal":
                damage = random.randint(15, 25)
                hit_chance = 100  # 100% hit
                attack_name = "t·∫•n c√¥ng th∆∞·ªùng"
                attack_emoji = "‚öîÔ∏è"
            elif attack_view.choice == "strong":
                damage = random.randint(30, 40)
                hit_chance = 70  # 70% hit chance
                attack_name = "t·∫•n c√¥ng m·∫°nh"
                attack_emoji = "üó°Ô∏è"
            else:  # special
                damage = random.randint(50, 60)
                hit_chance = 100  # 100% hit
                attack_name = "chi√™u ƒë·∫∑c bi·ªát"
                attack_emoji = "‚ö°"
                # ƒê√°nh d·∫•u ƒë√£ s·ª≠ d·ª•ng chi√™u ƒë·∫∑c bi·ªát
                if current_turn == ctx.author:
                    player1_special = False
                else:
                    player2_special = False

            # Ki·ªÉm tra ƒë√≤n t·∫•n c√¥ng c√≥ tr√∫ng kh√¥ng
            if random.randint(1, 100) <= hit_chance:
                # Tr√∫ng ƒë√≤n
                if current_turn == ctx.author:
                    player2_hp -= damage
                    player2_hp = max(0, player2_hp)  # ƒê·∫£m b·∫£o HP kh√¥ng √¢m
                else:
                    player1_hp -= damage
                    player1_hp = max(0, player1_hp)  # ƒê·∫£m b·∫£o HP kh√¥ng √¢m

                battle_log.append(
                    f"{attack_emoji} {attacker} d√πng {attack_name} g√¢y {damage} s√°t th∆∞∆°ng cho {defender}!"
                )
            else:
                # H·ª•t ƒë√≤n
                battle_log.append(
                    f"üí® {attacker} d√πng {attack_name} nh∆∞ng ƒë√£ h·ª•t!")

            # Chuy·ªÉn l∆∞·ª£t
            current_turn = member if current_turn == ctx.author else ctx.author

            # X√≥a tin nh·∫Øn c≈©
            try:
                await attack_msg.delete()
            except:
                pass

        # X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng
        winner = ctx.author if player2_hp <= 0 else member
        loser = member if winner == ctx.author else ctx.author

        # Thi√™n v·ªã ng∆∞·ªùi ch∆°i trong whitelist n·∫øu c·∫ßn
        if is_whitelisted(ctx.author.id) and winner != ctx.author:
            # ƒê·∫£o ng∆∞·ª£c k·∫øt qu·∫£ cho ng∆∞·ªùi trong whitelist
            winner = ctx.author
            loser = member
            battle_log.append(
                f"‚ö° {ctx.author.display_name} ƒë√£ b·∫•t ng·ªù l·ªôi ng∆∞·ª£c d√≤ng!")

        # X·ª≠ l√Ω ti·ªÅn c∆∞·ª£c
        winnings = int(bet_amount * 1.5)
        currency[winner.id] += winnings - bet_amount
        currency[loser.id] -= bet_amount

        # L∆∞u ng∆∞·ªùi th·∫Øng v√†o danh s√°ch c√≥ quy·ªÅn kill
        recent_fight_winners[winner.id] = [loser.id, datetime.now()]

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
        final_embed = discord.Embed(
            title="üèÜ K·∫æT QU·∫¢ TR·∫¨N ƒê·∫§U!",
            description=f"**{winner.display_name}** ƒë√£ chi·∫øn th·∫Øng!",
            color=discord.Color.green())

        # Hi·ªÉn th·ªã HP c√≤n l·∫°i
        final_hp1 = player1_hp if winner == ctx.author else 0
        final_hp2 = player2_hp if winner == member else 0

        final_embed.add_field(
            name="Chi ti·∫øt tr·∫≠n ƒë·∫•u",
            value=
            f"{ctx.author.display_name}: {final_hp1}/100 HP\n{member.display_name}: {final_hp2}/100 HP",
            inline=False)

        final_embed.add_field(
            name="Ph·∫ßn th∆∞·ªüng",
            value=
            f"- {winner.mention} nh·∫≠n ƒë∆∞·ª£c {winnings} xu (x1.5)\n- Quy·ªÅn timeout ƒë·ªëi th·ªß v·ªõi l·ªánh `.kill @{loser.display_name} [ph√∫t]`",
            inline=False)

        # Hi·ªÉn th·ªã nh·∫≠t k√Ω tr·∫≠n ƒë·∫•u
        final_embed.add_field(
            name="Di·ªÖn bi·∫øn tr·∫≠n ƒë·∫•u",
            value="\n".join(battle_log[-5:]),  # Hi·ªÉn th·ªã 5 d√≤ng cu·ªëi
            inline=False)

        await interaction.followup.send(embed=final_embed)

    async def decline_callback(interaction):
        if interaction.user.id != target_id:
            await interaction.response.send_message(
                "B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u!", ephemeral=True)
            return

        # V√¥ hi·ªáu h√≥a c√°c n√∫t
        for child in view.children:
            child.disabled = True
        await interaction.response.edit_message(view=view)

        # Th√¥ng b√°o t·ª´ ch·ªëi
        decline_embed = discord.Embed(
            title="‚ùå TH√ÅCH ƒê·∫§U B·ªä T·ª™ CH·ªêI!",
            description=
            f"{member.mention} ƒë√£ t·ª´ ch·ªëi l·ªùi th√°ch ƒë·∫•u c·ªßa {ctx.author.mention}!",
            color=discord.Color.red())
        await challenge_msg.edit(embed=decline_embed)

    # G√°n callback cho c√°c n√∫t
    accept_button.callback = accept_callback
    decline_button.callback = decline_callback

    # ƒê·∫∑t timeout cho th√°ch ƒë·∫•u
    await asyncio.sleep(30)

    # Ki·ªÉm tra n·∫øu c√°c n√∫t v·∫´n c√≤n ho·∫°t ƒë·ªông (ch∆∞a c√≥ ph·∫£n h·ªìi)
    if not accept_button.disabled:
        for child in view.children:
            child.disabled = True
        expired_embed = discord.Embed(
            title="‚è±Ô∏è TH√ÅCH ƒê·∫§U H·∫æT H·∫†N!",
            description=
            f"{member.mention} kh√¥ng ph·∫£n h·ªìi k·ªãp th·ªùi v·ªõi l·ªùi th√°ch ƒë·∫•u c·ªßa {ctx.author.mention}!",
            color=discord.Color.grey())
        await challenge_msg.edit(embed=expired_embed, view=view)


@bot.command(name='kill')
@check_channel()
async def kill_command(ctx,
                       member: discord.Member = None,
                       minutes: int = None):
    """Cho ph√©p ng∆∞·ªùi th·∫Øng Fight timeout ƒë·ªëi th·ªß th√™m th·ªùi gian"""
    if member is None or minutes is None:
        embed = discord.Embed(
            title="‚ò†Ô∏è Kill - H∆∞·ªõng D·∫´n",
            description=
            "Cho ph√©p timeout ng∆∞·ªùi thua tr·∫≠n Fight.\nV√≠ d·ª•: `.kill @t√™n_ng∆∞·ªùi_ch∆°i 3`",
            color=discord.Color.blue())
        embed.add_field(
            name="L∆∞u √Ω",
            value=
            "- Ch·ªâ ng∆∞·ªùi th·∫Øng tr·∫≠n Fight m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng\n- Th·ªùi gian timeout t·ª´ 1-5 ph√∫t",
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id
    target_id = member.id

    # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh kill
    if user_id not in recent_fight_winners or recent_fight_winners[user_id][
            0] != target_id:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë∆∞·ª£c ph√©p",
            description=
            "B·∫°n kh√¥ng c√≥ quy·ªÅn timeout ng∆∞·ªùi ch∆°i n√†y! B·∫°n ph·∫£i th·∫Øng h·ªç trong m·ªôt tr·∫≠n Fight tr∆∞·ªõc.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra th·ªùi gian timeout c√≥ h·ª£p l·ªá kh√¥ng
    if minutes < 1 or minutes > 5:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng h·ª£p l·ªá",
            description="Th·ªùi gian timeout ph·∫£i t·ª´ 1 ƒë·∫øn 5 ph√∫t.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra th·ªùi gian t·ª´ l·∫ßn fight cu·ªëi
    fight_time = recent_fight_winners[user_id][1]
    time_passed = (datetime.now() - fight_time).total_seconds()
    if time_passed > 300:  # 5 ph√∫t = 300 gi√¢y
        embed = discord.Embed(
            title="‚è±Ô∏è H·∫øt h·∫°n",
            description=
            "Quy·ªÅn s·ª≠ d·ª•ng l·ªánh kill ƒë√£ h·∫øt h·∫°n! B·∫°n ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong v√≤ng 5 ph√∫t sau khi th·∫Øng Fight.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Th·ª±c hi·ªán timeout
    try:
        timeout_until = discord.utils.utcnow() + timedelta(minutes=5)
        await member.timeout(
            timeout_until,
            reason=f"B·ªã kill b·ªüi {ctx.author.display_name} sau khi thua Fight")

        embed = discord.Embed(
            title="‚ò†Ô∏è KILL TH√ÄNH C√îNG!",
            description=
            f"{ctx.author.mention} ƒë√£ timeout {member.mention} th√™m {minutes} ph√∫t!",
            color=discord.Color.purple())
        embed.set_footer(text="Chi·∫øn th·∫Øng thu·ªôc v·ªÅ k·∫ª m·∫°nh!")
        await ctx.send(embed=embed)

        # X√≥a quy·ªÅn kill sau khi s·ª≠ d·ª•ng
        del recent_fight_winners[user_id]

    except Exception as e:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"Kh√¥ng th·ªÉ timeout ng∆∞·ªùi ch∆°i n√†y: {str(e)}",
            color=discord.Color.red())
        await ctx.send(embed=embed)

@bot.command(name='bacaopvp', aliases=['baocaopvp', 'bacao', 'bacaobet'])
@check_channel()
@check_game_enabled('bacaopvp')
async def bacaopvp(ctx, member: discord.Member = None, bet: str = None):
    """Tr√≤ ch∆°i B√†i Ba C√†o PvP - th·∫•p l√° thua v√† b·ªã timeout"""
    if member is None or bet is None:
        embed = discord.Embed(
            title="üÉè Ba C√†o PvP - H∆∞·ªõng D·∫´n",
            description="Th√°ch ƒë·∫•u b√†i Ba C√†o v·ªõi ng∆∞·ªùi ch∆°i kh√°c.\nV√≠ d·ª•: `.bacaopvp @t√™n_ng∆∞·ªùi_ch∆°i 50`",
            color=discord.Color.blue())
        embed.add_field(
            name="Lu·∫≠t ch∆°i",
            value="- M·ªói ng∆∞·ªùi ch∆°i nh·∫≠n 3 l√° b√†i\n"
                 "- ƒêi·ªÉm ƒë∆∞·ª£c t√≠nh b·∫±ng t·ªïng ƒëi·ªÉm 3 l√° mod 10 (ch·ªâ l·∫•y ch·ªØ s·ªë cu·ªëi)\n"
                 "- J/Q/K = 10, A = 1\n"
                 "- ƒêi·ªÉm cao nh·∫•t l√† 9 ƒëi·ªÉm\n"
                 "- C√≥ c√°c k·∫øt h·ª£p ƒë·∫∑c bi·ªát: Ba ti√™n (3 K/Q/J), Ba ƒë·ªìng (3 l√° c√πng s·ªë), S√°p (ƒë√¥i c√πng + 1 l√°)",
            inline=False)
        embed.add_field(
            name="Ph·∫ßn th∆∞·ªüng",
            value="- Ng∆∞·ªùi th·∫Øng nh·∫≠n x1.5 ti·ªÅn c∆∞·ª£c\n"
                 "- Ng∆∞·ªùi thua b·ªã timeout 5 ph√∫t",
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id
    target_id = member.id

    # Ki·ªÉm tra ng∆∞·ªùi ch∆°i kh√¥ng th·ªÉ th√°ch ƒë·∫•u ch√≠nh m√¨nh
    if user_id == target_id:
        embed = discord.Embed(
            title="üÉè Ba C√†o PvP",
            description="B·∫°n kh√¥ng th·ªÉ th√°ch ƒë·∫•u ch√≠nh m√¨nh!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra s·ªë ti·ªÅn c∆∞·ª£c
    if bet_amount <= 0:
        embed = discord.Embed(title="üÉè Ba C√†o PvP",
                              description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0 xu.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra c·∫£ hai ng∆∞·ªùi ch∆°i c√≥ ƒë·ªß xu kh√¥ng
    if currency[user_id] < bet_amount:
        embed = discord.Embed(
            title="üÉè Ba C√†o PvP",
            description=f"{ctx.author.mention}, b·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c! B·∫°n hi·ªán c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[target_id] < bet_amount:
        embed = discord.Embed(
            title="üÉè Ba C√†o PvP",
            description=f"{member.mention} kh√¥ng ƒë·ªß xu ƒë·ªÉ ch·∫•p nh·∫≠n th√°ch ƒë·∫•u! H·ªç hi·ªán c√≥ {currency[target_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # T·∫°o th√¥ng b√°o th√°ch ƒë·∫•u
    embed = discord.Embed(
        title="üÉè TH√ÅCH ƒê·∫§U B√ÄI BA C√ÄO!",
        description=f"{ctx.author.mention} th√°ch ƒë·∫•u {member.mention} v·ªõi {bet_amount} xu!",
        color=discord.Color.gold())
    embed.add_field(
        name="C√°ch ch∆°i",
        value="M·ªói ng∆∞·ªùi nh·∫≠n 3 l√° b√†i, ng∆∞·ªùi c√≥ ƒëi·ªÉm th·∫•p h∆°n s·∫Ω b·ªã timeout 5 ph√∫t.",
        inline=False)
    embed.add_field(
        name="C√°ch ch·∫•p nh·∫≠n",
        value=f"{member.mention} h√£y ·∫•n n√∫t 'Ch·∫•p nh·∫≠n' ƒë·ªÉ b·∫Øt ƒë·∫ßu!",
        inline=False)

    # T·∫°o c√°c n√∫t ph·∫£n h·ªìi
    accept_button = discord.ui.Button(label="Ch·∫•p nh·∫≠n", style=discord.ButtonStyle.green, emoji="‚úÖ")
    decline_button = discord.ui.Button(label="T·ª´ ch·ªëi", style=discord.ButtonStyle.red, emoji="‚ùå")

    view = discord.ui.View(timeout=30)
    view.add_item(accept_button)
    view.add_item(decline_button)

    challenge_msg = await ctx.send(embed=embed, view=view)

    async def accept_callback(interaction):
        if interaction.user.id != target_id:
            await interaction.response.send_message("B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u!", ephemeral=True)
            return

        # V√¥ hi·ªáu h√≥a n√∫t ch·∫•p nh·∫≠n/t·ª´ ch·ªëi
        for child in view.children:
            child.disabled = True
        await interaction.response.edit_message(view=view)

        # B·∫Øt ƒë·∫ßu tr√≤ ch∆°i
        await play_bacaopvp(interaction, ctx.author, member, bet_amount)

    async def decline_callback(interaction):
        if interaction.user.id != target_id:
            await interaction.response.send_message("B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u!", ephemeral=True)
            return

        # V√¥ hi·ªáu h√≥a c√°c n√∫t
        for child in view.children:
            child.disabled = True
        await interaction.response.edit_message(view=view)

        # Th√¥ng b√°o t·ª´ ch·ªëi
        decline_embed = discord.Embed(
            title="‚ùå TH√ÅCH ƒê·∫§U B·ªä T·ª™ CH·ªêI!",
            description=f"{member.mention} ƒë√£ t·ª´ ch·ªëi l·ªùi th√°ch ƒë·∫•u c·ªßa {ctx.author.mention}!",
            color=discord.Color.red())
        await challenge_msg.edit(embed=decline_embed)

    # G√°n callback cho c√°c n√∫t
    accept_button.callback = accept_callback
    decline_button.callback = decline_callback

    # ƒê·∫∑t timeout cho th√°ch ƒë·∫•u
    await asyncio.sleep(30)

    # Ki·ªÉm tra n·∫øu c√°c n√∫t v·∫´n c√≤n ho·∫°t ƒë·ªông (ch∆∞a c√≥ ph·∫£n h·ªìi)
    if not accept_button.disabled:
        for child in view.children:
            child.disabled = True
        expired_embed = discord.Embed(
            title="‚è±Ô∏è TH√ÅCH ƒê·∫§U H·∫æT H·∫†N!",
            description=f"{member.mention} kh√¥ng ph·∫£n h·ªìi k·ªãp th·ªùi v·ªõi l·ªùi th√°ch ƒë·∫•u c·ªßa {ctx.author.mention}!",
            color=discord.Color.grey())
        await challenge_msg.edit(embed=expired_embed, view=view)

async def play_bacaopvp(interaction, player1, player2, bet_amount):
    """X·ª≠ l√Ω tr√≤ ch∆°i Ba C√†o PvP gi·ªØa hai ng∆∞·ªùi ch∆°i"""
    # Thi·∫øt l·∫≠p b·ªô b√†i
    suits = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è']
    cards = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
    values = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 10, 'Q': 10, 'K': 10}
    
    # T·∫°o v√† tr·ªôn b·ªô b√†i
    deck = [(card, suit) for suit in suits for card in cards]
    random.shuffle(deck)
    
    # Hi·ªáu ·ª©ng ƒëang chia b√†i
    loading_embed = discord.Embed(
        title="üÉè BA C√ÄO PVP - ƒêANG CHIA B√ÄI",
        description="ƒêang chia b√†i cho c√°c ng∆∞·ªùi ch∆°i...",
        color=discord.Color.blue()
    )
    loading_msg = await interaction.followup.send(embed=loading_embed)
    await asyncio.sleep(1.5)
    
    # Chia b√†i cho ng∆∞·ªùi ch∆°i
    player1_hand = [deck.pop() for _ in range(3)]
    player2_hand = [deck.pop() for _ in range(3)]
    
    # Function ƒë·ªÉ t√≠nh ƒëi·ªÉm b√†i
    def calculate_score(hand):
        # T√≠nh ƒëi·ªÉm th√¥ng th∆∞·ªùng - l·∫•y t·ªïng mod 10
        total = sum(values[card[0]] for card in hand) % 10
        
        # Ki·ªÉm tra c√°c k·∫øt h·ª£p ƒë·∫∑c bi·ªát
        # Ba ti√™n (3 l√° J/Q/K)
        if all(card[0] in ['J', 'Q', 'K'] for card in hand):
            return 10, "Ba ti√™n"
        
        # Ba ƒë·ªìng (3 l√° c√πng s·ªë)
        if all(card[0] == hand[0][0] for card in hand):
            return 11, "Ba ƒë·ªìng"
        
        # S√°p (c√≥ 2 l√° gi·ªëng nhau)
        card_values = [card[0] for card in hand]
        for val in card_values:
            if card_values.count(val) >= 2:
                return 12 if total > 0 else 12 + total, "S√°p " + str(total)
        
        # ƒêi·ªÉm th∆∞·ªùng
        return total, f"{total} ƒëi·ªÉm"
    
    # T√≠nh ƒëi·ªÉm cho hai ng∆∞·ªùi ch∆°i
    player1_score, player1_type = calculate_score(player1_hand)
    player2_score, player2_type = calculate_score(player2_hand)
    
    # Format b√†i cho hi·ªÉn th·ªã
    def format_cards(cards):
        return " ".join(f"{card}{suit}" for card, suit in cards)
    
    # Hi·ªáu ·ª©ng hi·ªÉn th·ªã b√†i l·∫ßn l∆∞·ª£t
    # Hi·ªÉn th·ªã b√†i c·ªßa ng∆∞·ªùi ch∆°i 1
    p1_embed = discord.Embed(
        title="üÉè BA C√ÄO PVP - B√ÄI C·ª¶A NG∆Ø·ªúI CH∆†I 1",
        description=f"B√†i c·ªßa {player1.mention}:",
        color=discord.Color.gold()
    )
    p1_embed.add_field(name="B√†i", value=format_cards(player1_hand), inline=False)
    p1_embed.add_field(name="K·∫øt qu·∫£", value=f"{player1_type}", inline=False)
    await loading_msg.edit(embed=p1_embed)
    await asyncio.sleep(2)
    
    # Hi·ªÉn th·ªã b√†i c·ªßa ng∆∞·ªùi ch∆°i 2
    p2_embed = discord.Embed(
        title="üÉè BA C√ÄO PVP - B√ÄI C·ª¶A NG∆Ø·ªúI CH∆†I 2",
        description=f"B√†i c·ªßa {player2.mention}:",
        color=discord.Color.gold()
    )
    p2_embed.add_field(name="B√†i", value=format_cards(player2_hand), inline=False)
    p2_embed.add_field(name="K·∫øt qu·∫£", value=f"{player2_type}", inline=False)
    await loading_msg.edit(embed=p2_embed)
    await asyncio.sleep(2)
    
    # X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng
    if player1_score > player2_score:
        winner = player1
        loser = player2
    elif player2_score > player1_score:
        winner = player2
        loser = player1
    else:
        # Tr∆∞·ªùng h·ª£p h√≤a - ng·∫´u nhi√™n ng∆∞·ªùi th·∫Øng
        winner = random.choice([player1, player2])
        loser = player2 if winner == player1 else player1
    
    # X·ª≠ l√Ω ti·ªÅn c∆∞·ª£c
    winnings = int(bet_amount * 1.5)
    currency[winner.id] += winnings - bet_amount
    currency[loser.id] -= bet_amount
    
    # T·∫°o hi·ªáu ·ª©ng k·ªãch t√≠nh tr∆∞·ªõc khi hi·ªÉn th·ªã k·∫øt qu·∫£
    compare_embed = discord.Embed(
        title="üÉè BA C√ÄO PVP - SO S√ÅNH K·∫æT QU·∫¢",
        description="ƒêang so s√°nh b√†i c·ªßa hai ng∆∞·ªùi ch∆°i...",
        color=discord.Color.gold()
    )
    compare_embed.add_field(
        name=f"{player1.display_name}",
        value=f"B√†i: {format_cards(player1_hand)}\nK·∫øt qu·∫£: {player1_type}",
        inline=True
    )
    compare_embed.add_field(
        name=f"{player2.display_name}",
        value=f"B√†i: {format_cards(player2_hand)}\nK·∫øt qu·∫£: {player2_type}",
        inline=True
    )
    await loading_msg.edit(embed=compare_embed)
    await asyncio.sleep(2)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    result_embed = discord.Embed(
        title="üèÜ K·∫æT QU·∫¢ BA C√ÄO PVP",
        description=f"**{winner.display_name}** ƒë√£ chi·∫øn th·∫Øng!",
        color=discord.Color.green()
    )
    
    result_embed.add_field(
        name=f"{player1.display_name}",
        value=f"B√†i: {format_cards(player1_hand)}\nK·∫øt qu·∫£: {player1_type}",
        inline=True
    )
    result_embed.add_field(
        name=f"{player2.display_name}",
        value=f"B√†i: {format_cards(player2_hand)}\nK·∫øt qu·∫£: {player2_type}",
        inline=True
    )
    
    result_embed.add_field(
        name="Ph·∫ßn th∆∞·ªüng",
        value=f"{winner.mention} nh·∫≠n ƒë∆∞·ª£c {winnings} xu\n{loser.mention} m·∫•t {bet_amount} xu v√† b·ªã timeout 5 ph√∫t",
        inline=False
    )
    
    # Timeout ng∆∞·ªùi thua
    try:
        timeout_until = discord.utils.utcnow() + timedelta(minutes=5)
        await loser.timeout(
            timeout_until,
            reason=f"Thua trong tr√≤ Ba C√†o PvP v·ªõi {winner.display_name}"
        )
        timeout_success = True
    except Exception as e:
        timeout_success = False
        result_embed.add_field(
            name="‚ö†Ô∏è L·ªói timeout",
            value=f"Kh√¥ng th·ªÉ timeout {loser.mention}: {str(e)}",
            inline=False
        )
    
    # C·∫≠p nh·∫≠t d·ªØ li·ªáu xu
    result_embed.add_field(
        name="S·ªë d∆∞ m·ªõi",
        value=f"{winner.mention}: {currency[winner.id]} xu\n{loser.mention}: {currency[loser.id]} xu",
        inline=False
    )
    
    if timeout_success:
        result_embed.set_footer(text=f"{loser.display_name} ƒë√£ b·ªã timeout trong 5 ph√∫t!")
    
    await loading_msg.edit(embed=result_embed)

@bot.command(name='purge')
@commands.has_permissions(administrator=True)
async def purge_messages(ctx, amount: int = None):
    """X√≥a m·ªôt s·ªë l∆∞·ª£ng tin nh·∫Øn ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh (ch·ªâ admin)"""
    if amount is None:
        embed = discord.Embed(
            title="‚ùì Purge - H∆∞·ªõng D·∫´n",
            description="X√≥a m·ªôt s·ªë l∆∞·ª£ng tin nh·∫Øn ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.purge [s·ªë l∆∞·ª£ng]`\nV√≠ d·ª•: `.purge 10` ƒë·ªÉ x√≥a 10 tin nh·∫Øn g·∫ßn nh·∫•t.",
            inline=False)
        embed.add_field(
            name="L∆∞u √Ω",
            value="- Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y\n- S·ªë l∆∞·ª£ng t·ªëi ƒëa l√† 100 tin nh·∫Øn\n- Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn c≈© h∆°n 14 ng√†y",
            inline=False)
        await ctx.send(embed=embed)
        return

    if amount <= 0:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="S·ªë l∆∞·ª£ng tin nh·∫Øn c·∫ßn x√≥a ph·∫£i l·ªõn h∆°n 0.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if amount > 100:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="V√¨ l√Ω do an to√†n, b·∫°n ch·ªâ c√≥ th·ªÉ x√≥a t·ªëi ƒëa 100 tin nh·∫Øn m·ªói l·∫ßn.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # X√≥a tin nh·∫Øn g·ªëc tr∆∞·ªõc
    await ctx.message.delete()

    # X√≥a tin nh·∫Øn theo s·ªë l∆∞·ª£ng
    deleted = await ctx.channel.purge(limit=amount)

    # G·ª≠i th√¥ng b√°o v√† t·ª± ƒë·ªông x√≥a sau 5 gi√¢y
    confirm_message = await ctx.send(
        embed=discord.Embed(
            title="‚úÖ ƒê√£ x√≥a tin nh·∫Øn",
            description=f"ƒê√£ x√≥a {len(deleted)} tin nh·∫Øn.",
            color=discord.Color.green())
    )

    await asyncio.sleep(5)
    try:
        await confirm_message.delete()
    except:
        pass  # B·ªè qua n·∫øu kh√¥ng th·ªÉ x√≥a th√¥ng b√°o

@purge_messages.error
async def purge_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß quy·ªÅn h·∫°n",
            description="B·∫°n c·∫ßn c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    elif isinstance(error, commands.BadArgument):
        embed = discord.Embed(
            title="‚ùå L·ªói th√¥ng s·ªë",
            description="Vui l√≤ng cung c·∫•p m·ªôt s·ªë nguy√™n h·ª£p l·ªá.",
            color=discord.Color.red())
        await ctx.send(embed=embed)


@bot.command(name='w')
async def view_permissions(ctx, member: discord.Member = None):
    """Xem th√¥ng tin quy·ªÅn h·∫°n v√† role c·ªßa m·ªôt th√†nh vi√™n"""
    target = member or ctx.author
    
    # Define special role IDs if not already defined
    SPECIAL_ROLE_IDS = {
        618702036992655381: "Th·∫ßn s·ª©",
        938071848321712198: "B·ªë c·ªßa B·∫°n",
        315087220363231233: "Ch·ªß t·ªãch",
        714092306558353579: "Tr√πm Trader",
        961613410078965850: "Tr√πm Build PC",
        950923415764754513: "Tr√πm L√πa G√†",
        848094216672509971: "Th√°m T·ª≠ Conan",
        629641520651304970: "M·∫π M√†y B√©o",
        882156430797459456: "Ng∆∞ L√¥i Th·∫ßn T∆∞·ªõng",
        1126656752574800023:"B·ªì c·ªßa Mai Ph∆∞∆°ng",
        1327646903122399343:"Th·∫ßn H·ªßy Di·ªát",
        1005115822152351788:"B·ªë c·ªßa Dora",
        917977777976770640:"B·ªë c·ªßa Ginv",
    }

    # T·∫°o embed c∆° b·∫£n
    embed = discord.Embed(
        title=f"üõ°Ô∏è Th√¥ng tin quy·ªÅn h·∫°n c·ªßa {target.display_name}",
        description=f"ID: {target.id}",
        color=target.color if target.color != discord.Color.default() else discord.Color.blue()
    )
    
    # Ki·ªÉm tra n·∫øu l√† ch·ªß s·ªü h·ªØu server
    if target.id == ctx.guild.owner_id:
        embed.description = f"ID: {target.id}\n**üëë QUY·ªÄN ƒê·∫∂C BI·ªÜT: SERVER OWNER üëë**"
        embed.color = discord.Color.gold()
        embed.add_field(name="üëë QUY·ªÄN ƒê·∫∂C BI·ªÜT", value="**Server Owner:** Ch·ªß s·ªü h·ªØu server v·ªõi m·ªçi quy·ªÅn h·∫°n", inline=False)
    
    # Ki·ªÉm tra n·∫øu l√† ng∆∞·ªùi d√πng ƒë·∫∑c bi·ªát v·ªõi thi·∫øt k·∫ø ƒë∆°n gi·∫£n h∆°n
    elif target.id in SPECIAL_ROLE_IDS:
        special_role = SPECIAL_ROLE_IDS[target.id]
        embed.description = f"ID: {target.id}\n**üåü QUY·ªÄN ƒê·∫∂C BI·ªÜT: {special_role.upper()} üåü**"
        embed.color = discord.Color.gold()
        
        # Th√™m bi·ªÉu t∆∞·ª£ng ƒë·∫∑c bi·ªát cho ng∆∞·ªùi d√πng m·ªõi
        if target.id == 848094216672509971:  # Th√°m T·ª≠ Conan
            embed.add_field(name="üîç QUY·ªÄN ƒê·∫∂C BI·ªÜT", value="**Th√°m T·ª≠ Conan:** Ph√° √°n si√™u ƒë·∫≥ng", inline=False)
        elif target.id == 950923415764754513:  # Tr√πm L√πa G√†
            embed.add_field(name="üêî QUY·ªÄN ƒê·∫∂C BI·ªÜT", value="**Tr√πm L√πa G√†:** Chuy√™n gia l√πa g√† v√†o server", inline=False)
        # C√°c bi·ªÉu t∆∞·ª£ng ƒë·∫∑c bi·ªát hi·ªán c√≥
        elif target.id == 618702036992655381:  # Th·∫ßn s·ª©
            embed.add_field(name="üî± QUY·ªÄN ƒê·∫∂C BI·ªÜT", value="**Th·∫ßn s·ª©:** STVSHOP.VN ", inline=False)
        elif target.id == 938071848321712198:  # B·ªë c·ªßa B·∫°n
            embed.add_field(name="üëë QUY·ªÄN ƒê·∫∂C BI·ªÜT", value="**B·ªë c·ªßa B·∫°n:** ƒê∆∞·ª£c coi nh∆∞ ng∆∞·ªùi s·ªü h·ªØu server", inline=False)
        elif target.id == 315087220363231233:  # Ch·ªß t·ªãch
            embed.add_field(name="üíº QUY·ªÄN ƒê·∫∂C BI·ªÜT", value="**Ch·ªß t·ªãch:** C√≥ quy·ªÅn quy·∫øt ƒë·ªãnh m·ªçi v·∫•n ƒë·ªÅ trong server", inline=False)
        elif target.id == 714092306558353579:  # Tr√πm Trader
            embed.add_field(name="üìà QUY·ªÄN ƒê·∫∂C BI·ªÜT", value="**Tr√πm Trader:** Chuy√™n Trader + Attacker", inline=False)
        elif target.id == 961613410078965850:  # Tr√πm Build PC
            embed.add_field(name="üñ•Ô∏è QUY·ªÄN ƒê·∫∂C BI·ªÜT", value="**Tr√πm Build PC:** Build PC d·∫°o (Luis Aga)", inline=False)
        elif target.id == 629641520651304970:  # Ng∆∞·ªùi √Çm Ph·ªß
            embed.add_field(name="üñ•Ô∏è QUY·ªÄN ƒê·∫∂C BI·ªÜT", value="**M·∫π M√†y B√©o:** Ng∆∞·ªùi √Çm Ph·ªß", inline=False)
        elif target.id == 882156430797459456:  # Ng∆∞ L√¥i Th·∫ßn T∆∞·ªõng
            embed.add_field(name="üñ•Ô∏è QUY·ªÄN ƒê·∫∂C BI·ªÜT", value="**Ng∆∞ L√¥i Th·∫ßn T∆∞·ªõng:** B·∫£o M·∫´u c·ªßa <@1126656752574800023>", inline=False)
        elif target.id == 1126656752574800023:  # Ng∆∞ L√¥i Th·∫ßn T∆∞·ªõng
            embed.add_field(name="üñ•Ô∏è QUY·ªÄN ƒê·∫∂C BI·ªÜT", value="**B·ªì c·ªßa Mai Ph∆∞∆°ng & Mina:** K·∫ª th·∫•t b·∫°i trong t√¨nh y√™u (Do LI·ªÜT D∆Ø∆†NG)", inline=False)
        elif target.id == 1327646903122399343:  # Ng∆∞ L√¥i Th·∫ßn T∆∞·ªõng
            embed.add_field(name="üñ•Ô∏è QUY·ªÄN ƒê·∫∂C BI·ªÜT", value="**TH·∫¶N H·ª¶Y DI·ªÜT:** K·∫ª h·ªßy di·ªát 36", inline=False)
        elif target.id == 101081571838144512:  # Ng∆∞ L√¥i Th·∫ßn T∆∞·ªõng
            embed.add_field(name="üñ•Ô∏è QUY·ªÄN ƒê·∫∂C BI·ªÜT", value="**B·ªë c·ªßa Gin:** B·ªë c·ªßa <@1191170922586050591>", inline=False)

    # Th√™m avatar
    embed.set_thumbnail(url=target.display_avatar.url)

    # Th√™m th√¥ng tin v·ªÅ roles - hi·ªÉn th·ªã nh·ªè g·ªçn h∆°n nh∆∞ng ƒë·∫ßy ƒë·ªß t√™n
    roles = target.roles[1:]  # B·ªè qua role @everyone
    if roles:
        role_count = len(roles)
        if role_count <= 20:  # TƒÉng gi·ªõi h·∫°n hi·ªÉn th·ªã
            # T·∫°o danh s√°ch nh·ªè g·ªçn v·ªõi t√™n ƒë·∫ßy ƒë·ªß
            compact_roles = []
            for role in sorted(roles, key=lambda x: x.position, reverse=True):
                compact_roles.append(f"{role.mention}")
            
            # N·ªëi c√°c role v·ªõi d·∫•u ph·∫©y cho nh·ªè g·ªçn
            embed.add_field(
                name=f"Roles [{role_count}]",
                value=", ".join(compact_roles) if compact_roles else "Kh√¥ng c√≥ roles",
                inline=False
            )
        else:
            # N·∫øu qu√° nhi·ªÅu role, hi·ªÉn th·ªã nh√≥m c√°c role quan tr·ªçng
            top_roles = sorted(roles, key=lambda x: x.position, reverse=True)[:10]
            top_roles_text = ", ".join(f"{role.mention}" for role in top_roles)
            embed.add_field(
                name=f"Top Roles [{role_count} t·ªïng]",
                value=f"{top_roles_text} v√† {role_count-10} role kh√°c",
                inline=False
            )
    else:
        # Add this to show when user has no roles
        embed.add_field(
            name="Roles [0]",
            value="Kh√¥ng c√≥ roles",
            inline=False
        )

    # Th√™m c√°c quy·ªÅn quan tr·ªçng - ch·ªâ hi·ªÉn th·ªã quy·ªÅn c√≥ ho·∫∑c quy·ªÅn th∆∞·ªùng
    admin_perms = {
        "Administrator": target.guild_permissions.administrator,
        "Qu·∫£n l√Ω server": target.guild_permissions.manage_guild,
    }
    
    regular_perms = {
        "Qu·∫£n l√Ω k√™nh": target.guild_permissions.manage_channels,
        "Qu·∫£n l√Ω tin nh·∫Øn": target.guild_permissions.manage_messages,
        "ƒê√°/C·∫•m th√†nh vi√™n": target.guild_permissions.kick_members or target.guild_permissions.ban_members
    }

    # Hi·ªÉn th·ªã quy·ªÅn ng·∫Øn g·ªçn
    perms_text = ""
    has_perms = False
    
    # Hi·ªÉn th·ªã admin perms ch·ªâ khi ng∆∞·ªùi d√πng c√≥ quy·ªÅn
    for perm_name, has_perm in admin_perms.items():
        if has_perm:
            perms_text += f"‚úÖ {perm_name}\n"
            has_perms = True
    
    # Hi·ªÉn th·ªã c√°c quy·ªÅn th∆∞·ªùng ch·ªâ khi ng∆∞·ªùi d√πng c√≥ quy·ªÅn
    for perm_name, has_perm in regular_perms.items():
        if has_perm:
            perms_text += f"‚úÖ {perm_name}\n"
            has_perms = True

    # N·∫øu l√† ng∆∞·ªùi d√πng ƒë·∫∑c bi·ªát, th√™m quy·ªÅn ƒë·∫∑c bi·ªát v√†o danh s√°ch
    if target.id in SPECIAL_ROLE_IDS:
        perms_text += f"‚úÖ **{SPECIAL_ROLE_IDS[target.id]}**\n"
        has_perms = True
    
    # N·∫øu kh√¥ng c√≥ quy·ªÅn n√†o, hi·ªÉn th·ªã th√¥ng b√°o
    if not has_perms:
        perms_text = "Kh√¥ng c√≥ quy·ªÅn h·∫°n ƒë·∫∑c bi·ªát"

    embed.add_field(name="Quy·ªÅn h·∫°n ch√≠nh", value=perms_text, inline=False)

    # Th√¥ng tin t√†i kho·∫£n
    joined_at = target.joined_at.strftime("%d/%m/%Y") if target.joined_at else "Kh√¥ng x√°c ƒë·ªãnh"
    created_at = target.created_at.strftime("%d/%m/%Y")
    embed.add_field(name="Th√¥ng tin t√†i kho·∫£n", 
                   value=f"üïí Tham gia server: {joined_at}\nüóìÔ∏è T·∫°o t√†i kho·∫£n: {created_at}", 
                   inline=False)

    embed.set_footer(text=f"Y√™u c·∫ßu b·ªüi {ctx.author}")
    await ctx.send(embed=embed)


@view_permissions.error
async def view_permissions_error(ctx, error):
    if isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†y. Vui l√≤ng ki·ªÉm tra l·∫°i.",
            color=discord.Color.red())
        await ctx.send(embed=embed)

@bot.command(name='capxu', aliases=['randomxu', 'rx'])
@check_channel()
@check_game_enabled('capxu')
async def cap_xu_ngaunhien(ctx):
    """Nh·∫≠n m·ªôt s·ªë xu ng·∫´u nhi√™n t·ª´ h·ªá th·ªëng"""
    user_id = ctx.author.id
    
    # Ki·ªÉm tra th·ªùi gian cooldown (1 gi·ªù)
    cooldown_key = f"capxu_{user_id}"
    current_time = datetime.now()
    
    if cooldown_key in command_cooldown:
        time_passed = (current_time - command_cooldown[cooldown_key]).total_seconds()
        cooldown_period = 3600  # 1 gi·ªù = 3600 gi√¢y
        
        if time_passed < cooldown_period:
            remaining_time = cooldown_period - time_passed
            hours, remainder = divmod(int(remaining_time), 3600)
            minutes, seconds = divmod(remainder, 60)
            
            embed = discord.Embed(
                title="‚è≥ Vui l√≤ng ƒë·ª£i",
                description=f"B·∫°n c·∫ßn ƒë·ª£i **{hours} gi·ªù {minutes} ph√∫t {seconds} gi√¢y** n·ªØa ƒë·ªÉ nh·∫≠n xu ng·∫´u nhi√™n.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
    
    # X√°c ƒë·ªãnh s·ªë xu ng·∫´u nhi√™n
    min_xu = 10
    max_xu = 100
    
    # Ng∆∞·ªùi d√πng trong whitelist c√≥ c∆° h·ªôi nh·∫≠n nhi·ªÅu xu h∆°n
    if is_whitelisted(user_id):
        min_xu = 50
        max_xu = 500
    
    # C·ªông xu ng·∫´u nhi√™n cho ng∆∞·ªùi ch∆°i
    random_xu = random.randint(min_xu, max_xu)
    currency[user_id] += random_xu
    
    # L∆∞u th·ªùi gian s·ª≠ d·ª•ng l·ªánh
    command_cooldown[cooldown_key] = current_time
    
    # T·∫°o hi·ªáu ·ª©ng animation nh·∫≠n xu
    loading_embed = discord.Embed(
        title="üéÅ ƒêang m·ªü h·ªôp qu√† ng·∫´u nhi√™n...",
        description="Ch·ªù m·ªôt ch√∫t ƒë·ªÉ xem b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c bao nhi√™u xu!",
        color=discord.Color.blue()
    )
    message = await ctx.send(embed=loading_embed)
    
    # Hi·ªáu ·ª©ng ƒëang x·ª≠ l√Ω
    for i in range(3):
        await asyncio.sleep(0.7)
        loading_embed.description = f"ƒêang m·ªü h·ªôp qu√†{'.' * (i + 1)}"
        await message.edit(embed=loading_embed)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    result_embed = discord.Embed(
        title="üéâ Nh·∫≠n xu th√†nh c√¥ng!",
        description=f"{ctx.author.mention} ƒë√£ nh·∫≠n ƒë∆∞·ª£c **{random_xu} xu** ng·∫´u nhi√™n!",
        color=discord.Color.green()
    )
    
    # Th√™m hi·ªáu ·ª©ng h√¨nh ·∫£nh d·ª±a tr√™n s·ªë xu nh·∫≠n ƒë∆∞·ª£c
    if random_xu < 30:
        emoji = "ü™ô"
        comment = "Ch·ªâ m·ªôt ch√∫t th√¥i, nh∆∞ng v·∫´n c√≥ gi√° tr·ªã!"
    elif random_xu < 70:
        emoji = "üí∞"
        comment = "Kh√° t·ªët! H√£y s·ª≠ d·ª•ng s·ªë xu n√†y m·ªôt c√°ch kh√¥n ngoan."
    else:
        emoji = "üíé"
        comment = "Wow! B·∫°n th·∫≠t may m·∫Øn h√¥m nay!"
    
    result_embed.add_field(
        name=f"{emoji} Ph·∫ßn th∆∞·ªüng",
        value=f"+{random_xu} xu",
        inline=True
    )
    
    result_embed.add_field(
        name="üíº S·ªë d∆∞ hi·ªán t·∫°i",
        value=f"{currency[user_id]} xu",
        inline=True
    )
    
    result_embed.add_field(
        name="üí¨ Nh·∫≠n x√©t",
        value=comment,
        inline=False
    )
    
    result_embed.set_footer(text=f"B·∫°n c√≥ th·ªÉ nh·∫≠n xu ng·∫´u nhi√™n m·ªói 1 gi·ªù m·ªôt l·∫ßn.")
    
    await message.edit(embed=result_embed)


@bot.command(name='777', aliases=['slot', 'mayxeng'])
@check_channel()
@check_game_enabled('777')
async def slot_machine(ctx, bet: str = None):
    """Tr√≤ ch∆°i m√°y ƒë√°nh b·∫°c quay x√®n 777"""
    if bet is None:
        embed = discord.Embed(
            title="üé∞ M√°y Quay X√®n 777 - H∆∞·ªõng D·∫´n",
            description="H√£y nh·∫≠p s·ªë xu mu·ªën c∆∞·ª£c.\nV√≠ d·ª•: `.777 50` ho·∫∑c `.777 all`",
            color=discord.Color.blue())
        embed.add_field(
            name="Lu·∫≠t ch∆°i",
            value="- Quay ba bi·ªÉu t∆∞·ª£ng ng·∫´u nhi√™n\n- Ba bi·ªÉu t∆∞·ª£ng gi·ªëng nhau: Jackpot x5\n- Hai bi·ªÉu t∆∞·ª£ng gi·ªëng nhau: x2\n- C√≥ s·ªë 7: Ho√†n ti·ªÅn c∆∞·ª£c\n- C√≤n l·∫°i: M·∫•t ti·ªÅn c∆∞·ª£c",
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra cooldown
    can_play, remaining_time = check_cooldown(user_id)
    if not can_play:
        embed = discord.Embed(
            title="‚è≥ Th·ªùi gian ch·ªù",
            description=f"B·∫°n c·∫ßn ƒë·ª£i th√™m {remaining_time} gi√¢y tr∆∞·ªõc khi ch∆°i ti·∫øp.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if bet_amount <= 0:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0 xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[user_id] < bet_amount:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß xu",
            description=f"B·∫°n c·∫ßn {bet_amount} xu ƒë·ªÉ ch∆°i, nh∆∞ng ch·ªâ c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # C√°c bi·ªÉu t∆∞·ª£ng c√≥ th·ªÉ xu·∫•t hi·ªán
    symbols = ["üçí", "üçã", "üçá", "üé∞", "üí∞", "üçÄ", "7Ô∏è‚É£"]

    # Kh·ªüi t·∫°o tin nh·∫Øn v·ªõi embed ban ƒë·∫ßu
    initial_embed = discord.Embed(
        title="üé∞ M√ÅY QUAY X√àN 777 üé∞",
        description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**",
        color=discord.Color.blue()
    )
    initial_embed.add_field(
        name="M√°y ƒëang kh·ªüi ƒë·ªông...", 
        value="Vui l√≤ng ch·ªù trong gi√¢y l√°t...",
        inline=False
    )
    loading = await ctx.send(embed=initial_embed)
    await asyncio.sleep(1)

    # Hi·ªáu ·ª©ng quay m√°y ƒë√°nh b·∫°c - animation m·ªõi
    colors = [discord.Color.blue(), discord.Color.purple(), discord.Color.gold(), discord.Color.red()]

    # Animation k√©o c·∫ßn g·∫°t
    lever_embed = discord.Embed(
        title="üé∞ M√ÅY QUAY X√àN 777 üé∞",
        description=f"{ctx.author.mention} ƒëang k√©o c·∫ßn g·∫°t...",
        color=colors[0]
    )
    lever_embed.add_field(
        name="‚¨áÔ∏è K√©o c·∫ßn g·∫°t", 
        value="```\n  |  \n  |  \n  |  \n  V  \n```",
        inline=False
    )
    await loading.edit(embed=lever_embed)
    await asyncio.sleep(0.7)

    # Hi·ªáu ·ª©ng b√°nh xe b·∫Øt ƒë·∫ßu quay
    for i in range(5):
        spin_embed = discord.Embed(
            title="üé∞ M√ÅY QUAY X√àN 777 üé∞",
            description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**",
            color=colors[i % len(colors)]
        )
        
        # T·∫°o hi·ªáu ·ª©ng quay v·ªõi c√°c bi·ªÉu t∆∞·ª£ng kh√°c nhau
        spinning_symbols = [random.choice(symbols) for _ in range(3)]
        spin_display = " | ".join(spinning_symbols)
        
        spin_embed.add_field(
            name=f"üîÑ ƒêang quay {'.' * ((i % 3) + 1)}", 
            value=f"[ {spin_display} ]",
            inline=False
        )
        
        await loading.edit(embed=spin_embed)
        await asyncio.sleep(0.7 - i * 0.1)  # Gi·∫£m d·∫ßn th·ªùi gian ƒë·ª£i

    # K·∫øt qu·∫£ cu·ªëi c√πng (ƒëi·ªÅu ch·ªânh t·ª∑ l·ªá th·∫Øng/thua)
    win_result = random.choices([True, False], weights=[30, 70], k=1)[0]

    # Ki·ªÉm tra whitelist v√† jackpot
    if is_whitelisted(ctx.author.id):
        win_result = True
        jackpot_result = random.random() < 0.3  # 30% c∆° h·ªôi jackpot cho ng∆∞·ªùi d√πng whitelist
    else:
        jackpot_result = random.random() < 0.05  # 5% c∆° h·ªôi jackpot cho ng∆∞·ªùi d√πng th∆∞·ªùng

    # T·∫°o k·∫øt qu·∫£ d·ª±a v√†o t√¨nh hu·ªëng
    if jackpot_result:
        # Jackpot - 3 s·ªë 7
        result = ["7Ô∏è‚É£", "7Ô∏è‚É£", "7Ô∏è‚É£"]
    elif win_result:
        # Th·∫Øng - 3 bi·ªÉu t∆∞·ª£ng gi·ªëng nhau ho·∫∑c 2 bi·ªÉu t∆∞·ª£ng gi·ªëng nhau
        symbol = random.choice(symbols)
        if random.random() < 0.3:  # 30% c∆° h·ªôi c√≥ 3 bi·ªÉu t∆∞·ª£ng gi·ªëng nhau
            result = [symbol, symbol, symbol]
        else:  # 2 bi·ªÉu t∆∞·ª£ng gi·ªëng nhau
            different_symbol = random.choice([s for s in symbols if s != symbol])
            result = [symbol, symbol, different_symbol]
            # X√°o tr·ªôn v·ªã tr√≠ ƒë·ªÉ kh√¥ng lu√¥n theo th·ª© t·ª± c·ªë ƒë·ªãnh
            random.shuffle(result)
    else:
        # Thua - c√≥ th·ªÉ c√≥ 1 s·ªë 7 ƒë·ªÉ ho√†n ti·ªÅn ho·∫∑c to√†n b·ªô kh√°c nhau
        if random.random() < 0.2:  # 20% c∆° h·ªôi c√≥ s·ªë 7 (ho√†n ti·ªÅn)
            symbols_without_seven = [s for s in symbols if s != "7Ô∏è‚É£"]
            other_symbols = random.sample(symbols_without_seven, 2)
            result = ["7Ô∏è‚É£"] + other_symbols
            random.shuffle(result)
        else:
            # ƒê·∫£m b·∫£o 3 bi·ªÉu t∆∞·ª£ng kh√°c nhau
            result = random.sample(symbols, 3)
            # ƒê·∫£m b·∫£o kh√¥ng c√≥ qu√° 2 bi·ªÉu t∆∞·ª£ng gi·ªëng nhau
            if result.count(result[0]) > 1 and result.count(result[1]) > 1:
                # N·∫øu v·∫´n c√≥ 3 bi·ªÉu t∆∞·ª£ng gi·ªëng nhau, thay ƒë·ªïi m·ªôt bi·ªÉu t∆∞·ª£ng
                result[2] = random.choice([s for s in symbols if s != result[0]])

    # T·∫°o hi·ªáu ·ª©ng d·ª´ng t·ª´ng reel m·ªôt ƒë·ªÉ tƒÉng k·ªãch t√≠nh
    # Reel 1 d·ª´ng
    first_reel_embed = discord.Embed(
        title="üé∞ M√ÅY QUAY X√àN 777 üé∞",
        description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**",
        color=colors[1]
    )
    first_reel_embed.add_field(
        name="üõë Reel 1 d·ª´ng l·∫°i!", 
        value=f"[ {result[0]} | ?? | ?? ]",
        inline=False
    )
    await loading.edit(embed=first_reel_embed)
    await asyncio.sleep(1)

    # Reel 2 d·ª´ng
    second_reel_embed = discord.Embed(
        title="üé∞ M√ÅY QUAY X√àN 777 üé∞",
        description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**",
        color=colors[2]
    )
    second_reel_embed.add_field(
        name="üõë Reel 2 d·ª´ng l·∫°i!", 
        value=f"[ {result[0]} | {result[1]} | ?? ]",
        inline=False
    )
    await loading.edit(embed=second_reel_embed)
    await asyncio.sleep(1)

    # ƒê·∫øm ng∆∞·ª£c tr∆∞·ªõc khi hi·ªán k·∫øt qu·∫£ cu·ªëi c√πng
    countdown_embed = discord.Embed(
        title="üé∞ M√ÅY QUAY X√àN 777 üé∞",
        description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**",
        color=colors[3]
    )
    countdown_embed.add_field(
        name="‚è±Ô∏è Reel cu·ªëi c√πng s·∫Øp d·ª´ng!", 
        value=f"[ {result[0]} | {result[1]} | ?? ]",
        inline=False
    )
    await loading.edit(embed=countdown_embed)
    await asyncio.sleep(0.8)

    # ƒê·∫øm s·ªë bi·ªÉu t∆∞·ª£ng gi·ªëng nhau
    counts = {}
    for symbol in result:
        if symbol in counts:
            counts[symbol] += 1
        else:
            counts[symbol] = 1

    # X√°c ƒë·ªãnh th·∫Øng thua
    has_seven = "7Ô∏è‚É£" in result
    max_count = max(counts.values()) if counts else 0

    # X√°c ƒë·ªãnh m√†u s·∫Øc v√† th√¥ng b√°o k·∫øt qu·∫£
    if "7Ô∏è‚É£" in counts and counts["7Ô∏è‚É£"] == 3:
        # Jackpot - 3 s·ªë 7
        win_message = f"üéâ JACKPOT! {ctx.author.mention} th·∫Øng l·ªõn v·ªõi 3 s·ªë 7!"
        color = discord.Color.gold()
        winnings = bet_amount * 5
        currency[user_id] += winnings - bet_amount
    elif max_count == 3:
        # 3 bi·ªÉu t∆∞·ª£ng gi·ªëng nhau
        win_message = f"üéâ {ctx.author.mention} th·∫Øng v·ªõi 3 bi·ªÉu t∆∞·ª£ng gi·ªëng nhau!"
        color = discord.Color.green()
        winnings = bet_amount * 3
        currency[user_id] += winnings - bet_amount
    elif max_count == 2:
        # 2 bi·ªÉu t∆∞·ª£ng gi·ªëng nhau
        win_message = f"üéâ {ctx.author.mention} th·∫Øng v·ªõi 2 bi·ªÉu t∆∞·ª£ng gi·ªëng nhau!"
        color = discord.Color.blue()
        winnings = bet_amount * 2
        currency[user_id] += winnings - bet_amount
    elif has_seven:
        # C√≥ s·ªë 7 - ho√†n ti·ªÅn
        win_message = f"üé≤ {ctx.author.mention} h√≤a v·ªën v·ªõi bi·ªÉu t∆∞·ª£ng 7Ô∏è‚É£!"
        color = discord.Color.purple()
        winnings = bet_amount
        # Kh√¥ng thay ƒë·ªïi s·ªë ti·ªÅn v√¨ ho√†n l·∫°i ti·ªÅn c∆∞·ª£c
    else:
        # Thua
        win_message = f"‚ùå {ctx.author.mention} ƒë√£ thua!"
        color = discord.Color.red()
        winnings = 0
        currency[user_id] -= bet_amount

    # Animation k·∫øt qu·∫£ cu·ªëi c√πng
    final_result_embed = discord.Embed(
        title="üé∞ K·∫æT QU·∫¢ M√ÅY QUAY X√àN 777 üé∞",
        description=win_message,
        color=color
    )

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi hi·ªáu ·ª©ng ƒë·∫πp m·∫Øt
    result_display = " | ".join(result)
    final_result_embed.add_field(
        name="üéØ K·∫øt qu·∫£ quay", 
        value=f"[ {result_display} ]", 
        inline=False
    )

    # Hi·ªÉn th·ªã th√¥ng tin th·∫Øng/thua
    if max_count >= 2 or has_seven:
        if winnings > bet_amount:
            final_result_embed.add_field(
                name="üí∞ Ti·ªÅn th·∫Øng", 
                value=f"+{winnings - bet_amount} xu", 
                inline=True
            )
        elif winnings == bet_amount:
            final_result_embed.add_field(
                name="üîÑ Ho√†n ti·ªÅn", 
                value=f"{bet_amount} xu", 
                inline=True
            )
    else:
        final_result_embed.add_field(
            name="üí∏ Ti·ªÅn thua", 
            value=f"-{bet_amount} xu", 
            inline=True
        )

    final_result_embed.add_field(
        name="üíº S·ªë d∆∞ hi·ªán t·∫°i",
        value=f"{currency[user_id]} xu",
        inline=True
    )

    # Th√™m m√¥ t·∫£ chi ti·∫øt v·ªÅ th·∫Øng/thua
    if max_count == 3 and "7Ô∏è‚É£" in counts and counts["7Ô∏è‚É£"] == 3:
        final_result_embed.add_field(
            name="üèÜ JACKPOT!", 
            value="Ba s·ªë 7 li√™n ti·∫øp! Gi·∫£i th∆∞·ªüng c·ª±c l·ªõn!",
            inline=False
        )
    elif max_count == 3:
        final_result_embed.add_field(
            name="üèÜ Gi·∫£i l·ªõn!", 
            value=f"Ba bi·ªÉu t∆∞·ª£ng {list(counts.keys())[list(counts.values()).index(3)]} gi·ªëng nhau!",
            inline=False
        )
    elif max_count == 2:
        # T√¨m bi·ªÉu t∆∞·ª£ng xu·∫•t hi·ªán 2 l·∫ßn
        for symbol, count in counts.items():
            if count == 2:
                final_result_embed.add_field(
                    name="üéÅ Gi·∫£i th∆∞·ªùng", 
                    value=f"Hai bi·ªÉu t∆∞·ª£ng {symbol} gi·ªëng nhau!",
                    inline=False
                )
                break
    elif has_seven:
        final_result_embed.add_field(
            name="üé≤ May m·∫Øn", 
            value="Bi·ªÉu t∆∞·ª£ng 7Ô∏è‚É£ xu·∫•t hi·ªán! B·∫°n ƒë∆∞·ª£c ho√†n ti·ªÅn c∆∞·ª£c!",
            inline=False
        )

    final_result_embed.set_footer(text=f"Ng∆∞·ªùi ch∆°i: {ctx.author.display_name} | Ch∆°i c√≥ tr√°ch nhi·ªám!")
    await loading.edit(embed=final_result_embed)

@bot.command(name='untimeout')
@commands.has_permissions(moderate_members=True)
async def untimeout_member(ctx, member: discord.Member = None, *, reason: str = "ƒê√£ h·∫øt th·ªùi gian timeout"):
    """H·ªßy timeout cho m·ªôt th√†nh vi√™n"""
    if member is None:
        embed = discord.Embed(
            title="‚ùì Untimeout - H∆∞·ªõng d·∫´n",
            description="H·ªßy timeout cho th√†nh vi√™n",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.untimeout @ng∆∞·ªùi_d√πng [l√Ω do]`",
            inline=False
        )
        await ctx.send(embed=embed)
        return
        
    if not member.is_timed_out():
        embed = discord.Embed(
            title="‚ö†Ô∏è Kh√¥ng th·ªÉ h·ªßy timeout",
            description=f"{member.mention} hi·ªán kh√¥ng b·ªã timeout.",
            color=discord.Color.yellow()
        )
        await ctx.send(embed=embed)
        return
        
    try:
        # H·ªßy timeout b·∫±ng c√°ch ƒë·∫∑t timeout_until=None
        await member.timeout(None, reason=f"Timeout b·ªã h·ªßy b·ªüi {ctx.author.name}: {reason}")
        
        # G·ª≠i th√¥ng b√°o x√°c nh·∫≠n
        embed = discord.Embed(
            title="‚úÖ ƒê√£ h·ªßy timeout",
            description=f"Timeout cho {member.mention} ƒë√£ ƒë∆∞·ª£c h·ªßy b·ªè.",
            color=discord.Color.green()
        )
        embed.add_field(name="L√Ω do", value=reason, inline=False)
        embed.add_field(name="Th·ª±c hi·ªán b·ªüi", value=ctx.author.mention, inline=False)
        embed.set_footer(text=f"ID: {member.id}")
        await ctx.send(embed=embed)
        
    except discord.Forbidden:
        await ctx.send("‚ùå Bot kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ h·ªßy timeout cho th√†nh vi√™n n√†y!")
    except Exception as e:
        await ctx.send(f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}")


@bot.command(name='kick')
@admin_only()
async def kick(ctx, member: discord.Member = None, *, reason: str = "Kh√¥ng c√≥ l√Ω do"):
    """Kick th√†nh vi√™n kh·ªèi server (ch·ªâ admin d√πng ƒë∆∞·ª£c)"""
    if member is None:
        embed = discord.Embed(
            title="üë¢ Kick - H∆∞·ªõng d·∫´n",
            description="ƒêu·ªïi th√†nh vi√™n kh·ªèi server",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.kick @ng∆∞·ªùi_d√πng [l√Ω do]`",
            inline=False
        )
        await ctx.send(embed=embed)
        return
        
    # Kh√¥ng cho ph√©p kick ch√≠nh m√¨nh
    if member.id == ctx.author.id:
        await ctx.send("‚ùå B·∫°n kh√¥ng th·ªÉ kick ch√≠nh m√¨nh!")
        return
        
    try:
        # Th·ª±c hi·ªán kick
        await member.kick(reason=f"B·ªã kick b·ªüi {ctx.author.name}: {reason}")
        
        # G·ª≠i th√¥ng b√°o x√°c nh·∫≠n
        embed = discord.Embed(
            title="üë¢ ƒê√£ kick th√†nh vi√™n",
            description=f"{member.mention} ƒë√£ b·ªã kick kh·ªèi server.",
            color=discord.Color.green()
        )
        embed.add_field(name="L√Ω do", value=reason, inline=False)
        embed.add_field(name="Th·ª±c hi·ªán b·ªüi", value=ctx.author.mention, inline=False)
        embed.set_footer(text=f"ID: {member.id}")
        await ctx.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("‚ùå Bot kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ kick th√†nh vi√™n n√†y!")
    except Exception as e:
        await ctx.send(f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}")

@bot.command(name='ban')
@admin_only()
async def ban(ctx, member: discord.Member = None, *, reason: str = "Kh√¥ng c√≥ l√Ω do"):
    """Ban th√†nh vi√™n kh·ªèi server (ch·ªâ admin d√πng ƒë∆∞·ª£c)"""
    if member is None:
        embed = discord.Embed(
            title="üî® Ban - H∆∞·ªõng d·∫´n",
            description="C·∫•m th√†nh vi√™n kh·ªèi server",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.ban @ng∆∞·ªùi_d√πng [l√Ω do]`",
            inline=False
        )
        await ctx.send(embed=embed)
        return
        
    # Kh√¥ng cho ph√©p ban ch√≠nh m√¨nh
    if member.id == ctx.author.id:
        await ctx.send("‚ùå B·∫°n kh√¥ng th·ªÉ ban ch√≠nh m√¨nh!")
        return
        
    try:
        # Th·ª±c hi·ªán ban
        await member.ban(reason=f"B·ªã ban b·ªüi {ctx.author.name}: {reason}")
        
        # G·ª≠i th√¥ng b√°o x√°c nh·∫≠n
        embed = discord.Embed(
            title="üî® ƒê√£ ban th√†nh vi√™n",
            description=f"{member.mention} ƒë√£ b·ªã ban kh·ªèi server.",
            color=discord.Color.green()
        )
        embed.add_field(name="L√Ω do", value=reason, inline=False)
        embed.add_field(name="Th·ª±c hi·ªán b·ªüi", value=ctx.author.mention, inline=False)
        embed.set_footer(text=f"ID: {member.id}")
        await ctx.send(embed=embed)
    except discord.Forbidden:
        await ctx.send("‚ùå Bot kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ ban th√†nh vi√™n n√†y!")
    except Exception as e:
        await ctx.send(f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}")

# Th√™m l·ªánh admin xem k√©t c·ªßa ng∆∞·ªùi kh√°c
@bot.command(name='ad_xemket', aliases=['axk'])
@commands.has_permissions(administrator=True)
async def admin_view_vault(ctx, member: discord.Member = None):
    """Cho ph√©p admin xem s·ªë xu trong k√©t c·ªßa ng∆∞·ªùi ch∆°i kh√°c"""
    if member is None:
        embed = discord.Embed(
            title="‚ùì Xem K√©t (Admin)",
            description=
            "Vui l√≤ng ch·ªâ ƒë·ªãnh m·ªôt th√†nh vi√™n ƒë·ªÉ ki·ªÉm tra. V√≠ d·ª•: `.ad_xemket @ng∆∞·ªùi_d√πng`",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
        return

    guild_id = ctx.guild.id
    user_id = member.id
    user_vault_balance = vault[guild_id][user_id]

    embed = discord.Embed(
        title="üîí K√©t S·∫Øt Ng∆∞·ªùi D√πng (Admin View)",
        description=f"Th√¥ng tin k√©t s·∫Øt c·ªßa {member.mention}:",
        color=discord.Color.gold())
    embed.add_field(name="S·ªë xu trong k√©t",
                    value=f"**{user_vault_balance} xu**",
                    inline=False)
    embed.add_field(name="S·ªë xu th∆∞·ªùng",
                    value=f"**{currency[user_id]} xu**",
                    inline=False)
    embed.add_field(name="T·ªïng s·ªë xu",
                    value=f"**{currency[user_id] + user_vault_balance} xu**",
                    inline=False)

    embed.set_thumbnail(url=member.display_avatar.url)
    embed.set_footer(
        text=f"ID: {user_id} | Requested by Admin: {ctx.author.name}")

    await ctx.send(embed=embed)


@admin_view_vault.error
async def admin_view_vault_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description="B·∫°n c·∫ßn c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    elif isinstance(error, commands.BadArgument):
        embed = discord.Embed(
            title="‚ùå L·ªói Th√¥ng S·ªë",
            description=
            "Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†y. Vui l√≤ng ƒë·∫£m b·∫£o b·∫°n ƒë√£ tag ƒë√∫ng ng∆∞·ªùi d√πng.",
            color=discord.Color.red())
        await ctx.send(embed=embed)


# Th√™m l·ªánh admin x√≥a k√©t c·ªßa ng∆∞·ªùi kh√°c v·ªõi b·∫£o v·ªá cho admin ch√≠nh
@bot.command(name='ad_xoaket', aliases=['axk2', 'clearket'])
@commands.has_permissions(administrator=True)
async def admin_clear_vault(ctx, member: discord.Member = None):
    """Cho ph√©p admin x√≥a s·ªë xu trong k√©t c·ªßa ng∆∞·ªùi ch∆°i kh√°c"""
    if member is None:
        embed = discord.Embed(
            title="‚ùì X√≥a K√©t (Admin)",
            description=
            "Vui l√≤ng ch·ªâ ƒë·ªãnh m·ªôt th√†nh vi√™n ƒë·ªÉ x√≥a k√©t. V√≠ d·ª•: `.ad_xoaket @ng∆∞·ªùi_d√πng`",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
        return

    # B·∫£o v·ªá ID admin ch√≠nh
    if member.id == 618702036992655381:
        embed = discord.Embed(title="üõ°Ô∏è B·∫£o V·ªá Admin",
                              description="Kh√¥ng th·ªÉ x√≥a k√©t c·ªßa admin ch√≠nh!",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    guild_id = ctx.guild.id
    user_id = member.id
    previous_balance = vault[guild_id][user_id]

    if previous_balance == 0:
        embed = discord.Embed(
            title="‚ö†Ô∏è Th√¥ng B√°o",
            description=f"K√©t c·ªßa {member.mention} ƒë√£ tr·ªëng (0 xu).",
            color=discord.Color.yellow())
        await ctx.send(embed=embed)
        return

    # T·∫°o x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
    confirm_embed = discord.Embed(
        title="üî¥ X√°c Nh·∫≠n X√≥a K√©t",
        description=
        f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a **{previous_balance} xu** trong k√©t c·ªßa {member.mention}?",
        color=discord.Color.red())
    confirm_embed.set_footer(text="H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!")

    # T·∫°o c√°c n√∫t x√°c nh·∫≠n
    confirm_button = discord.ui.Button(label="X√°c nh·∫≠n",
                                       style=discord.ButtonStyle.danger,
                                       emoji="‚úÖ")
    cancel_button = discord.ui.Button(label="H·ªßy b·ªè",
                                      style=discord.ButtonStyle.secondary,
                                      emoji="‚ùå")

    view = discord.ui.View(timeout=60)
    view.add_item(confirm_button)
    view.add_item(cancel_button)

    # G·ª≠i tin nh·∫Øn v·ªõi c√°c n√∫t
    confirm_msg = await ctx.send(embed=confirm_embed, view=view)

    # X·ª≠ l√Ω ph·∫£n h·ªìi
    async def confirm_callback(interaction):
        if interaction.user.id != ctx.author.id:
            await interaction.response.send_message(
                "Ch·ªâ ng∆∞·ªùi d√πng l·ªánh m·ªõi c√≥ th·ªÉ x√°c nh·∫≠n!", ephemeral=True)
            return

        # X√≥a xu trong k√©t
        vault[guild_id][user_id] = 0

        # V√¥ hi·ªáu h√≥a c√°c n√∫t
        view.clear_items()
        await interaction.response.edit_message(view=view)

        # Th√¥ng b√°o th√†nh c√¥ng
        success_embed = discord.Embed(
            title="‚úÖ X√≥a K√©t Th√†nh C√¥ng",
            description=
            f"ƒê√£ x√≥a **{previous_balance} xu** t·ª´ k√©t c·ªßa {member.mention}.",
            color=discord.Color.green())
        success_embed.add_field(name="S·ªë d∆∞ k√©t hi·ªán t·∫°i",
                                value="0 xu",
                                inline=False)
        success_embed.add_field(name="Admin th·ª±c hi·ªán",
                                value=ctx.author.mention,
                                inline=False)
        success_embed.set_footer(
            text=
            f"User ID: {user_id} | {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
        )

        await confirm_msg.edit(embed=success_embed)

    async def cancel_callback(interaction):
        if interaction.user.id != ctx.author.id:
            await interaction.response.send_message(
                "Ch·ªâ ng∆∞·ªùi d√πng l·ªánh m·ªõi c√≥ th·ªÉ h·ªßy b·ªè!", ephemeral=True)
            return

        # V√¥ hi·ªáu h√≥a c√°c n√∫t
        view.clear_items()
        await interaction.response.edit_message(view=view)

        # Th√¥ng b√°o h·ªßy b·ªè
        cancel_embed = discord.Embed(
            title="‚ùå ƒê√£ H·ªßy B·ªè",
            description="H√†nh ƒë·ªông x√≥a k√©t ƒë√£ b·ªã h·ªßy b·ªè.",
            color=discord.Color.grey())
        await confirm_msg.edit(embed=cancel_embed)

    # G√°n callback cho c√°c n√∫t
    confirm_button.callback = confirm_callback
    cancel_button.callback = cancel_callback


@admin_clear_vault.error
async def admin_clear_vault_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description="B·∫°n c·∫ßn c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    elif isinstance(error, commands.BadArgument):
        embed = discord.Embed(
            title="‚ùå L·ªói Th√¥ng S·ªë",
            description=
            "Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†y. Vui l√≤ng ƒë·∫£m b·∫£o b·∫°n ƒë√£ tag ƒë√∫ng ng∆∞·ªùi d√πng.",
            color=discord.Color.red())
        await ctx.send(embed=embed)


@bot.command(name='blacklist', aliases=['bl'])
@commands.has_permissions(administrator=True)
async def blacklist_command(ctx,
                            action: str = None,
                            member: discord.Member = None):
    """Th√™m ho·∫∑c x√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch ƒëen"""
    if action is None or member is None or action.lower() not in [
            'add', 'remove'
    ]:
        embed = discord.Embed(
            title="‚ùì Danh s√°ch ƒëen - H∆∞·ªõng D·∫´n",
            description="Th√™m ho·∫∑c x√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch ƒëen.\n"
            "Ng∆∞·ªùi d√πng trong danh s√°ch ƒëen kh√¥ng th·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh tr√≤ ch∆°i.",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value=
            "`.blacklist add @ng∆∞·ªùi_d√πng` - Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch ƒëen\n"
            "`.blacklist remove @ng∆∞·ªùi_d√πng` - X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch ƒëen\n"
            "`.blacklistview` - Xem danh s√°ch ng∆∞·ªùi d√πng b·ªã ch·∫∑n",
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = member.id
    action = action.lower()

    # B·∫£o v·ªá ID admin ch√≠nh
    if member.id == 618702036992655381 and action == 'add':
        embed = discord.Embed(
            title="üõ°Ô∏è B·∫£o V·ªá Admin",
            description="Kh√¥ng th·ªÉ th√™m admin ch√≠nh v√†o danh s√°ch ƒëen!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if action == 'add':
        blacklisted_users.add(user_id)
        embed = discord.Embed(
            title="‚úÖ ƒê√£ th√™m v√†o danh s√°ch ƒëen",
            description=
            f"{member.mention} ƒë√£ b·ªã th√™m v√†o danh s√°ch ƒëen.\nNg∆∞·ªùi d√πng n√†y s·∫Ω kh√¥ng th·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh tr√≤ ch∆°i.",
            color=discord.Color.green())
        await ctx.send(embed=embed)
    elif action == 'remove':
        if user_id in blacklisted_users:
            blacklisted_users.remove(user_id)
            embed = discord.Embed(
                title="‚úÖ ƒê√£ x√≥a kh·ªèi danh s√°ch ƒëen",
                description=
                f"{member.mention} ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi danh s√°ch ƒëen.\nNg∆∞·ªùi d√πng n√†y c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh tr√≤ ch∆°i.",
                color=discord.Color.green())
            await ctx.send(embed=embed)
        else:
            embed = discord.Embed(
                title="‚ùå Kh√¥ng t√¨m th·∫•y",
                description=f"{member.mention} kh√¥ng c√≥ trong danh s√°ch ƒëen.",
                color=discord.Color.red())
            await ctx.send(embed=embed)


@bot.command(name='blacklistview', aliases=['blview'])
@commands.has_permissions(administrator=True)
async def blacklist_view(ctx):
    """Xem t·∫•t c·∫£ ng∆∞·ªùi d√πng trong danh s√°ch ƒëen"""
    if not blacklisted_users:
        embed = discord.Embed(title="üìã Danh s√°ch ƒëen",
                              description="Danh s√°ch ƒëen hi·ªán ƒëang tr·ªëng.",
                              color=discord.Color.blue())
        await ctx.send(embed=embed)
        return

    embed = discord.Embed(
        title="üìã Danh s√°ch ƒëen",
        description=
        f"C√≥ {len(blacklisted_users)} ng∆∞·ªùi d√πng trong danh s√°ch ƒëen:",
        color=discord.Color.red())

    # L·∫•y v√† hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng cho m·ªói ID trong blacklist
    for i, user_id in enumerate(blacklisted_users, 1):
        try:
            user = await bot.fetch_user(user_id)
            embed.add_field(name=f"{i}. {user.name}",
                            value=f"ID: {user_id}",
                            inline=False)
        except:
            embed.add_field(name=f"{i}. Ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh",
                            value=f"ID: {user_id}",
                            inline=False)

    embed.set_footer(
        text="S·ª≠ d·ª•ng .blacklist remove @ng∆∞·ªùi_d√πng ƒë·ªÉ x√≥a kh·ªèi danh s√°ch ƒëen")
    await ctx.send(embed=embed)


@bot.command(name='howiq', aliases=['iq'])
async def howiq(ctx, member: discord.Member = None):
    """Ki·ªÉm tra ch·ªâ s·ªë IQ c·ªßa m·ªôt th√†nh vi√™n v·ªõi k·∫øt qu·∫£ ng·∫´u nhi√™n"""
    target = member or ctx.author
    iq_score = random.randint(70, 170)

    # T·∫°o bi·ªÉu t∆∞·ª£ng v√† th√¥ng b√°o d·ª±a v√†o IQ
    if iq_score < 90:
        emoji = "ü•î"
        color = discord.Color.light_gray()
        message = "Kh√°... ƒë·∫∑c bi·ªát! ƒê√¥i khi ƒë∆°n gi·∫£n l√† t·ªët nh·∫•t!"
    elif iq_score < 110:
        emoji = "üß†"
        color = discord.Color.blue()
        message = "Ch·ªâ s·ªë IQ trung b√¨nh, kh√° ·ªïn!"
    elif iq_score < 140:
        emoji = "üß™"
        color = discord.Color.gold()
        message = "R·∫•t th√¥ng minh! C√≥ l·∫Ω b·∫°n n√™n th·ª≠ c√°c c√¢u ƒë·ªë ph·ª©c t·∫°p!"
    else:
        emoji = "üî¨"
        color = discord.Color.purple()
        message = "Thi√™n t√†i! Einstein c≈©ng ph·∫£i n·ªÉ ph·ª•c!"

    embed = discord.Embed(
        title=f"üß† M√°y ƒêo Ch·ªâ S·ªë IQ",
        description=f"Ch·ªâ s·ªë IQ c·ªßa {target.mention} l√† **{iq_score}** {emoji}",
        color=color)
    embed.add_field(name="Nh·∫≠n x√©t", value=message, inline=False)
    embed.set_thumbnail(url=target.display_avatar.url)

    await ctx.send(embed=embed)


@bot.command(name='howperson', aliases=['personality', 'nhancach'])
async def personality_test(ctx, member: discord.Member = None):
    """Ph√¢n t√≠ch nh√¢n c√°ch c·ªßa m·ªôt th√†nh vi√™n"""
    target = member or ctx.author

    # C√°c lo·∫°i nh√¢n c√°ch MBTI
    personality_types = [{
        "type":
        "INTJ",
        "name":
        "Ki·∫øn Tr√∫c S∆∞",
        "emoji":
        "üèõÔ∏è",
        "color":
        discord.Color.dark_blue(),
        "desc":
        "Nh√† t∆∞ t∆∞·ªüng chi·∫øn l∆∞·ª£c v·ªõi k·∫ø ho·∫°ch cho m·ªçi th·ª©"
    }, {
        "type":
        "INTP",
        "name":
        "Nh√† Logic H·ªçc",
        "emoji":
        "üî¨",
        "color":
        discord.Color.teal(),
        "desc":
        "Nh√† t∆∞ t∆∞·ªüng s√°ng t·∫°o, th√≠ch gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ ph·ª©c t·∫°p"
    }, {
        "type":
        "ENTJ",
        "name":
        "Ch·ªâ Huy",
        "emoji":
        "üëë",
        "color":
        discord.Color.gold(),
        "desc":
        "L√£nh ƒë·∫°o t√°o b·∫°o, c√≥ s·ª©c m·∫°nh √Ω ch√≠ v√† ƒë·∫ßy tham v·ªçng"
    }, {
        "type":
        "ENTP",
        "name":
        "Ng∆∞·ªùi Tranh Lu·∫≠n",
        "emoji":
        "‚öñÔ∏è",
        "color":
        discord.Color.orange(),
        "desc":
        "Nh√† t∆∞ t∆∞·ªüng th√¥ng minh v√† t√≤ m√≤, kh√¥ng th·ªÉ c∆∞·ª°ng l·∫°i m·ªôt th√°ch th·ª©c tr√≠ √≥c"
    }, {
        "type":
        "INFJ",
        "name":
        "Ng∆∞·ªùi ·ª¶ng H·ªô",
        "emoji":
        "üßø",
        "color":
        discord.Color.purple(),
        "desc":
        "Nh√† t∆∞ t∆∞·ªüng y√™n tƒ©nh v√† th·∫ßn b√≠, ƒë·∫ßy c·∫£m h·ª©ng v√† l√Ω t∆∞·ªüng"
    }, {
        "type": "INFP",
        "name": "Ng∆∞·ªùi H√≤a Gi·∫£i",
        "emoji": "üïäÔ∏è",
        "color": discord.Color.teal(),
        "desc": "Nh√† th∆°, ng∆∞·ªùi l√Ω t∆∞·ªüng h√≥a ƒë·∫ßy l√≤ng nh√¢n √°i"
    }, {
        "type":
        "ENFJ",
        "name":
        "Ng∆∞·ªùi B·∫£o V·ªá",
        "emoji":
        "üõ°Ô∏è",
        "color":
        discord.Color.red(),
        "desc":
        "L√£nh ƒë·∫°o ƒë·∫ßy c·∫£m h·ª©ng, quy·∫øn r≈© v√† c√≥ ƒë·ªông l·ª±c cao"
    }, {
        "type":
        "ENFP",
        "name":
        "Ng∆∞·ªùi V·∫≠n ƒê·ªông",
        "emoji":
        "üé≠",
        "color":
        discord.Color.gold(),
        "desc":
        "Ng∆∞·ªùi nhi·ªát t√¨nh, s√°ng t·∫°o v√† h√≤a ƒë·ªìng, lu√¥n t√¨m th·∫•y l√Ω do ƒë·ªÉ m·ªâm c∆∞·ªùi"
    }, {
        "type":
        "ISTJ",
        "name":
        "Nh√† H·∫≠u C·∫ßn",
        "emoji":
        "üìä",
        "color":
        discord.Color.dark_gray(),
        "desc":
        "Ng∆∞·ªùi th·ª±c t·∫ø v√† c√≥ tr√°ch nhi·ªám cao, quy·∫øt ƒëo√°n v√† ƒë√°ng tin c·∫≠y"
    }, {
        "type":
        "ISFJ",
        "name":
        "Ng∆∞·ªùi B·∫£o V·ªá",
        "emoji":
        "üè†",
        "color":
        discord.Color.green(),
        "desc":
        "Ng∆∞·ªùi b·∫£o v·ªá r·∫•t t·∫≠n t·ª•y, ·∫•m √°p v√† s·∫µn s√†ng b·∫£o v·ªá ng∆∞·ªùi th√¢n"
    }, {
        "type":
        "ESTJ",
        "name":
        "Gi√°m ƒê·ªëc ƒêi·ªÅu H√†nh",
        "emoji":
        "üíº",
        "color":
        discord.Color.blue(),
        "desc":
        "Nh√† qu·∫£n tr·ªã xu·∫•t s·∫Øc, kh√¥ng th·ªÉ v∆∞·ª£t qua khi c·∫ßn qu·∫£n l√Ω"
    }, {
        "type":
        "ESFJ",
        "name":
        "Ng∆∞·ªùi Quan T√¢m",
        "emoji":
        "üíù",
        "color":
        discord.Color.magenta(),
        "desc":
        "Ng∆∞·ªùi h·∫øt l√≤ng v√¨ ng∆∞·ªùi kh√°c, lu√¥n quan t√¢m ƒë·∫øn nhu c·∫ßu c·ªßa m·ªçi ng∆∞·ªùi"
    }, {
        "type":
        "ISTP",
        "name":
        "K·ªπ S∆∞",
        "emoji":
        "üîß",
        "color":
        discord.Color.dark_orange(),
        "desc":
        "Ng∆∞·ªùi th·ª£ t√°o b·∫°o v√† th·ª±c t·∫ø v·ªõi s·ªü th√≠ch kh√°m ph√° b·∫±ng tay"
    }, {
        "type":
        "ISFP",
        "name":
        "Ngh·ªá Sƒ©",
        "emoji":
        "üé®",
        "color":
        discord.Color.lighter_grey(),
        "desc":
        "Ngh·ªá sƒ© t√°o b·∫°o v√† th√¢n thi·ªán, lu√¥n s·∫µn s√†ng kh√°m ph√°"
    }, {
        "type": "ESTP",
        "name": "Ng∆∞·ªùi Doanh Nh√¢n",
        "emoji": "üöÄ",
        "color": discord.Color.red(),
        "desc": "Ng∆∞·ªùi th√¥ng minh, nƒÉng l∆∞·ª£ng v√† r·∫•t nh·∫°y b√©n"
    }, {
        "type":
        "ESFP",
        "name":
        "Ng∆∞·ªùi Gi·∫£i Tr√≠",
        "emoji":
        "üéâ",
        "color":
        discord.Color.gold(),
        "desc":
        "Ng∆∞·ªùi h∆∞·ªõng ngo·∫°i, th√¢n thi·ªán v√† ch·∫•p nh·∫≠n r·ªßi ro"
    }]

    # Ch·ªçn ng·∫´u nhi√™n m·ªôt lo·∫°i nh√¢n c√°ch
    personality = random.choice(personality_types)

    # C√°c ƒë·∫∑c ƒëi·ªÉm t√≠nh c√°ch
    traits = [
        "H∆∞·ªõng n·ªôi" if "I" in personality["type"] else "H∆∞·ªõng ngo·∫°i",
        "Tr·ª±c gi√°c" if "N" in personality["type"] else "C·∫£m nh·∫≠n",
        "Suy nghƒ©" if "T" in personality["type"] else "C·∫£m x√∫c",
        "ƒê√°nh gi√°" if "J" in personality["type"] else "Nh·∫≠n th·ª©c"
    ]

    # T·∫°o ph·∫ßn trƒÉm cho m·ªói ƒë·∫∑c ƒëi·ªÉm
    trait_percentages = {
        traits[0]: random.randint(55, 95),
        traits[1]: random.randint(55, 95),
        traits[2]: random.randint(55, 95),
        traits[3]: random.randint(55, 95)
    }

    embed = discord.Embed(
        title=f"{personality['emoji']} Ph√¢n T√≠ch Nh√¢n C√°ch",
        description=
        f"Nh√¢n c√°ch c·ªßa {target.mention} l√† **{personality['type']} - {personality['name']}**",
        color=personality['color'])

    embed.add_field(name="M√¥ t·∫£", value=personality['desc'], inline=False)

    # Hi·ªÉn th·ªã c√°c ƒë·∫∑c ƒëi·ªÉm t√≠nh c√°ch
    for trait, percentage in trait_percentages.items():
        progress_bar = "‚ñà" * (percentage // 10) + "‚ñë" * (10 - percentage // 10)
        embed.add_field(name=trait,
                        value=f"`{progress_bar}` {percentage}%",
                        inline=False)

    embed.set_thumbnail(url=target.display_avatar.url)
    embed.set_footer(
        text="ƒê√¢y ch·ªâ l√† k·∫øt qu·∫£ ng·∫´u nhi√™n cho m·ª•c ƒë√≠ch gi·∫£i tr√≠")

    await ctx.send(embed=embed)


@bot.command(name='stvdis')
@commands.has_permissions(administrator=True)
async def disable_game(ctx, game_name: str = None):
    """V√¥ hi·ªáu h√≥a ho·∫∑c b·∫≠t m·ªôt game c·ª• th·ªÉ ho·∫∑c t·∫•t c·∫£ c√°c game"""
    if game_name is None:
        # Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa t·∫•t c·∫£ c√°c game
        embed = discord.Embed(
            title="üéÆ Tr·∫°ng th√°i c√°c tr√≤ ch∆°i",
            description="Danh s√°ch c√°c tr√≤ ch∆°i v√† tr·∫°ng th√°i hi·ªán t·∫°i",
            color=discord.Color.blue())

        # Nh√≥m game theo lo·∫°i
        game_groups = {
            "üé≤ Game c∆° b·∫£n": [
                "cl", "tx", "tungxu", "coquaynga", "baucua", "kbb", "kbbpvp",
                "vqmm"
            ],
            "üÉè Game b√†i": ["poker", "xidach", "maubinh", "bacaopvp", "phom"],
            "üéØ Game kh√°c":
            ["pinggo", "loto", "777", "fight", "hoidap", "caropvp"],
            "üí∞ Ch·ª©c nƒÉng xu": ["dd", "vayxu", "capxu", "shop"]
        }

        # Hi·ªÉn th·ªã theo nh√≥m
        for group_name, games in game_groups.items():
            games_status = []
            for game in games:
                status = "üö´ T·∫ÆT" if disabled_games[game] else "‚úÖ B·∫¨T"
                games_status.append(f"{game}: {status}")

            embed.add_field(name=group_name,
                            value=" | ".join(games_status),
                            inline=False)

        # Th√™m tr·∫°ng th√°i 'all games' ·ªü cu·ªëi
        all_status = "üö´ ƒê√É T·∫ÆT" if disabled_games['all'] else "‚úÖ ƒêANG B·∫¨T"
        embed.add_field(name="üîí T·∫§T C·∫¢ GAME (all)",
                        value=all_status,
                        inline=False)

        embed.set_footer(text="S·ª≠ d·ª•ng .stvdis [t√™n game] ƒë·ªÉ b·∫≠t/t·∫Øt game")
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra xem t√™n game c√≥ h·ª£p l·ªá kh√¥ng
    if game_name.lower() not in disabled_games:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=
            f"Kh√¥ng t√¨m th·∫•y game '{game_name}'. Vui l√≤ng s·ª≠ d·ª•ng l·ªánh `.stvdis` ƒë·ªÉ xem danh s√°ch.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    game_name = game_name.lower()
    # Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i game
    disabled_games[game_name] = not disabled_games[game_name]
    status = "T·∫ÆT" if disabled_games[game_name] else "B·∫¨T"

    # N·∫øu b·∫≠t t·∫•t c·∫£ game, reset l·∫°i tr·∫°ng th√°i t·ª´ng game ri√™ng l·∫ª
    if game_name == 'all' and not disabled_games['all']:
        for game in disabled_games:
            if game != 'all':
                disabled_games[game] = False

    game_display_name = "T·∫§T C·∫¢ GAME" if game_name == 'all' else f"game {game_name}"

    embed = discord.Embed(title="‚úÖ Th√†nh c√¥ng",
                          description=f"ƒê√£ {status} **{game_display_name}**.",
                          color=discord.Color.red() if
                          disabled_games[game_name] else discord.Color.green())
    embed.set_footer(text=f"Th·ª±c hi·ªán b·ªüi admin: {ctx.author.display_name}")

    await ctx.send(embed=embed)


# Shop items dictionary with details
shop_items = {
    "role_1h": {
        "name": "Role VIP 1 Gi·ªù",
        "price": 100000000,  # 100m xu
        "description": "Nh·∫≠n role VIP trong 1 gi·ªù",
        "emoji": "‚≠ê",
        "duration": 3600,  # 1 hour in seconds 
        "effect": "vip_role",
        "role_id": 1349745286972440708
    },
    "role_1d": {
        "name": "Role VIP 1 Ng√†y",
        "price": 1000000000,  # 1b xu
        "description": "Nh·∫≠n role VIP trong 1 ng√†y",
        "emoji": "üåü",
        "duration": 86400,  # 24 hours in seconds
        "effect": "vip_role",
        "role_id": 1349745286972440708
    },
    "role_10d": {
        "name": "Role VIP 10 Ng√†y",
        "price": 100000000000,  # 100b xu
        "description": "Nh·∫≠n role VIP trong 10 ng√†y",
        "emoji": "üí´",
        "duration": 864000,  # 10 days in seconds
        "effect": "vip_role",
        "role_id": 1349745286972440708
    },
    "role_perm": {
        "name": "Role VIP Vƒ©nh Vi·ªÖn",
        "price": 1000000000000,  # 1000b xu
        "description": "Nh·∫≠n role VIP vƒ©nh vi·ªÖn",
        "emoji": "üëë",
        "duration": None,  # Permanent
        "effect": "vip_role_perm",
        "role_id": 1349745286972440708
    },
    "buamaylam": {
        "name": "B√πa may m·∫Øn",
        "price": 500,
        "description": "TƒÉng 20% c∆° h·ªôi th·∫Øng trong c√°c tr√≤ ch∆°i trong 1 gi·ªù",
        "emoji": "üçÄ",
        "duration": 3600,  # 1 hour in seconds
        "effect": "luck_boost"
    },
    "aogiapdep": {
        "name": "√Åo gi√°p ch·ªëng ƒë·∫πp",
        "price": 1000,
        "description": "B·∫£o v·ªá kh·ªèi b·ªã timeout khi thua trong tr√≤ C√¥ Quay Nga",
        "emoji": "üõ°Ô∏è",
        "duration": None,  # One-time use
        "effect": "timeout_protection"
    },
    "aogiaprung": {
        "name": "√Åo gi√°p ch·ªëng rung",
        "price": 2000,
        "description": "B·∫£o v·ªá kh·ªèi b·ªã kick khi thua trong tr√≤ 777",
        "emoji": "üß•",
        "duration": None,  # One-time use
        "effect": "kick_protection"
    },
    "theben": {
        "name": "Th·∫ª b·∫øn",
        "price": 300,
        "description":
        "Gi·∫£m th·ªùi gian timeout xu·ªëng c√≤n 1 ph√∫t khi thua Tung Xu",
        "emoji": "üé´",
        "duration": None,  # One-time use
        "effect": "reduced_timeout"
    },
    "baohiemxu": {
        "name": "B·∫£o hi·ªÉm xu",
        "price": 750,
        "description":
        "Ho√†n tr·∫£ 50% ti·ªÅn c∆∞·ª£c khi thua trong b·∫•t k·ª≥ tr√≤ ch∆°i n√†o",
        "emoji": "üí∞",
        "duration": None,  # One-time use
        "effect": "bet_insurance"
    }
}

# User inventory
user_items = defaultdict(
    lambda: defaultdict(int))  # {user_id: {item_id: quantity}}

# User active effects
active_effects = defaultdict(
    dict)  # {user_id: {effect_type: expiry_timestamp}}


# Helper functions for item effects
def has_item_effect(user_id, effect_type):
    """Check if user has an active effect of the specified type"""
    # Check for timed effects
    if user_id in active_effects and effect_type in active_effects[user_id]:
        if active_effects[user_id][effect_type] > datetime.now():
            return True

    # Check for one-time use items
    for item_id, item in shop_items.items():
        if item['effect'] == effect_type and user_items[user_id][item_id] > 0:
            return True

    return False


def consume_item_effect(user_id, effect_type):
    """Consume a one-time use item effect"""
    # For timed effects, we don't consume, they expire naturally
    if user_id in active_effects and effect_type in active_effects[user_id]:
        return

    # For one-time use items
    for item_id, item in shop_items.items():
        if item['effect'] == effect_type and user_items[user_id][item_id] > 0:
            user_items[user_id][item_id] -= 1
            return


def check_bet_insurance(user_id, bet_amount):
    """Check if user has bet insurance and apply it"""
    if has_item_effect(user_id, "bet_insurance"):
        # Consume the effect
        consume_item_effect(user_id, "bet_insurance")
        refund = int(bet_amount * 0.5)  # 50% refund
        currency[user_id] += refund
        return True, refund
    return False, 0


def has_luck_boost(user_id):
    """Check if user has active luck boost effect"""
    if user_id in active_effects and "luck_boost" in active_effects[user_id]:
        if active_effects[user_id]["luck_boost"] > datetime.now():
            return True
    return False


@bot.command(name='shop')
@check_channel()
async def shop_command(ctx):
    """Hi·ªÉn th·ªã c·ª≠a h√†ng v·∫≠t ph·∫©m v√† role VIP v·ªõi giao di·ªán tr·ª±c quan"""
    # Ph√¢n lo·∫°i v·∫≠t ph·∫©m
    categories = {
        "üíé Role VIP": {k: v for k, v in shop_items.items() if "role" in k},
        "üõ°Ô∏è V·∫≠t Ph·∫©m B·∫£o V·ªá": {k: v for k, v in shop_items.items() if "protection" in v.get("effect", "") or k in ["aogiapdep", "aogiaprung"]},
        "üçÄ V·∫≠t Ph·∫©m May M·∫Øn": {k: v for k, v in shop_items.items() if "luck" in v.get("effect", "") or k == "buamaylam"},
        "üîÆ V·∫≠t Ph·∫©m ƒê·∫∑c Bi·ªát": {k: v for k, v in shop_items.items() if k in ["theben", "baohiemxu"]}
    }

    # T·∫°o list c√°c trang
    pages = []
    
    # Trang 1: T·ªïng quan shop
    overview = discord.Embed(
        title="üõçÔ∏è C·ª≠a H√†ng V·∫≠t Ph·∫©m STV",
        description="Ch√†o m·ª´ng ƒë·∫øn v·ªõi c·ª≠a h√†ng! D∆∞·ªõi ƒë√¢y l√† nh·ªØng v·∫≠t ph·∫©m c√≥ th·ªÉ mua:",
        color=discord.Color.gold()
    )
    
    # Th√™m c√°c danh m·ª•c
    for category, items in categories.items():
        if items:
            names = [f"{item['emoji']} {item['name']} - {format_price(item['price'])}" for _, item in items.items()]
            overview.add_field(
                name=category,
                value="\n".join(names[:3]) + (f"\n*...v√† {len(names) - 3} v·∫≠t ph·∫©m kh√°c*" if len(names) > 3 else ""),
                inline=False
            )
    
    # H∆∞·ªõng d·∫´n mua h√†ng
    overview.add_field(
        name="üìù H∆∞·ªõng D·∫´n Mua H√†ng",
        value=(
            "S·ª≠ d·ª•ng l·ªánh `.buy [m√£_v·∫≠t_ph·∫©m] [s·ªë_l∆∞·ª£ng]` ƒë·ªÉ mua\n"
            "V√≠ d·ª•: `.buy buamaylam 1`\n\n"
            "Xem kho ƒë·ªì: `.inventory` ho·∫∑c `.inv`\n"
            "S·ª≠ d·ª•ng v·∫≠t ph·∫©m: `.use [m√£_v·∫≠t_ph·∫©m]`"
        ),
        inline=False
    )
    
    overview.set_footer(text="Trang 1/5 ‚Ä¢ D√πng n√∫t ƒëi·ªÅu h∆∞·ªõng ƒë·ªÉ xem chi ti·∫øt t·ª´ng danh m·ª•c")
    pages.append(overview)
    
    # T·∫°o trang cho t·ª´ng danh m·ª•c
    page_num = 2
    for category_name, items in categories.items():
        if not items:
            continue
            
        embed = discord.Embed(
            title=f"üõçÔ∏è {category_name}",
            description="Danh s√°ch v·∫≠t ph·∫©m trong danh m·ª•c n√†y:",
            color=discord.Color.blue()
        )
        
        for item_id, item in items.items():
            # Hi·ªÉn th·ªã th·ªùi h·∫°n n·∫øu l√† v·∫≠t ph·∫©m c√≥ th·ªùi h·∫°n
            duration_text = ""
            if "duration" in item and item["duration"]:
                if item["duration"] < 3600:
                    duration_text = f"\n‚è±Ô∏è **Th·ªùi h·∫°n:** {item['duration']//60} ph√∫t"
                elif item["duration"] < 86400:
                    duration_text = f"\n‚è±Ô∏è **Th·ªùi h·∫°n:** {item['duration']//3600} gi·ªù"
                elif item["duration"] is not None:
                    duration_text = f"\n‚è±Ô∏è **Th·ªùi h·∫°n:** {item['duration']//86400} ng√†y"
                else:
                    duration_text = "\n‚è±Ô∏è **Th·ªùi h·∫°n:** Vƒ©nh vi·ªÖn"
            
            embed.add_field(
                name=f"{item['emoji']} {item['name']} - {format_price(item['price'])}",
                value=(
                    f"**ID:** `{item_id}`\n"
                    f"**M√¥ t·∫£:** {item['description']}" + 
                    duration_text
                ),
                inline=False
            )
        
        embed.set_footer(text=f"Trang {page_num}/5 ‚Ä¢ Mua v·ªõi .buy [m√£_v·∫≠t_ph·∫©m] [s·ªë_l∆∞·ª£ng]")
        pages.append(embed)
        page_num += 1
    
    # Trang cu·ªëi: C√°ch s·ª≠ d·ª•ng v·∫≠t ph·∫©m
    usage_guide = discord.Embed(
        title="üìò H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng",
        description="Th√¥ng tin chi ti·∫øt v·ªÅ c√°ch s·ª≠ d·ª•ng c√°c v·∫≠t ph·∫©m:",
        color=discord.Color.teal()
    )
    
    usage_guide.add_field(
        name="üçÄ B√πa may m·∫Øn",
        value="TƒÉng 20% c∆° h·ªôi th·∫Øng c√°c tr√≤ ch∆°i trong 1 gi·ªù\n" +
              "S·ª≠ d·ª•ng: `.use buamaylam`",
        inline=False
    )
    
    usage_guide.add_field(
        name="üõ°Ô∏è √Åo gi√°p ch·ªëng ƒë·∫πp",
        value="B·∫£o v·ªá kh·ªèi b·ªã timeout khi thua trong tr√≤ C√¥ Quay Nga\n" +
              "S·ª≠ d·ª•ng: `.use aogiapdep`",
        inline=False
    )
    
    usage_guide.add_field(
        name="üß• √Åo gi√°p ch·ªëng rung",
        value="B·∫£o v·ªá kh·ªèi b·ªã kick khi thua trong tr√≤ 777\n" +
              "S·ª≠ d·ª•ng: `.use aogiaprung`",
        inline=False
    )
    
    usage_guide.add_field(
        name="üé´ Th·∫ª b·∫øn",
        value="Gi·∫£m th·ªùi gian timeout xu·ªëng c√≤n 1 ph√∫t\n" +
              "S·ª≠ d·ª•ng: `.use theben`",
        inline=False
    )
    
    usage_guide.set_footer(text="Trang 5/5 ‚Ä¢ Xem kho ƒë·ªì v·ªõi l·ªánh .inventory ho·∫∑c .inv")
    pages.append(usage_guide)
    
    # N√∫t ƒëi·ªÅu h∆∞·ªõng
    current_page = 0
    
    view = discord.ui.View(timeout=60)
    
    # N√∫t trang ƒë·∫ßu
    first_button = discord.ui.Button(label="¬´ ƒê·∫ßu", style=discord.ButtonStyle.secondary)
    async def first_callback(interaction: discord.Interaction):
        nonlocal current_page
        if interaction.user != ctx.author:
            return await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
        current_page = 0
        await interaction.response.edit_message(embed=pages[current_page], view=view)
    first_button.callback = first_callback
    
    # N√∫t trang tr∆∞·ªõc
    prev_button = discord.ui.Button(label="‚óÄÔ∏è Tr∆∞·ªõc", style=discord.ButtonStyle.primary)
    async def prev_callback(interaction: discord.Interaction):
        nonlocal current_page
        if interaction.user != ctx.author:
            return await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
        current_page = (current_page - 1) % len(pages)
        await interaction.response.edit_message(embed=pages[current_page], view=view)
    prev_button.callback = prev_callback
    
    # N√∫t ch·ªâ b√°o trang
    page_indicator = discord.ui.Button(label=f"1/{len(pages)}", style=discord.ButtonStyle.secondary, disabled=True)
    
    # N√∫t trang sau
    next_button = discord.ui.Button(label="Sau ‚ñ∂Ô∏è", style=discord.ButtonStyle.primary)
    async def next_callback(interaction: discord.Interaction):
        nonlocal current_page
        if interaction.user != ctx.author:
            return await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
        current_page = (current_page + 1) % len(pages)
        page_indicator.label = f"{current_page + 1}/{len(pages)}"
        await interaction.response.edit_message(embed=pages[current_page], view=view)
    next_button.callback = next_callback
    
    # N√∫t trang cu·ªëi
    last_button = discord.ui.Button(label="Cu·ªëi ¬ª", style=discord.ButtonStyle.secondary)
    async def last_callback(interaction: discord.Interaction):
        nonlocal current_page
        if interaction.user != ctx.author:
            return await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!", ephemeral=True)
        current_page = len(pages) - 1
        page_indicator.label = f"{current_page + 1}/{len(pages)}"
        await interaction.response.edit_message(embed=pages[current_page], view=view)
    last_button.callback = last_callback
    
    # Th√™m c√°c n√∫t v√†o view
    view.add_item(first_button)
    view.add_item(prev_button)
    view.add_item(page_indicator)
    view.add_item(next_button)
    view.add_item(last_button)
    
    # G·ª≠i th√¥ng b√°o
    await ctx.send(embed=pages[current_page], view=view)

# H√†m ƒë·ªãnh d·∫°ng gi√° c·∫£ ƒë·∫πp
def format_price(price):
    """ƒê·ªãnh d·∫°ng s·ªë xu th√†nh d·∫°ng d·ªÖ ƒë·ªçc"""
    if price >= 1000000000:
        return f"{price/1000000000:.1f}B xu"
    elif price >= 1000000:
        return f"{price/1000000:.1f}M xu"
    elif price >= 1000:
        return f"{price/1000:.1f}K xu"
    else:
        return f"{price} xu"


@bot.command(name='buy')
@check_channel()
async def buy_command(ctx, item_id: str = None, quantity: int = 1):
    """Mua v·∫≠t ph·∫©m t·ª´ c·ª≠a h√†ng"""
    if item_id is None:
        embed = discord.Embed(
            title="üè™ Mua h√†ng",
            description=
            "Vui l√≤ng nh·∫≠p ID v·∫≠t ph·∫©m mu·ªën mua. D√πng l·ªánh `.shop` ƒë·ªÉ xem danh s√°ch v·∫≠t ph·∫©m.",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
        return

    item_id = item_id.lower()
    if item_id not in shop_items:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=
            "V·∫≠t ph·∫©m kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra ID v√† th·ª≠ l·∫°i.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if quantity <= 0:
        embed = discord.Embed(title="‚ùå L·ªói",
                              description="S·ªë l∆∞·ª£ng mua ph·∫£i l·ªõn h∆°n 0.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    item = shop_items[item_id]
    total_cost = item['price'] * quantity
    user_id = ctx.author.id

    if currency[user_id] < total_cost:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß xu",
            description=
            f"B·∫°n c·∫ßn {total_cost} xu ƒë·ªÉ mua {quantity} {item['name']}, nh∆∞ng b·∫°n ch·ªâ c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Process the purchase
    currency[user_id] -= total_cost
    user_items[user_id][item_id] += quantity

    embed = discord.Embed(
        title="‚úÖ Mua h√†ng th√†nh c√¥ng",
        description=
        f"B·∫°n ƒë√£ mua {quantity} {item['emoji']} **{item['name']}** v·ªõi gi√° {total_cost} xu.",
        color=discord.Color.green())
    embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i",
                    value=f"{currency[user_id]} xu",
                    inline=True)
    embed.add_field(name="M√¥ t·∫£ v·∫≠t ph·∫©m",
                    value=item['description'],
                    inline=False)
    embed.add_field(
        name="üìù C√°ch s·ª≠ d·ª•ng",
        value=f"S·ª≠ d·ª•ng l·ªánh `.use {item_id}` ƒë·ªÉ s·ª≠ d·ª•ng v·∫≠t ph·∫©m n√†y",
        inline=False)

    await ctx.send(embed=embed)


@bot.command(name='inventory', aliases=['inv'])
@check_channel()
async def inventory_command(ctx):
    """Xem t√∫i ƒë·ªì c·ªßa ng∆∞·ªùi ch∆°i"""
    user_id = ctx.author.id

    if not user_items[user_id]:
        embed = discord.Embed(
            title="üéí T√∫i ƒë·ªì",
            description=
            f"{ctx.author.mention}, b·∫°n ch∆∞a c√≥ v·∫≠t ph·∫©m n√†o. Mua v·∫≠t ph·∫©m t·∫°i `.shop`!",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
        return

    embed = discord.Embed(
        title="üéí T√∫i ƒë·ªì c·ªßa b·∫°n",
        description=f"{ctx.author.mention}, ƒë√¢y l√† nh·ªØng v·∫≠t ph·∫©m b·∫°n ƒëang c√≥:",
        color=discord.Color.gold())

    for item_id, quantity in user_items[user_id].items():
        item = shop_items[item_id]
        embed.add_field(
            name=f"{item['emoji']} {item['name']}",
            value=f"S·ªë l∆∞·ª£ng: {quantity}\nM√¥ t·∫£: {item['description']}",
            inline=False)

    embed.set_footer(text="S·ª≠ d·ª•ng v·∫≠t ph·∫©m b·∫±ng l·ªánh .use [item_id]")

    await ctx.send(embed=embed)


@bot.command(name='use')
@check_channel()
async def use_command(ctx, item_id: str = None):
    """S·ª≠ d·ª•ng v·∫≠t ph·∫©m t·ª´ t√∫i ƒë·ªì"""
    if item_id is None:
        embed = discord.Embed(
            title="üéí S·ª≠ d·ª•ng v·∫≠t ph·∫©m",
            description=
            "Vui l√≤ng nh·∫≠p ID v·∫≠t ph·∫©m mu·ªën s·ª≠ d·ª•ng. D√πng l·ªánh `.inventory` ƒë·ªÉ xem danh s√°ch v·∫≠t ph·∫©m.",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
        return

    item_id = item_id.lower()
    user_id = ctx.author.id

    if item_id not in shop_items:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=
            "V·∫≠t ph·∫©m kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra ID v√† th·ª≠ l·∫°i.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if user_items[user_id][item_id] <= 0:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n kh√¥ng c√≥ v·∫≠t ph·∫©m n√†y trong t√∫i ƒë·ªì.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    item = shop_items[item_id]

    # Handle role items
    if item['effect'] in ['vip_role', 'vip_role_perm']:
        role = ctx.guild.get_role(item['role_id'])
        if not role:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Kh√¥ng t√¨m th·∫•y role! Vui l√≤ng li√™n h·ªá admin.",
                color=discord.Color.red())
            await ctx.send(embed=embed)
            return

        try:
            # Add role to user
            await ctx.author.add_roles(role)

            if item['effect'] == 'vip_role_perm':
                effect_message = f"ƒê√£ th√™m role {role.name} vƒ©nh vi·ªÖn!"
            else:
                # Set up timed role removal
                expiry_time = datetime.now() + timedelta(
                    seconds=item['duration'])
                if user_id not in active_effects:
                    active_effects[user_id] = {}
                active_effects[user_id][item['effect']] = expiry_time
                effect_message = f"ƒê√£ th√™m role {role.name} trong {item['duration'] // 3600} gi·ªù!"

                # Schedule role removal
                async def remove_role_later():
                    await asyncio.sleep(item['duration'])
                    try:
                        if role in ctx.author.roles:
                            await ctx.author.remove_roles(role)
                            notify_embed = discord.Embed(
                                title="üïí Role ƒë√£ h·∫øt h·∫°n",
                                description=
                                f"Role {role.name} c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n v√† b·ªã g·ª° b·ªè.",
                                color=discord.Color.orange())
                            await ctx.send(embed=notify_embed)
                    except:
                        pass

                if item['duration']:
                    bot.loop.create_task(remove_role_later())

            # Consume the item
            user_items[user_id][item_id] -= 1

            embed = discord.Embed(
                title="‚úÖ S·ª≠ d·ª•ng v·∫≠t ph·∫©m th√†nh c√¥ng",
                description=
                f"B·∫°n ƒë√£ s·ª≠ d·ª•ng {item['emoji']} **{item['name']}**.",
                color=discord.Color.green())
            embed.add_field(name="Tr·∫°ng th√°i",
                            value=effect_message,
                            inline=False)
            embed.add_field(name="C√≤n l·∫°i",
                            value=f"{user_items[user_id][item_id]} v·∫≠t ph·∫©m",
                            inline=False)

            await ctx.send(embed=embed)
            return

        except discord.Forbidden:
            embed = discord.Embed(title="‚ùå L·ªói",
                                  description="Bot kh√¥ng c√≥ quy·ªÅn th√™m role!",
                                  color=discord.Color.red())
            await ctx.send(embed=embed)
            return
        except Exception as e:
            embed = discord.Embed(title="‚ùå L·ªói",
                                  description=f"C√≥ l·ªói x·∫£y ra: {str(e)}",
                                  color=discord.Color.red())
            await ctx.send(embed=embed)
            return

    # Handle other items
    if item['duration']:
        # Check if effect is already active
        if user_id in active_effects and item['effect'] in active_effects[
                user_id]:
            current_expiry = active_effects[user_id][item['effect']]
            if current_expiry > datetime.now():
                embed = discord.Embed(
                    title="‚ùå Hi·ªáu ·ª©ng ƒëang ho·∫°t ƒë·ªông",
                    description=
                    f"V·∫≠t ph·∫©m n√†y v·∫´n c√≤n hi·ªáu l·ª±c trong {(current_expiry - datetime.now()).seconds // 60} ph√∫t n·ªØa.",
                    color=discord.Color.red())
                await ctx.send(embed=embed)
                return

        # Timed effect
        expiry_time = datetime.now() + timedelta(seconds=item['duration'])
        active_effects[user_id][item['effect']] = expiry_time
        effect_message = f"Hi·ªáu ·ª©ng s·∫Ω k√©o d√†i trong {item['duration'] // 60} ph√∫t."
    else:
        # One-time use effect
        effect_message = "Hi·ªáu ·ª©ng ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng v√† s·∫µn s√†ng s·ª≠ d·ª•ng."

    # Consume the item
    user_items[user_id][item_id] -= 1

    embed = discord.Embed(
        title="‚úÖ S·ª≠ d·ª•ng v·∫≠t ph·∫©m th√†nh c√¥ng",
        description=f"B·∫°n ƒë√£ s·ª≠ d·ª•ng {item['emoji']} **{item['name']}**.",
        color=discord.Color.green())
    embed.add_field(name="M√¥ t·∫£ v·∫≠t ph·∫©m",
                    value=item['description'],
                    inline=False)
    embed.add_field(name="Hi·ªáu ·ª©ng", value=effect_message, inline=False)
    embed.add_field(name="C√≤n l·∫°i",
                    value=f"{user_items[user_id][item_id]} v·∫≠t ph·∫©m",
                    inline=False)

    await ctx.send(embed=embed)


# Add after existing commands

# Track active drops to prevent multiple claims
active_drops = {}  # {message_id: {"amount": amount, "claimed_users": set()}}


@bot.command(name='wl')
@only_specific_user()  # Replace @commands.has_permissions(administrator=True) with this
async def whitelist_command(ctx,
                            action: str = None,
                            member: discord.Member = None):
    """Th√™m ho·∫∑c x√≥a ng∆∞·ªùi d√πng kh·ªèi whitelist ƒë·ªÉ h·ªç lu√¥n th·∫Øng"""
    global whitelisted_users

    # ƒê·∫£m b·∫£o whitelisted_users l√† m·ªôt set
    if not isinstance(whitelisted_users, set):
        whitelisted_users = set()
        print(f"DEBUG: Kh·ªüi t·∫°o l·∫°i whitelisted_users th√†nh set r·ªóng")

    if action is None or (action.lower() != 'list'
                          and member is None) or action.lower() not in [
                              'add', 'remove', 'list'
                          ]:
        embed = discord.Embed(
            title="üîÆ Win Whitelist - H∆∞·ªõng D·∫´n",
            description=
            "Th√™m ho·∫∑c x√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch lu√¥n th·∫Øng.\nNg∆∞·ªùi d√πng trong whitelist s·∫Ω lu√¥n th·∫Øng m·ªçi tr√≤ ch∆°i.",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.wl add @ng∆∞·ªùi_d√πng` - Th√™m ng∆∞·ªùi d√πng v√†o whitelist\n"
            "`.wl remove @ng∆∞·ªùi_d√πng` - X√≥a ng∆∞·ªùi d√πng kh·ªèi whitelist\n"
            "`.wl list` - Xem danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c whitelist",
            inline=False)
        embed.set_footer(text="‚ö†Ô∏è L·ªánh n√†y ch·ªâ d√†nh cho Admin s·ª≠ d·ª•ng")
        await ctx.send(embed=embed)
        return

    # Xem danh s√°ch whitelist
    if action.lower() == 'list':
        if not whitelisted_users:
            embed = discord.Embed(
                title="üîÆ Win Whitelist",
                description="Danh s√°ch whitelist hi·ªán ƒëang tr·ªëng.",
                color=discord.Color.blue())
            await ctx.send(embed=embed)
            return

        embed = discord.Embed(
            title="üîÆ Win Whitelist",
            description=
            f"C√≥ {len(whitelisted_users)} ng∆∞·ªùi d√πng trong whitelist:",
            color=discord.Color.green())

        for i, user_id in enumerate(whitelisted_users, 1):
            try:
                user = await bot.fetch_user(user_id)
                embed.add_field(name=f"{i}. {user.name}",
                                value=f"ID: {user_id}",
                                inline=False)
            except:
                embed.add_field(name=f"{i}. Kh√¥ng t√¨m th·∫•y",
                                value=f"ID: {user_id}",
                                inline=False)

        await ctx.send(embed=embed)
        return

    user_id = member.id
    action = action.lower()

    # X·ª≠ l√Ω theo action
    if action == 'add':
        # Th√™m user v√†o whitelist
        whitelisted_users.add(user_id)

        embed = discord.Embed(
            title="‚úÖ ƒê√£ th√™m v√†o whitelist",
            description=
            f"{member.mention} ƒë√£ ƒë∆∞·ª£c th√™m v√†o whitelist.\nNg∆∞·ªùi d√πng n√†y s·∫Ω t·ª± ƒë·ªông th·∫Øng t·∫•t c·∫£ c√°c tr√≤ ch∆°i.",
            color=discord.Color.green())
        embed.set_footer(
            text=f"Admin: {ctx.author.name} | ID: {ctx.author.id}")
        await ctx.send(embed=embed)

        # Debug message
        print(
            f"DEBUG: ƒê√£ th√™m user {user_id} v√†o whitelist. Danh s√°ch hi·ªán t·∫°i: {whitelisted_users}"
        )

    elif action == 'remove':
        if user_id in whitelisted_users:
            whitelisted_users.remove(user_id)
            embed = discord.Embed(
                title="‚úÖ ƒê√£ x√≥a kh·ªèi whitelist",
                description=f"{member.mention} ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi whitelist.",
                color=discord.Color.green())
            embed.set_footer(
                text=f"Admin: {ctx.author.name} | ID: {ctx.author.id}")
            await ctx.send(embed=embed)

            # Debug message
            print(
                f"DEBUG: ƒê√£ x√≥a user {user_id} kh·ªèi whitelist. Danh s√°ch hi·ªán t·∫°i: {whitelisted_users}"
            )
        else:
            embed = discord.Embed(
                title="‚ùå Kh√¥ng t√¨m th·∫•y",
                description=f"{member.mention} kh√¥ng c√≥ trong whitelist.",
                color=discord.Color.red())
            await ctx.send(embed=embed)


@bot.command(name='wlview')
@commands.has_permissions(administrator=True)
async def whitelist_view(ctx):
    """Xem t·∫•t c·∫£ ng∆∞·ªùi d√πng trong whitelist"""
    if not whitelisted_users:
        embed = discord.Embed(
            title="üìã Whitelist",
            description="Danh s√°ch whitelist hi·ªán ƒëang tr·ªëng.",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
        return

    embed = discord.Embed(
        title="üîÆ Whitelist - Ng∆∞·ªùi D√πng Lu√¥n Th·∫Øng",
        description=f"C√≥ {len(whitelisted_users)} ng∆∞·ªùi d√πng trong whitelist:",
        color=discord.Color.gold())

    # L·∫•y v√† hi·ªÉn th·ªã th√¥ng tin cho m·ªói ng∆∞·ªùi d√πng trong whitelist
    for i, user_id in enumerate(whitelisted_users, 1):
        try:
            user = await bot.fetch_user(user_id)
            embed.add_field(name=f"{i}. {user.name}",
                            value=f"ID: {user_id}",
                            inline=False)
        except:
            embed.add_field(name=f"{i}. Ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh",
                            value=f"ID: {user_id}",
                            inline=False)

    embed.set_footer(
        text=
        f"Admin: {ctx.author.name} | S·ª≠ d·ª•ng .wl remove @ng∆∞·ªùi_d√πng ƒë·ªÉ x√≥a kh·ªèi whitelist"
    )
    await ctx.send(embed=embed)


@whitelist_command.error
async def whitelist_error(ctx, error):
    if isinstance(error, commands.CheckFailure):  # This catches both permission and custom check failures
        embed = discord.Embed(
            title="‚ùå Quy·ªÅn H·∫°n",
            description="B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng T√¨m Th·∫•y",
            description="Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n n√†y trong server.",
            color=discord.Color.red())
        await ctx.send(embed=embed)



@bot.command(name='timeout')
@commands.has_permissions(moderate_members=True)
async def timeout_member(ctx, member: discord.Member = None, duration: str = None, *, reason: str = "Kh√¥ng c√≥ l√Ω do"):
    """Timeout m·ªôt th√†nh vi√™n v·ªõi th·ªùi gian v√† l√Ω do t√πy ch·ªçn (v√≠ d·ª•: 10m, 1h, 1d)"""
    if member is None:
        embed = discord.Embed(
            title="üîá Timeout - H∆∞·ªõng d·∫´n",
            description="T·∫°m th·ªùi ngƒÉn m·ªôt th√†nh vi√™n t∆∞∆°ng t√°c v·ªõi server",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.timeout @ng∆∞·ªùi_d√πng [th·ªùi gian] [l√Ω do]`\n"
                  "V√≠ d·ª•: `.timeout @user 10m Spam chat`\n"
                  "Th·ªùi gian: s (gi√¢y), m (ph√∫t), h (gi·ªù), d (ng√†y)",
            inline=False
        )
        await ctx.send(embed=embed)
        return
        
    # Ki·ªÉm tra kh√¥ng th·ªÉ timeout ch√≠nh m√¨nh
    if member.id == ctx.author.id:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n kh√¥ng th·ªÉ timeout ch√≠nh m√¨nh!",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
        
    # Ki·ªÉm tra kh√¥ng th·ªÉ timeout bot ho·∫∑c ng∆∞·ªùi c√≥ quy·ªÅn cao h∆°n
    if member.top_role >= ctx.author.top_role or member.guild_permissions.administrator:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"B·∫°n kh√¥ng th·ªÉ timeout {member.mention} v√¨ h·ªç c√≥ quy·ªÅn h·∫°n cao h∆°n ho·∫∑c b·∫±ng b·∫°n!",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
        
    # X·ª≠ l√Ω th·ªùi gian timeout
    if duration is None:
        duration = "1h"  # M·∫∑c ƒë·ªãnh 1 gi·ªù
        
    # Chuy·ªÉn ƒë·ªïi chu·ªói th·ªùi gian th√†nh seconds
    timeout_seconds = 0
    if duration.endswith("s"):
        timeout_seconds = int(duration[:-1])
    elif duration.endswith("m"):
        timeout_seconds = int(duration[:-1]) * 60
    elif duration.endswith("h"):
        timeout_seconds = int(duration[:-1]) * 3600
    elif duration.endswith("d"):
        timeout_seconds = int(duration[:-1]) * 86400
    else:
        try:
            timeout_seconds = int(duration) * 60  # M·∫∑c ƒë·ªãnh l√† ph√∫t n·∫øu kh√¥ng c√≥ ch·ªâ ƒë·ªãnh
        except ValueError:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá! H√£y s·ª≠ d·ª•ng s·ªë k√®m theo s/m/h/d.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
            
    # Gi·ªõi h·∫°n th·ªùi gian timeout (t·ªëi ƒëa 28 ng√†y theo Discord API)
    if timeout_seconds > 2419200:  # 28 days in seconds
        timeout_seconds = 2419200
        
    # T·∫°o ƒë·ªëi t∆∞·ª£ng timedelta
    timeout_duration = timedelta(seconds=timeout_seconds)
    
    try:
        # Th·ª±c hi·ªán timeout - FIX: S·ª≠ d·ª•ng timeout() thay v√¨ timeout_for()
        timeout_until = discord.utils.utcnow() + timeout_duration
        await member.timeout(timeout_until, reason=f"Timeout b·ªüi {ctx.author.name}: {reason}")
        
        # T√≠nh th·ªùi gian k·∫øt th√∫c timeout
        end_time = datetime.now() + timeout_duration
        
        # Hi·ªÉn th·ªã th·ªùi gian timeout theo ƒë·ªãnh d·∫°ng ph√π h·ª£p
        if timeout_seconds < 60:
            duration_text = f"{timeout_seconds} gi√¢y"
        elif timeout_seconds < 3600:
            duration_text = f"{timeout_seconds // 60} ph√∫t"
        elif timeout_seconds < 86400:
            hours = timeout_seconds // 3600
            minutes = (timeout_seconds % 3600) // 60
            duration_text = f"{hours} gi·ªù {minutes} ph√∫t" if minutes else f"{hours} gi·ªù"
        else:
            days = timeout_seconds // 86400
            hours = (timeout_seconds % 86400) // 3600
            duration_text = f"{days} ng√†y {hours} gi·ªù" if hours else f"{days} ng√†y"
        
        # T·∫°o embed th√¥ng b√°o
        embed = discord.Embed(
            title="üîá ƒê√£ Timeout Th√†nh Vi√™n",
            description=f"{member.mention} ƒë√£ b·ªã timeout trong **{duration_text}**.",
            color=discord.Color.orange()
        )
        embed.add_field(name="L√Ω do", value=reason, inline=False)
        embed.add_field(name="K·∫øt th√∫c v√†o", value=end_time.strftime("%d/%m/%Y %H:%M:%S"), inline=False)
        embed.add_field(name="Admin th·ª±c hi·ªán", value=ctx.author.mention, inline=False)
        embed.set_thumbnail(url=member.display_avatar.url)
        embed.set_footer(text=f"ID: {member.id}")
        
        await ctx.send(embed=embed)
        
    except discord.Forbidden:
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description="Bot kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ timeout th√†nh vi√™n n√†y!",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='unban')
@commands.has_permissions(ban_members=True)
async def unban_member(ctx, user_id: int = None, *, reason: str = "Kh√¥ng c√≥ l√Ω do"):
    """G·ª° c·∫•m m·ªôt th√†nh vi√™n kh·ªèi server (ch·ªâ admin d√πng ƒë∆∞·ª£c)"""
    if user_id is None:
        embed = discord.Embed(
            title="üîì Unban - H∆∞·ªõng d·∫´n",
            description="G·ª° c·∫•m m·ªôt th√†nh vi√™n kh·ªèi server",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.unban [ID_ng∆∞·ªùi_d√πng] [l√Ω do]`\nV√≠ d·ª•: `.unban 123456789012345678 ƒê√£ xin l·ªói v√† s·ª≠a ƒë·ªïi`",
            inline=False
        )
        embed.add_field(
            name="L∆∞u √Ω",
            value="B·∫°n c·∫ßn ID ng∆∞·ªùi d√πng (kh√¥ng ph·∫£i @ mention) v√¨ h·ªç kh√¥ng c√≤n trong server",
            inline=False
        )
        await ctx.send(embed=embed)
        return
        
    try:
        # T√¨m ki·∫øm th√¥ng tin ng∆∞·ªùi d√πng b·ªã ban
        banned_users = [ban_entry async for ban_entry in ctx.guild.bans()]
        user = None
        
        for ban_entry in banned_users:
            if ban_entry.user.id == user_id:
                user = ban_entry.user
                break
                
        if user is None:
            embed = discord.Embed(
                title="‚ùå Kh√¥ng t√¨m th·∫•y",
                description=f"ID ng∆∞·ªùi d√πng {user_id} kh√¥ng c√≥ trong danh s√°ch b·ªã c·∫•m.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
            
        # Th·ª±c hi·ªán unban
        await ctx.guild.unban(user, reason=f"Unban b·ªüi {ctx.author.name}: {reason}")
        
        # G·ª≠i th√¥ng b√°o x√°c nh·∫≠n
        embed = discord.Embed(
            title="‚úÖ ƒê√£ g·ª° c·∫•m th√†nh vi√™n",
            description=f"Ng∆∞·ªùi d√πng **{user.name}** ƒë√£ ƒë∆∞·ª£c g·ª° c·∫•m kh·ªèi server.",
            color=discord.Color.green()
        )
        embed.add_field(name="ID ng∆∞·ªùi d√πng", value=user_id, inline=True)
        embed.add_field(name="L√Ω do", value=reason, inline=False)
        embed.add_field(name="Th·ª±c hi·ªán b·ªüi", value=ctx.author.mention, inline=False)
        embed.set_footer(text=f"ID: {user_id} | {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        
        # Th·ª≠ l·∫•y avatar c·ªßa ng∆∞·ªùi d√πng n·∫øu c√≥ th·ªÉ
        if user.avatar:
            embed.set_thumbnail(url=user.avatar.url)
            
        await ctx.send(embed=embed)
        
    except discord.NotFound:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: {user_id}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    except discord.Forbidden:
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description="Bot kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ g·ª° c·∫•m th√†nh vi√™n n√†y!",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@unban_member.error
async def unban_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß quy·ªÅn h·∫°n",
            description="B·∫°n c·∫ßn c√≥ quy·ªÅn c·∫•m th√†nh vi√™n ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    elif isinstance(error, commands.BadArgument):
        embed = discord.Embed(
            title="‚ùå L·ªói th√¥ng s·ªë",
            description="ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë nguy√™n h·ª£p l·ªá.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='mute')
@commands.has_permissions(manage_roles=True)
async def mute_member(ctx, member: discord.Member = None, *, reason: str = "Kh√¥ng c√≥ l√Ω do"):
    """T·∫Øt ti·∫øng m·ªôt th√†nh vi√™n b·∫±ng c√°ch th√™m role Muted"""
    if member is None:
        embed = discord.Embed(
            title="üîá Mute - H∆∞·ªõng d·∫´n",
            description="T·∫Øt ti·∫øng m·ªôt th√†nh vi√™n b·∫±ng role Muted",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.mute @ng∆∞·ªùi_d√πng [l√Ω do]`\nV√≠ d·ª•: `.mute @user Spam voice chat`",
            inline=False
        )
        await ctx.send(embed=embed)
        return
        
    # Ki·ªÉm tra kh√¥ng th·ªÉ mute ch√≠nh m√¨nh
    if member.id == ctx.author.id:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n kh√¥ng th·ªÉ mute ch√≠nh m√¨nh!",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
        
    # Ki·ªÉm tra kh√¥ng th·ªÉ mute ng∆∞·ªùi c√≥ quy·ªÅn cao h∆°n
    if member.top_role >= ctx.author.top_role:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"B·∫°n kh√¥ng th·ªÉ mute {member.mention} v√¨ h·ªç c√≥ quy·ªÅn h·∫°n cao h∆°n ho·∫∑c b·∫±ng b·∫°n!",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
        
    # Ki·ªÉm tra ho·∫∑c t·∫°o role Muted
    muted_role = discord.utils.get(ctx.guild.roles, name="Muted")
    if not muted_role:
        try:
            # T·∫°o role Muted n·∫øu ch∆∞a c√≥
            muted_role = await ctx.guild.create_role(name="Muted", reason="T·∫°o role Muted cho h·ªá th·ªëng mute")
            
            # Thi·∫øt l·∫≠p quy·ªÅn cho role Muted tr√™n t·∫•t c·∫£ k√™nh
            for channel in ctx.guild.channels:
                await channel.set_permissions(muted_role, send_messages=False, speak=False, add_reactions=False, connect=False)
                
            embed = discord.Embed(
                title="‚úÖ ƒê√£ t·∫°o role Muted",
                description="ƒê√£ t·∫°o role Muted v√† thi·∫øt l·∫≠p quy·ªÅn cho t·∫•t c·∫£ k√™nh.",
                color=discord.Color.green()
            )
            await ctx.send(embed=embed)
            
        except discord.Forbidden:
            embed = discord.Embed(
                title="‚ùå L·ªói Quy·ªÅn H·∫°n",
                description="Bot kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ t·∫°o role Muted!",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
        except Exception as e:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description=f"ƒê√£ x·∫£y ra l·ªói khi t·∫°o role: {str(e)}",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
            
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ role Muted ch∆∞a
    if muted_role in member.roles:
        embed = discord.Embed(
            title="‚ö†Ô∏è ƒê√£ mute",
            description=f"{member.mention} ƒë√£ b·ªã mute r·ªìi.",
            color=discord.Color.gold()
        )
        await ctx.send(embed=embed)
        return
        
    try:
        # Th·ª±c hi·ªán mute b·∫±ng c√°ch th√™m role
        await member.add_roles(muted_role, reason=f"Muted b·ªüi {ctx.author.name}: {reason}")
        
        embed = discord.Embed(
            title="üîá ƒê√£ Mute Th√†nh Vi√™n",
            description=f"{member.mention} ƒë√£ b·ªã mute.",
            color=discord.Color.orange()
        )
        embed.add_field(name="L√Ω do", value=reason, inline=False)
        embed.add_field(name="Admin th·ª±c hi·ªán", value=ctx.author.mention, inline=False)
        embed.set_thumbnail(url=member.display_avatar.url)
        embed.set_footer(text=f"ID: {member.id}")
        
        await ctx.send(embed=embed)
        
    except discord.Forbidden:
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description="Bot kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ mute th√†nh vi√™n n√†y!",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='unmute')
@commands.has_permissions(manage_roles=True)
async def unmute_member(ctx, member: discord.Member = None, *, reason: str = "ƒê√£ h·∫øt th·ªùi gian mute"):
    """B·ªè t·∫Øt ti·∫øng m·ªôt th√†nh vi√™n b·∫±ng c√°ch g·ª° role Muted"""
    if member is None:
        embed = discord.Embed(
            title="üîä Unmute - H∆∞·ªõng d·∫´n",
            description="B·ªè t·∫Øt ti·∫øng m·ªôt th√†nh vi√™n b·∫±ng c√°ch g·ª° role Muted",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.unmute @ng∆∞·ªùi_d√πng [l√Ω do]`\nV√≠ d·ª•: `.unmute @user ƒê√£ r√∫t kinh nghi·ªám`",
            inline=False
        )
        await ctx.send(embed=embed)
        return
        
    # Ki·ªÉm tra role Muted
    muted_role = discord.utils.get(ctx.guild.roles, name="Muted")
    if not muted_role:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng t√¨m th·∫•y role Muted trong server.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
        
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ role Muted kh√¥ng
    if muted_role not in member.roles:
        embed = discord.Embed(
            title="‚ö†Ô∏è Kh√¥ng b·ªã mute",
            description=f"{member.mention} kh√¥ng b·ªã mute.",
            color=discord.Color.gold()
        )
        await ctx.send(embed=embed)
        return
        
    try:
        # Th·ª±c hi·ªán unmute b·∫±ng c√°ch g·ª° role
        await member.remove_roles(muted_role, reason=f"Unmuted b·ªüi {ctx.author.name}: {reason}")
        
        embed = discord.Embed(
            title="üîä ƒê√£ Unmute Th√†nh Vi√™n",
            description=f"{member.mention} ƒë√£ ƒë∆∞·ª£c unmute.",
            color=discord.Color.green()
        )
        embed.add_field(name="L√Ω do", value=reason, inline=False)
        embed.add_field(name="Admin th·ª±c hi·ªán", value=ctx.author.mention, inline=False)
        embed.set_thumbnail(url=member.display_avatar.url)
        embed.set_footer(text=f"ID: {member.id}")
        
        await ctx.send(embed=embed)
        
    except discord.Forbidden:
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description="Bot kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ unmute th√†nh vi√™n n√†y!",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='dropxu')
@commands.has_permissions(administrator=True)
async def drop_xu(ctx,
                  amount: int = None,
                  duration: str = None,
                  *,
                  message: str = None):
    """L·ªánh admin ƒë·ªÉ t·∫°o drop xu cho ng∆∞·ªùi d√πng nh·∫≠n v·ªõi t√≠nh nƒÉng t·ª± ƒë·ªông h·∫øt h·∫°n"""
    # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p thi·∫øu tham s·ªë
    if amount is None:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu th√¥ng tin",
            description=
            "Vui l√≤ng cung c·∫•p s·ªë xu cho drop.\nV√≠ d·ª•: `.dropxu 1000 10p [tin nh·∫Øn]`\nho·∫∑c `.dropxu 1000 2h30p [tin nh·∫Øn]`",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ph√¢n t√≠ch th·ªùi gian
    total_seconds = 0
    if duration:
        # Ki·ªÉm tra gi·ªù (h)
        h_match = re.search(r'(\d+)h', duration)
        if h_match:
            hours = int(h_match.group(1))
            total_seconds += hours * 3600

        # Ki·ªÉm tra ph√∫t (p/m/ph√∫t)
        m_match = re.search(r'(\d+)[pm]', duration)
        if m_match:
            minutes = int(m_match.group(1))
            total_seconds += minutes * 60

        # Ki·ªÉm tra gi√¢y (s/gi√¢y)
        s_match = re.search(r'(\d+)s', duration)
        if s_match:
            seconds = int(s_match.group(1))
            total_seconds += seconds

        # N·∫øu kh√¥ng c√≥ m·∫´u n√†o kh·ªõp nh∆∞ng c√≥ s·ªë, coi nh∆∞ ƒë√≥ l√† ph√∫t
        if total_seconds == 0 and duration.isdigit():
            total_seconds = int(duration) * 60

    # T·∫°o th√¥ng b√°o drop
    embed = discord.Embed(
        title="üéÅ DROP XU!",
        description=
        f"**{amount} xu** ƒëang ch·ªù ng∆∞·ªùi nh·∫≠n!\n\n{message or 'Nh·∫•n üéÅ ƒë·ªÉ nh·∫≠n xu!'}",
        color=discord.Color.gold())

    # Th√™m gi·ªõi h·∫°n th·ªùi gian n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    if total_seconds > 0:
        time_str = ""
        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        seconds = total_seconds % 60

        if hours > 0:
            time_str += f"{hours} gi·ªù "
        if minutes > 0:
            time_str += f"{minutes} ph√∫t "
        if seconds > 0:
            time_str += f"{seconds} gi√¢y"

        embed.add_field(name="‚è±Ô∏è Th·ªùi h·∫°n",
                        value=f"Drop n√†y s·∫Ω k·∫øt th√∫c sau **{time_str}**",
                        inline=False)

    embed.set_footer(text="Nh·∫•n üéÅ ƒë·ªÉ nh·∫≠n xu")

    # G·ª≠i th√¥ng b√°o v√† th√™m reaction
    drop_msg = await ctx.send(embed=embed)
    await drop_msg.add_reaction("üéÅ")

    # L∆∞u th√¥ng tin drop v·ªõi th·ªùi gian h·∫øt h·∫°n n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    active_drops[drop_msg.id] = {
        "amount":
        amount,
        "claimed_users":
        set(),
        "expiry":
        datetime.now() +
        timedelta(seconds=total_seconds) if total_seconds > 0 else None,
        "auto_delete":
        total_seconds > 0
    }

    # G·ª≠i x√°c nh·∫≠n v·ªõi ID drop cho admin
    confirm_embed = discord.Embed(
        title="‚úÖ Drop Xu ƒë√£ t·∫°o",
        description=f"Drop **{amount} xu** ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!",
        color=discord.Color.green())
    confirm_embed.add_field(name="Drop ID",
                            value=f"`{drop_msg.id}`",
                            inline=False)
    confirm_embed.add_field(
        name="C√°ch d·ª´ng drop",
        value=
        f"S·ª≠ d·ª•ng l·ªánh `.stopdrop {drop_msg.id}` ƒë·ªÉ k·∫øt th√∫c drop n√†y s·ªõm",
        inline=False)

    if total_seconds > 0:
        expiry_time = datetime.now() + timedelta(seconds=total_seconds)
        confirm_embed.add_field(
            name="Th·ªùi gian h·∫øt h·∫°n",
            value=
            f"Drop s·∫Ω t·ª± ƒë·ªông k·∫øt th√∫c l√∫c: {expiry_time.strftime('%H:%M:%S %d/%m/%Y')}",
            inline=False)

    await ctx.send(embed=confirm_embed)

    # Thi·∫øt l·∫≠p t·ª± ƒë·ªông h·∫øt h·∫°n n·∫øu c√≥ th·ªùi gian
    if total_seconds > 0:
        await asyncio.sleep(total_seconds)
        # Ki·ªÉm tra n·∫øu drop v·∫´n t·ªìn t·∫°i v√† ch∆∞a b·ªã k·∫øt th√∫c th·ªß c√¥ng
        if drop_msg.id in active_drops:
            try:
                # L·∫•y k√™nh v√† th√¥ng b√°o
                channel = drop_msg.channel
                try:
                    message = await channel.fetch_message(drop_msg.id)

                    # T·∫°o th√¥ng b√°o h·∫øt h·∫°n
                    expired_embed = discord.Embed(
                        title="üïí DROP XU ƒê√É K·∫æT TH√öC!",
                        description=f"Drop **{amount} xu** ƒë√£ h·∫øt h·∫°n!",
                        color=discord.Color.dark_grey())
                    expired_embed.add_field(
                        name="S·ªë ng∆∞·ªùi ƒë√£ nh·∫≠n",
                        value=
                        f"**{len(active_drops[drop_msg.id]['claimed_users'])}** ng∆∞·ªùi",
                        inline=False)

                    # Ch·ªânh s·ª≠a th√¥ng b√°o
                    await message.edit(embed=expired_embed)

                    # X√≥a drop kh·ªèi danh s√°ch theo d√µi
                    del active_drops[drop_msg.id]

                    # Th√¥ng b√°o cho admin
                    await ctx.send(
                        f"üïí Drop ID: `{drop_msg.id}` ƒë√£ t·ª± ƒë·ªông k·∫øt th√∫c do h·∫øt h·∫°n."
                    )

                except discord.NotFound:
                    # Th√¥ng b√°o ƒë√£ b·ªã x√≥a
                    if drop_msg.id in active_drops:
                        del active_drops[
                            drop_msg.
                            id]  # X√≥a kh·ªèi danh s√°ch theo d√µi n·∫øu th√¥ng b√°o b·ªã x√≥a

            except Exception as e:
                print(f"L·ªói khi t·ª± ƒë·ªông k·∫øt th√∫c drop {drop_msg.id}: {e}")


@bot.command(name='stopdrop')
@commands.has_permissions(administrator=True)
async def stop_drop(ctx, drop_id: int = None):
    """D·ª´ng m·ªôt drop xu ƒëang di·ªÖn ra b·∫±ng ID"""
    if drop_id is None:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu th√¥ng tin",
            description=
            "Vui l√≤ng cung c·∫•p ID c·ªßa drop xu.\nV√≠ d·ª•: `.stopdrop 123456789012345678`",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra xem drop c√≥ t·ªìn t·∫°i kh√¥ng
    if drop_id not in active_drops:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng t√¨m th·∫•y",
            description=f"Kh√¥ng t√¨m th·∫•y drop xu v·ªõi ID: `{drop_id}`",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # L·∫•y th√¥ng tin drop
    drop_info = active_drops[drop_id]
    amount = drop_info["amount"]
    claimed_count = len(drop_info["claimed_users"])

    # X√≥a drop kh·ªèi danh s√°ch theo d√µi tr∆∞·ªõc khi t√¨m message
    del active_drops[drop_id]

    # G·ª≠i th√¥ng b√°o processing
    processing_msg = await ctx.send(f"‚è≥ ƒêang d·ª´ng drop ID: `{drop_id}`...")

    try:
        # T√¨m message trong current channel tr∆∞·ªõc (t·ªëi ∆∞u h√≥a)
        try:
            message = await ctx.channel.fetch_message(drop_id)
            found = True
        except discord.NotFound:
            found = False

        # N·∫øu kh√¥ng t√¨m th·∫•y trong current channel, t√¨m trong c√°c k√™nh kh√°c
        if not found:
            for channel in ctx.guild.text_channels:
                if channel == ctx.channel:  # ƒê√£ t√¨m trong channel n√†y r·ªìi
                    continue

                try:
                    message = await channel.fetch_message(drop_id)
                    found = True
                    break
                except discord.NotFound:
                    continue
                except discord.Forbidden:
                    continue  # B·ªè qua k√™nh kh√¥ng c√≥ quy·ªÅn ƒë·ªçc
                except Exception as e:
                    print(
                        f"L·ªói khi t√¨m message trong k√™nh {channel.name}: {e}")

        if found:
            # T·∫°o th√¥ng b√°o h·∫øt h·∫°n
            expired_embed = discord.Embed(
                title="üõë DROP XU ƒê√É B·ªä D·ª™NG!",
                description=f"Drop **{amount} xu** ƒë√£ b·ªã admin d·ª´ng!",
                color=discord.Color.dark_grey())
            expired_embed.add_field(name="S·ªë ng∆∞·ªùi ƒë√£ nh·∫≠n",
                                    value=f"**{claimed_count}** ng∆∞·ªùi",
                                    inline=False)
            expired_embed.set_footer(text=f"D·ª´ng b·ªüi: {ctx.author.name}")

            # Ch·ªânh s·ª≠a th√¥ng b√°o
            await message.edit(embed=expired_embed)

            # Th√¥ng b√°o th√†nh c√¥ng
            success_embed = discord.Embed(
                title="‚úÖ Drop xu ƒë√£ d·ª´ng",
                description=f"Drop ID: `{drop_id}` ƒë√£ ƒë∆∞·ª£c d·ª´ng th√†nh c√¥ng.",
                color=discord.Color.green())
            success_embed.add_field(name="S·ªë ng∆∞·ªùi ƒë√£ nh·∫≠n",
                                    value=f"{claimed_count} ng∆∞·ªùi",
                                    inline=True)
            await processing_msg.edit(content=None, embed=success_embed)
        else:
            # Kh√¥ng t√¨m th·∫•y tin nh·∫Øn
            embed = discord.Embed(
                title="‚ö†Ô∏è Drop xu ƒë√£ d·ª´ng m·ªôt ph·∫ßn",
                description=
                f"Drop ID: `{drop_id}` ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi h·ªá th·ªëng nh∆∞ng kh√¥ng t√¨m th·∫•y tin nh·∫Øn ƒë·ªÉ ch·ªânh s·ª≠a.",
                color=discord.Color.yellow())
            await processing_msg.edit(content=None, embed=embed)

    except Exception as e:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói khi d·ª´ng drop: {str(e)}",
            color=discord.Color.red())
        await processing_msg.edit(content=None, embed=embed)


@bot.command(name='listdrop', aliases=['lsdrop', 'droplist'])
@commands.has_permissions(administrator=True)
async def list_drops(ctx):
    """Lists all active xu drops with their details"""
    if not active_drops:
        embed = discord.Embed(
            title="üí∏ Drop Xu",
            description="Kh√¥ng c√≥ drop xu n√†o ƒëang ho·∫°t ƒë·ªông.",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
        return

    embed = discord.Embed(
        title="üí∏ Drop Xu ƒêang Ho·∫°t ƒê·ªông",
        description=f"Hi·ªán c√≥ **{len(active_drops)}** drop xu ƒëang ho·∫°t ƒë·ªông:",
        color=discord.Color.gold())

    current_time = datetime.now()

    for msg_id, drop_info in active_drops.items():
        claimed_count = len(drop_info['claimed_users'])
        expiry = drop_info.get('expiry')

        value_text = f"Gi√° tr·ªã: **{drop_info['amount']} xu**\n"
        value_text += f"ƒê√£ nh·∫≠n: **{claimed_count} ng∆∞·ªùi**"

        if expiry:
            if current_time > expiry:
                time_status = "**ƒê√£ h·∫øt h·∫°n**"
            else:
                remaining = expiry - current_time
                minutes = remaining.seconds // 60
                seconds = remaining.seconds % 60
                time_status = f"C√≤n **{minutes}p {seconds}s**"
            value_text += f"\nTh·ªùi h·∫°n: {time_status}"

        embed.add_field(name=f"ID: `{msg_id}`", value=value_text, inline=False)

    embed.set_footer(text="S·ª≠ d·ª•ng .stopdrop [ID] ƒë·ªÉ d·ª´ng m·ªôt drop")
    await ctx.send(embed=embed)


@bot.command(name='resetxu')
@commands.has_permissions(administrator=True)
async def reset_xu(ctx, member: discord.Member = None, amount: int = 0):
    """Reset xu c·ªßa ng∆∞·ªùi ch∆°i v·ªÅ 0 ho·∫∑c gi√° tr·ªã c·ª• th·ªÉ"""
    if member is None:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu th√¥ng tin",
            description=
            "Vui l√≤ng ch·ªâ ƒë·ªãnh ng∆∞·ªùi d√πng ƒë·ªÉ reset xu.\nV√≠ d·ª•: `.resetxu @ng∆∞·ªùi_d√πng [s·ªë xu m·ªõi]`\nN·∫øu kh√¥ng nh·∫≠p s·ªë xu m·ªõi, m·∫∑c ƒë·ªãnh l√† 0.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # B·∫£o v·ªá admin ch√≠nh
    if member.id == 618702036992655381:
        embed = discord.Embed(
            title="üõ°Ô∏è B·∫£o V·ªá Admin",
            description="Kh√¥ng th·ªÉ reset xu c·ªßa admin ch√≠nh!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # L∆∞u gi√° tr·ªã c≈© ƒë·ªÉ b√°o c√°o
    old_amount = currency.get(member.id, 0)

    # Reset xu v·ªÅ gi√° tr·ªã m·ªõi
    currency[member.id] = amount

    embed = discord.Embed(
        title="‚úÖ Reset Xu Th√†nh C√¥ng",
        description=
        f"ƒê√£ reset xu c·ªßa {member.mention} t·ª´ **{old_amount} xu** xu·ªëng **{amount} xu**.",
        color=discord.Color.green())

    embed.set_footer(
        text=
        f"Admin: {ctx.author.name} | {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
    )
    await ctx.send(embed=embed)


@bot.command(name='resetbank')
@commands.has_permissions(administrator=True)
async def reset_bank(ctx, member: discord.Member = None, amount: int = 0):
    """Reset ti·ªÅn trong ng√¢n h√†ng c·ªßa ng∆∞·ªùi ch∆°i v·ªÅ 0 ho·∫∑c gi√° tr·ªã c·ª• th·ªÉ"""
    if member is None:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu th√¥ng tin",
            description=
            "Vui l√≤ng ch·ªâ ƒë·ªãnh ng∆∞·ªùi d√πng ƒë·ªÉ reset ti·ªÅn ng√¢n h√†ng.\nV√≠ d·ª•: `.resetbank @ng∆∞·ªùi_d√πng [s·ªë xu m·ªõi]`\nN·∫øu kh√¥ng nh·∫≠p s·ªë xu m·ªõi, m·∫∑c ƒë·ªãnh l√† 0.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # B·∫£o v·ªá admin ch√≠nh
    if member.id == 618702036992655381:
        embed = discord.Embed(
            title="üõ°Ô∏è B·∫£o V·ªá Admin",
            description="Kh√¥ng th·ªÉ reset ti·ªÅn ng√¢n h√†ng c·ªßa admin ch√≠nh!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    user_id = member.id

    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ t√†i kho·∫£n ng√¢n h√†ng kh√¥ng
    if user_id not in bank_accounts:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng t√¨m th·∫•y",
            description=f"{member.mention} kh√¥ng c√≥ t√†i kho·∫£n ng√¢n h√†ng.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # L∆∞u gi√° tr·ªã c≈© ƒë·ªÉ b√°o c√°o
    old_balance = bank_accounts[user_id]["balance"]

    # Reset ti·ªÅn ng√¢n h√†ng v·ªÅ gi√° tr·ªã m·ªõi
    bank_accounts[user_id]["balance"] = amount
    bank_accounts[user_id]["last_interest"] = datetime.now()

    embed = discord.Embed(
        title="‚úÖ Reset Ti·ªÅn Ng√¢n H√†ng Th√†nh C√¥ng",
        description=
        f"ƒê√£ reset ti·ªÅn ng√¢n h√†ng c·ªßa {member.mention} t·ª´ **{old_balance} xu** xu·ªëng **{amount} xu**.",
        color=discord.Color.green())

    embed.set_footer(
        text=
        f"Admin: {ctx.author.name} | {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
    )
    await ctx.send(embed=embed)


@bot.command(name='resetket')
@commands.has_permissions(administrator=True)
async def reset_ket(ctx, member: discord.Member = None, amount: int = 0):
    """Reset ti·ªÅn trong k√©t s·∫Øt c·ªßa ng∆∞·ªùi ch∆°i v·ªÅ 0 ho·∫∑c gi√° tr·ªã c·ª• th·ªÉ"""
    if member is None:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu th√¥ng tin",
            description=
            "Vui l√≤ng ch·ªâ ƒë·ªãnh ng∆∞·ªùi d√πng ƒë·ªÉ reset ti·ªÅn k√©t s·∫Øt.\nV√≠ d·ª•: `.resetket @ng∆∞·ªùi_d√πng [s·ªë xu m·ªõi]`\nN·∫øu kh√¥ng nh·∫≠p s·ªë xu m·ªõi, m·∫∑c ƒë·ªãnh l√† 0.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # B·∫£o v·ªá admin ch√≠nh
    if member.id == 618702036992655381:
        embed = discord.Embed(
            title="üõ°Ô∏è B·∫£o V·ªá Admin",
            description="Kh√¥ng th·ªÉ reset ti·ªÅn k√©t s·∫Øt c·ªßa admin ch√≠nh!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    user_id = member.id
    guild_id = ctx.guild.id

    # L∆∞u gi√° tr·ªã c≈© ƒë·ªÉ b√°o c√°o
    old_amount = vault.get(guild_id, {}).get(user_id, 0)

    # Reset ti·ªÅn k√©t s·∫Øt v·ªÅ gi√° tr·ªã m·ªõi
    if guild_id not in vault:
        vault[guild_id] = defaultdict(int)
    vault[guild_id][user_id] = amount

    embed = discord.Embed(
        title="‚úÖ Reset Ti·ªÅn K√©t S·∫Øt Th√†nh C√¥ng",
        description=
        f"ƒê√£ reset ti·ªÅn k√©t s·∫Øt c·ªßa {member.mention} t·ª´ **{old_amount} xu** xu·ªëng **{amount} xu**.",
        color=discord.Color.green())

    embed.set_footer(
        text=
        f"Admin: {ctx.author.name} | {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
    )
    await ctx.send(embed=embed)


@bot.command(name='resetall')
@commands.has_permissions(administrator=True)
async def reset_all(ctx, member: discord.Member = None, amount: int = 0):
    """Reset t·∫•t c·∫£: xu, ng√¢n h√†ng, k√©t s·∫Øt c·ªßa ng∆∞·ªùi ch∆°i v·ªÅ 0 ho·∫∑c gi√° tr·ªã c·ª• th·ªÉ"""
    if member is None:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu th√¥ng tin",
            description=
            "Vui l√≤ng ch·ªâ ƒë·ªãnh ng∆∞·ªùi d√πng ƒë·ªÉ reset t·∫•t c·∫£ ti·ªÅn.\nV√≠ d·ª•: `.resetall @ng∆∞·ªùi_d√πng [s·ªë xu m·ªõi]`\nN·∫øu kh√¥ng nh·∫≠p s·ªë xu m·ªõi, m·∫∑c ƒë·ªãnh l√† 0.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # B·∫£o v·ªá admin ch√≠nh
    if member.id == 618702036992655381:
        embed = discord.Embed(
            title="üõ°Ô∏è B·∫£o V·ªá Admin",
            description="Kh√¥ng th·ªÉ reset ti·ªÅn c·ªßa admin ch√≠nh!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    user_id = member.id
    guild_id = ctx.guild.id

    # L∆∞u gi√° tr·ªã c≈© ƒë·ªÉ b√°o c√°o
    old_currency = currency.get(user_id, 0)
    old_bank = bank_accounts.get(user_id, {}).get(
        "balance", 0) if user_id in bank_accounts else 0
    old_vault = vault.get(guild_id, {}).get(user_id, 0)

    # Reset t·∫•t c·∫£ v·ªÅ gi√° tr·ªã m·ªõi
    currency[user_id] = amount

    if user_id in bank_accounts:
        bank_accounts[user_id]["balance"] = amount
        bank_accounts[user_id]["last_interest"] = datetime.now()

    if guild_id not in vault:
        vault[guild_id] = defaultdict(int)
    vault[guild_id][user_id] = amount

    # T·∫°o embed th√¥ng b√°o
    embed = discord.Embed(
        title="‚úÖ Reset T·∫•t C·∫£ Th√†nh C√¥ng",
        description=
        f"ƒê√£ reset t·∫•t c·∫£ ti·ªÅn c·ªßa {member.mention} v·ªÅ **{amount} xu**.",
        color=discord.Color.green())

    embed.add_field(name="Ti·ªÅn xu",
                    value=f"T·ª´ **{old_currency} xu** ‚Üí **{amount} xu**",
                    inline=False)

    embed.add_field(name="Ti·ªÅn ng√¢n h√†ng",
                    value=f"T·ª´ **{old_bank} xu** ‚Üí **{amount} xu**",
                    inline=False)

    embed.add_field(name="Ti·ªÅn k√©t s·∫Øt",
                    value=f"T·ª´ **{old_vault} xu** ‚Üí **{amount} xu**",
                    inline=False)

    embed.set_footer(
        text=
        f"Admin: {ctx.author.name} | {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
    )
    await ctx.send(embed=embed)


@bot.command(name='hoidap', aliases=['hd'])
@check_channel()
@check_game_enabled('hoidap')
async def hoi_dap(ctx, bet: str = None):
    """Tr√≤ ch∆°i h·ªèi ƒë√°p v·ªõi c√¢u h·ªèi ng·∫´u nhi√™n"""
    if bet is None:
        embed = discord.Embed(
            title="‚ùì H·ªèi ƒê√°p - H∆∞·ªõng D·∫´n",
            description=
            "Tr·∫£ l·ªùi c√¢u h·ªèi ƒë·ªÉ nh·∫≠n th∆∞·ªüng.\nV√≠ d·ª•: `.hoidap 50` ho·∫∑c `.hoidap all`",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°ch ch∆°i",
            value=
            "- Bot s·∫Ω ƒë∆∞a ra c√¢u h·ªèi ng·∫´u nhi√™n\n- B·∫°n ch·ªâ c√≥ 10 gi√¢y ƒë·ªÉ tr·∫£ l·ªùi\n- Tr·∫£ l·ªùi ƒë√∫ng: nh·∫≠n x2 ti·ªÅn c∆∞·ª£c\n- Tr·∫£ l·ªùi sai: m·∫•t ti·ªÅn c∆∞·ª£c",
            inline=False)
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra s·ªë ti·ªÅn c∆∞·ª£c
    user_id = ctx.author.id

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if bet_amount <= 0:
        embed = discord.Embed(title="‚ùå L·ªói",
                              description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[user_id] < bet_amount:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß xu",
            description=
            f"B·∫°n c·∫ßn {bet_amount} xu ƒë·ªÉ ch∆°i, nh∆∞ng ch·ªâ c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Danh s√°ch c√¢u h·ªèi v√† ƒë√°p √°n
    questions = [
        {
            "question": "Th·ªß ƒë√¥ c·ªßa Vi·ªát Nam l√† g√¨?",
            "answer": ["hanoi", "ha noi", "h√† n·ªôi"],
            "hint": "B·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ H"
        },
        {
            "question": "1 + 1 = ?",
            "answer": ["2", "hai"],
            "hint": "S·ªë ch·∫µn nh·ªè nh·∫•t"
        },
        {
            "question":
            "M√†u c·ªßa b·∫ßu tr·ªùi l√† g√¨?",
            "answer": [
                "xanh", "xanh duong", "xanh da troi", "xanh d∆∞∆°ng",
                "xanh da tr·ªùi"
            ],
            "hint":
            "M·ªôt trong nh·ªØng m√†u c∆° b·∫£n"
        },
        {
            "question": "Con v·∫≠t n√†o ƒë∆∞·ª£c g·ªçi l√† ch√∫a t·ªÉ r·ª´ng xanh?",
            "answer": ["su tu", "s∆∞ t·ª≠", "sutu"],
            "hint": "Bi·ªát danh: Vua c·ªßa mu√¥n lo√†i"
        },
        # 10 c√¢u h·ªèi kh√≥ ƒë√£ th√™m tr∆∞·ªõc ƒë√≥
        {
            "question": "Nguy√™n t·ªë h√≥a h·ªçc n√†o c√≥ k√Ω hi·ªáu Au?",
            "answer": ["vang", "gold", "aurum"],
            "hint": "Kim lo·∫°i qu√Ω ƒë∆∞·ª£c d√πng l√†m trang s·ª©c"
        },
        {
            "question": "Ai l√† ng∆∞·ªùi ph√°t minh ra ƒëi·ªán tho·∫°i?",
            "answer": ["alexander graham bell", "bell", "graham bell"],
            "hint": "T√™n c√≥ ch·ª©a ch·ªØ 'Bell'"
        },
        {
            "question":
            "Tr√°i ƒë·∫•t quay quanh m·∫∑t tr·ªùi h·∫øt bao nhi√™u ng√†y?",
            "answer": [
                "365", "365.25", "365 ng√†y", "365.25 ng√†y", "365 ngay",
                "365 ngay ruoi", "365 ng√†y r∆∞·ª°i"
            ],
            "hint":
            "S·ªë ng√†y trong m·ªôt nƒÉm"
        },
        {
            "question": "ƒê√¢u l√† s√¥ng d√†i nh·∫•t th·∫ø gi·ªõi?",
            "answer": ["s√¥ng nil", "nile", "nil", "song nil"],
            "hint": "Ch·∫£y qua c√°c n∆∞·ªõc ·ªü ch√¢u Phi"
        },
        {
            "question": "Ph√©p t√≠nh 8^2 - 4^3 = ?",
            "answer": ["0", "kh√¥ng", "khong"],
            "hint": "Li√™n quan ƒë·∫øn s·ªë 64"
        },
        {
            "question":
            "Lo·∫°i v≈© kh√≠ n√†o ƒë∆∞·ª£c Leonardo da Vinci thi·∫øt k·∫ø nh∆∞ng kh√¥ng bao gi·ªù ƒë∆∞·ª£c ch·∫ø t·∫°o?",
            "answer": ["tank", "xe tƒÉng", "xe tang"],
            "hint": "Ph∆∞∆°ng ti·ªán chi·∫øn ƒë·∫•u b·ªçc th√©p"
        },
        {
            "question":
            "ƒê√¢u l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh c·ªï nh·∫•t c√≤n ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i ng√†y nay?",
            "answer": ["fortran"],
            "hint": "ƒê∆∞·ª£c ph√°t tri·ªÉn v√†o nƒÉm 1957, b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ F"
        },
        {
            "question": "T·ªïng c√°c ch·ªØ s·ªë c·ªßa s·ªë 2023 l√† bao nhi√™u?",
            "answer": ["7", "bay", "b·∫£y"],
            "hint": "2 + 0 + 2 + 3 = ?"
        },
        {
            "question":
            "Trong h√≥a h·ªçc, H2O2 l√† h·ª£p ch·∫•t g√¨?",
            "answer": [
                "hidro peroxide", "hydrogen peroxide", "oxy gia",
                "hydro peroxide", "oxy gi√†"
            ],
            "hint":
            "Th∆∞·ªùng ƒë∆∞·ª£c d√πng ƒë·ªÉ t·∫©y tr·∫Øng"
        },
        {
            "question": "Ai l√† ng∆∞·ªùi ƒë∆∞·ª£c m·ªánh danh 'Cha ƒë·∫ª c·ªßa m√°y t√≠nh'?",
            "answer": ["alan turing", "turing"],
            "hint": "Nh√† to√°n h·ªçc ng∆∞·ªùi Anh, ph√° m√£ Enigma trong Th·∫ø chi·∫øn II"
        },
        # Th√™m 10 c√¢u h·ªèi c·ª±c kh√≥ m·ªõi
        {
            "question": "Qu·ªëc gia n√†o c√≥ di·ªán t√≠ch nh·ªè nh·∫•t th·∫ø gi·ªõi?",
            "answer":
            ["vatican", "thanh vatican", "th√†nh vatican", "vaticano"],
            "hint": "L√† m·ªôt qu·ªëc gia n·∫±m trong th√†nh ph·ªë Rome, √ù"
        },
        {
            "question": "Ai l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë·∫∑t ch√¢n l√™n M·∫∑t TrƒÉng?",
            "answer": ["neil armstrong", "armstrong", "neil"],
            "hint": "Phi h√†nh gia ng∆∞·ªùi M·ªπ, th·ª±c hi·ªán s·ª© m·ªánh Apollo 11"
        },
        {
            "question":
            "Nguy√™n t·ªë h√≥a h·ªçc n√†o c√≥ s·ªë nguy√™n t·ª≠ l·ªõn nh·∫•t trong c√°c nguy√™n t·ªë t·ª± nhi√™n?",
            "answer": ["uranium", "urani", "u", "u-92"],
            "hint":
            "C√≥ s·ªë nguy√™n t·ª≠ l√† 92, th∆∞·ªùng ƒë∆∞·ª£c d√πng trong nh√† m√°y ƒëi·ªán h·∫°t nh√¢n"
        },
        {
            "question": "ƒê·ªãnh l√Ω Pythagorean √°p d·ª•ng cho h√¨nh g√¨?",
            "answer": ["tam gi√°c vu√¥ng", "triangle", "tam giac vuong"],
            "hint": "H√¨nh h·ªçc c√≥ m·ªôt g√≥c 90 ƒë·ªô"
        },
        {
            "question":
            "NƒÉm bao nhi√™u Constantinople th·∫•t th·ªß v√†o tay ƒê·∫ø ch·∫ø Ottoman?",
            "answer": ["1453", "nam 1453"],
            "hint": "S·ª± ki·ªán ƒë√°nh d·∫•u s·ª± k·∫øt th√∫c c·ªßa ƒê·∫ø ch·∫ø Byzantine"
        },
        {
            "question": "Protein c·∫•u t·∫°o n√™n t√≥c v√† m√≥ng tay l√† g√¨?",
            "answer": ["keratin", "k√™ ra tin"],
            "hint": "B·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ K, l√† protein s·ª£i d·∫°ng xo·∫Øn"
        },
        {
            "question": "ƒê∆°n v·ªã ƒëo c∆∞·ªùng ƒë·ªô √°nh s√°ng trong h·ªá SI l√† g√¨?",
            "answer": ["candela", "cd"],
            "hint": "B·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ C, li√™n quan ƒë·∫øn t·ª´ 'candle' (n·∫øn)"
        },
        {
            "question": "C√¥ng th·ª©c h√≥a h·ªçc c·ªßa glucose l√† g√¨?",
            "answer": ["c6h12o6", "c6 h12 o6"],
            "hint": "C√¥ng th·ª©c ph√¢n t·ª≠ g·ªìm 6 carbon, 12 hydrogen v√† 6 oxygen"
        },
        {
            "question": "Ai l√† ng∆∞·ªùi nghi√™n c·ª©u v√† c√¥ng b·ªë thuy·∫øt t∆∞∆°ng ƒë·ªëi?",
            "answer": ["albert einstein", "einstein", "anbe anh xtanh"],
            "hint": "Nh√† v·∫≠t l√Ω n·ªïi ti·∫øng v·ªõi c√¥ng th·ª©c E=mc¬≤"
        },
        {
            "question": "ƒê√¢u l√† ng·ªçn n√∫i cao nh·∫•t th·∫ø gi·ªõi?",
            "answer": ["everest", "n√∫i everest", "nui everest", "chomolungma"],
            "hint": "Cao 8,848.86 m√©t so v·ªõi m·ª±c n∆∞·ªõc bi·ªÉn, n·∫±m ·ªü d√£y Himalaya"
        },
        # Th√™m 30 c√¢u h·ªèi c·ª±c k·ª≥ kh√≥ m·ªõi
        {
            "question":
            "Nguy√™n t·ªë n√†o chi·∫øm t·ª∑ l·ªá l·ªõn nh·∫•t trong v·ªè Tr√°i ƒê·∫•t?",
            "answer": ["oxygen", "o", "oxy"],
            "hint": "Kh√¥ng ph·∫£i silicon hay s·∫Øt nh∆∞ nhi·ªÅu ng∆∞·ªùi nghƒ©"
        },
        {
            "question":
            "NƒÉm 1923, m·ªôt USD c√≥ th·ªÉ ƒë·ªïi ƒë∆∞·ª£c bao nhi√™u Reichsmark c·ªßa ƒê·ª©c?",
            "answer": ["4.2 trillion", "4.2 ngh√¨n t·ª∑", "4200000000000"],
            "hint": "S·ªë ngh√¨n t·ª∑, l√† v√≠ d·ª• ƒëi·ªÉn h√¨nh v·ªÅ si√™u l·∫°m ph√°t"
        },
        {
            "question":
            "Qu·ªëc gia n√†o l√† qu·ªëc gia duy nh·∫•t kh√¥ng c√≥ h√¨nh ch·ªØ nh·∫≠t tr√™n qu·ªëc k·ª≥?",
            "answer": ["nepal", "ne pan"],
            "hint": "Qu·ªëc gia ·ªü Nam √Å, qu·ªëc k·ª≥ h√¨nh tam gi√°c k√©p"
        },
        {
            "question": "Em s·ªë n√†o l·ªõn h∆°n: 1/3 hay 1/4?",
            "answer": ["1/3", "m·ªôt ph·∫ßn ba", "mot phan ba"],
            "hint": "M·∫´u s·ªë c√†ng nh·ªè, gi√° tr·ªã ph√¢n s·ªë c√†ng l·ªõn"
        },
        {
            "question":
            "S·ªë l·ªõn nh·∫•t c√≥ th·ªÉ bi·ªÉu di·ªÖn b·∫±ng 3 ch·ªØ s·ªë La M√£ l√† bao nhi√™u?",
            "answer": ["3999", "mmmcmxcix"],
            "hint": "G·∫ßn v·ªõi 4000"
        },
        {
            "question":
            "Nh√† to√°n h·ªçc n√†o ƒë√£ ch·ª©ng minh ƒë·ªãnh l√Ω Fermat cu·ªëi c√πng v√†o nƒÉm 1995?",
            "answer": ["andrew wiles", "wiles"],
            "hint":
            "Nh√† to√°n h·ªçc ng∆∞·ªùi Anh, gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ t·ªìn t·∫°i h∆°n 350 nƒÉm"
        },
        {
            "question": "Enzyme n√†o trong d·∫° d√†y con ng∆∞·ªùi ph√¢n h·ªßy protein?",
            "answer": ["pepsin", "pep sin"],
            "hint": "Ho·∫°t ƒë·ªông trong m√¥i tr∆∞·ªùng acid c·ªßa d·∫° d√†y"
        },
        {
            "question":
            "Hi·ªáu ·ª©ng n√†o khi·∫øn √°nh s√°ng b·ªã b·∫ª cong khi ƒëi qua m·ªôt lƒÉng k√≠nh?",
            "answer": ["khuc xa", "kh√∫c x·∫°", "refraction", "s·ª± kh√∫c x·∫°"],
            "hint":
            "X·∫£y ra khi √°nh s√°ng ƒëi qua hai m√¥i tr∆∞·ªùng c√≥ m·∫≠t ƒë·ªô kh√°c nhau"
        },
        {
            "question":
            "Kho·∫£ng c√°ch trung b√¨nh t·ª´ Tr√°i ƒê·∫•t ƒë·∫øn M·∫∑t Tr·ªùi l√† bao nhi√™u tri·ªáu km?",
            "answer": ["150", "150 tri·ªáu", "150 trieu", "150000000"],
            "hint": "C√≤n g·ªçi l√† 1 ƒë∆°n v·ªã thi√™n vƒÉn (AU)"
        },
        {
            "question": "Asteroid n√†o l·ªõn nh·∫•t trong h·ªá M·∫∑t Tr·ªùi?",
            "answer": ["ceres", "seres"],
            "hint": "ƒê·ªß l·ªõn ƒë·ªÉ ƒë∆∞·ª£c ph√¢n lo·∫°i l√† h√†nh tinh l√πn"
        },
        {
            "question": "N∆∞·ªõc n√†o t·ª´ng c√≥ t√™n g·ªçi l√† Siam?",
            "answer": ["thailand", "thai lan", "th√°i lan"],
            "hint": "ƒê·∫•t n∆∞·ªõc ƒê√¥ng Nam √Å n·ªïi ti·∫øng v·ªõi m√≥n tom yum"
        },
        {
            "question":
            "Ph∆∞∆°ng tr√¨nh E = hf m√¥ t·∫£ hi·ªán t∆∞·ª£ng g√¨ trong v·∫≠t l√Ω?",
            "answer": [
                "hien tuong quang dien", "hi·ªán t∆∞·ª£ng quang ƒëi·ªán", "quang ƒëi·ªán",
                "photoelectric effect"
            ],
            "hint":
            "Hi·ªán t∆∞·ª£ng m√† √°nh s√°ng gi·∫£i ph√≥ng electron t·ª´ kim lo·∫°i"
        },
        {
            "question":
            "H·ªá s·ªë √°p su·∫•t kh√≠ quy·ªÉn ti√™u chu·∫©n ·ªü m·ª±c n∆∞·ªõc bi·ªÉn l√† bao nhi√™u pascal?",
            "answer": ["101325", "101,325"],
            "hint": "Kho·∫£ng 1 bar ho·∫∑c 1 atm"
        },
        {
            "question":
            "Lo√†i kh·ªßng long ba s·ª´ng n·ªïi ti·∫øng c√≥ t√™n khoa h·ªçc l√† g√¨?",
            "answer": ["triceratops", "tri ce ra tops"],
            "hint": "T√™n c√≥ nghƒ©a l√† 'm·∫∑t ba s·ª´ng'"
        },
        {
            "question":
            "Ai l√† ng∆∞·ªùi ƒë·∫ßu ti√™n l√°i t√†u v≈© tr·ª• bay v√≤ng quanh Tr√°i ƒê·∫•t?",
            "answer":
            ["yuri gagarin", "gagarin", "ga ga rin", "iu ri ga ga rin"],
            "hint": "Phi h√†nh gia ng∆∞·ªùi Nga, th·ª±c hi·ªán chuy·∫øn bay v√†o nƒÉm 1961"
        },
        {
            "question":
            "Gi√° tr·ªã n√†o l√† k·∫øt qu·∫£ c·ªßa ph√©p t√≠nh lim(x‚Üí0) sin(x)/x?",
            "answer": ["1", "m·ªôt", "mot"],
            "hint":
            "K·∫øt qu·∫£ c∆° b·∫£n trong gi·∫£i t√≠ch, li√™n quan ƒë·∫øn ƒë·∫°o h√†m c·ªßa h√†m sin"
        },
        {
            "question":
            "Hi·ªáu ·ª©ng tr√°i ƒë·∫•t xanh x·∫£y ra tr√™n h√†nh tinh n√†o trong h·ªá M·∫∑t Tr·ªùi?",
            "answer": ["venus", "kim", "sao kim"],
            "hint": "H√†nh tinh n√≥ng nh·∫•t trong h·ªá M·∫∑t Tr·ªùi"
        },
        {
            "question": "B·ªô gen ng∆∞·ªùi c√≥ bao nhi√™u c·∫∑p nhi·ªÖm s·∫Øc th·ªÉ?",
            "answer": ["23", "hai m∆∞∆°i ba", "hai muoi ba"],
            "hint": "M·ªôt n·ª≠a s·ªë nhi·ªÖm s·∫Øc th·ªÉ t·ª´ m·∫π, n·ª≠a c√≤n l·∫°i t·ª´ cha"
        },
        {
            "question":
            "L√≠t v√† ƒë·ªÅ-xi-m√©t kh·ªëi (dm¬≥) c√≥ quan h·ªá nh∆∞ th·∫ø n√†o?",
            "answer":
            ["bang nhau", "b·∫±ng nhau", "equal", "gi·ªëng nhau", "giong nhau"],
            "hint":
            "1 dm¬≥ = ? L"
        },
        {
            "question": "Nguy√™n t·ªë c√≥ k√Ω hi·ªáu h√≥a h·ªçc Hg l√† g√¨?",
            "answer": ["th·ªßy ng√¢n", "thuy ngan", "mercury"],
            "hint":
            "Kim lo·∫°i l·ªèng ·ªü nhi·ªát ƒë·ªô ph√≤ng, t·ª´ng ƒë∆∞·ª£c d√πng trong nhi·ªát k·∫ø"
        },
        {
            "question": "Ai l√† ng∆∞·ªùi ƒë·ªÅ xu·∫•t thuy·∫øt t∆∞∆°ng ƒë·ªëi r·ªông?",
            "answer": ["albert einstein", "einstein"],
            "hint": "C≈©ng l√† ng∆∞·ªùi ƒë·ªÅ xu·∫•t thuy·∫øt t∆∞∆°ng ƒë·ªëi h·∫πp"
        },
        {
            "question":
            "ƒê∆°n v·ªã ƒëo √°p su·∫•t n√†o mang t√™n nh√† khoa h·ªçc ng∆∞·ªùi Ph√°p?",
            "answer": ["pascal", "pa"],
            "hint": "ƒê∆°n v·ªã SI c·ªßa √°p su·∫•t, k√Ω hi·ªáu l√† Pa"
        },
        {
            "question":
            "Lo·∫°i m√£ h√≥a n√†o s·ª≠ d·ª•ng hai kh√≥a: kh√≥a c√¥ng khai v√† kh√≥a ri√™ng?",
            "answer": [
                "b·∫•t ƒë·ªëi x·ª©ng", "bat doi xung", "asymmetric", "khoa cong khai",
                "public key", "kh√≥a c√¥ng khai"
            ],
            "hint":
            "Ph∆∞∆°ng ph√°p m√£ h√≥a c∆° b·∫£n trong c√°c giao d·ªãch tr·ª±c tuy·∫øn an to√†n"
        },
        {
            "question": "ƒê√¢u l√† nguy√™n nh√¢n ch√≠nh g√¢y b·ªánh scurvy?",
            "answer": ["thi·∫øu vitamin c", "thieu vitamin c"],
            "hint": "Thi·∫øu h·ª•t vitamin c√≥ nhi·ªÅu trong cam qu√Ωt"
        },
        {
            "question":
            "Ai vi·∫øt b√†i b√°o 'On the Electrodynamics of Moving Bodies' nƒÉm 1905 gi·ªõi thi·ªáu thuy·∫øt t∆∞∆°ng ƒë·ªëi h·∫πp?",
            "answer": ["albert einstein", "einstein"],
            "hint": "Nh√† v·∫≠t l√Ω ng∆∞·ªùi ƒê·ª©c-M·ªπ n·ªïi ti·∫øng v·ªõi ph∆∞∆°ng tr√¨nh E=mc¬≤"
        },
        {
            "question":
            "Qu√° tr√¨nh n√†o di·ªÖn ra trong l√≤ ph·∫£n ·ª©ng h·∫°t nh√¢n?",
            "answer": ["ph√¢n h·∫°ch", "phan hach", "nuclear fission"],
            "hint":
            "Qu√° tr√¨nh chia t√°ch c√°c h·∫°t nh√¢n n·∫∑ng th√†nh c√°c h·∫°t nh√¢n nh·∫π h∆°n"
        },
        {
            "question": "·ªû ƒë√¢u c√≥ ƒë·ªãa ƒëi·ªÉm ƒë∆∞·ª£c g·ªçi l√† 'n√≥c nh√† th·∫ø gi·ªõi'?",
            "answer": ["t√¢y t·∫°ng", "tay tang", "tibet"],
            "hint": "Cao nguy√™n g·∫ßn d√£y Himalaya"
        },
        {
            "question": "H√†m s·ªë l∆∞·ª£ng gi√°c n√†o c√≥ ƒë·∫°o h√†m b·∫±ng ch√≠nh n√≥?",
            "answer": ["e^x", "e m≈© x", "e mu x", "h√†m m≈© e", "ham mu e"],
            "hint": "H√†m s·ªë m√† ƒë·∫°o h√†m kh√¥ng thay ƒë·ªïi gi√° tr·ªã c·ªßa h√†m"
        },
        {
            "question": "Eo bi·ªÉn n√†o ngƒÉn c√°ch ch√¢u √Çu v√† ch√¢u Phi?",
            "answer": ["gibraltar", "gibraltar strait", "eo gibraltar"],
            "hint": "N·ªëi ƒê·∫°i T√¢y D∆∞∆°ng v·ªõi ƒê·ªãa Trung H·∫£i"
        },
        {
            "question": "V√πng ƒë·∫•t n√†o ƒë∆∞·ª£c g·ªçi l√† 'v√πng ƒë·∫•t c·ªßa l·ª≠a v√† bƒÉng'?",
            "answer": ["iceland", "bƒÉng ƒë·∫£o", "bang dao"],
            "hint": "Qu·ªëc gia ƒë·∫£o ·ªü B·∫Øc √Çu v·ªõi nhi·ªÅu n√∫i l·ª≠a v√† s√¥ng bƒÉng"
        }
    ]

    # Ch·ªçn c√¢u h·ªèi ng·∫´u nhi√™n
    question_data = random.choice(questions)

    embed = discord.Embed(title="‚ùì C√¢u h·ªèi",
                          description=question_data["question"],
                          color=discord.Color.blue())
    embed.add_field(name="Th·ªùi gian", value="10 gi√¢y", inline=True)
    embed.add_field(name="Ti·ªÅn c∆∞·ª£c", value=f"{bet_amount} xu", inline=True)

    question_msg = await ctx.send(embed=embed)

    # Ki·ªÉm tra c√¢u tr·∫£ l·ªùi t·ª´ ng∆∞·ªùi d√πng
    def check(message):
        return message.author == ctx.author and message.channel == ctx.channel

    # Theo d√µi ƒë·∫øm ng∆∞·ª£c v√† g·ª£i √Ω ƒë·ªìng th·ªùi v·ªõi vi·ªác ch·ªù c√¢u tr·∫£ l·ªùi
    tasks = []
    # T·∫°o task ch·ªù tin nh·∫Øn - gi·∫£m t·ª´ 30 xu·ªëng c√≤n 10 gi√¢y
    wait_for_message_task = asyncio.create_task(
        bot.wait_for('message', timeout=10.0, check=check))
    tasks.append(wait_for_message_task)

    # T·∫°o task cho b·ªô ƒë·∫øm th·ªùi gian v√† g·ª£i √Ω
    async def countdown_and_hint():
        # Ch·ªù 4 gi√¢y ƒë·∫ßu ti√™n
        await asyncio.sleep(4)
        # C·∫≠p nh·∫≠t c√≤n 6 gi√¢y
        embed.set_field_at(0, name="Th·ªùi gian", value="6 gi√¢y", inline=True)
        await question_msg.edit(embed=embed)

        # Ch·ªù th√™m 3 gi√¢y
        await asyncio.sleep(3)
        # C·∫≠p nh·∫≠t c√≤n 3 gi√¢y v√† hi·ªÉn th·ªã g·ª£i √Ω
        embed.set_field_at(0, name="Th·ªùi gian", value="3 gi√¢y", inline=True)
        embed.add_field(name="üí° G·ª£i √Ω",
                        value=question_data["hint"],
                        inline=False)
        await question_msg.edit(embed=embed)

        # Ch·ªù 3 gi√¢y cu·ªëi
        await asyncio.sleep(3)

    countdown_task = asyncio.create_task(countdown_and_hint())
    tasks.append(countdown_task)

    try:
        # Ch·ªù task n√†o ho√†n th√†nh tr∆∞·ªõc (c√≥ c√¢u tr·∫£ l·ªùi ho·∫∑c h·∫øt th·ªùi gian)
        done, pending = await asyncio.wait(tasks,
                                           return_when=asyncio.FIRST_COMPLETED)

        # H·ªßy c√°c task ƒëang ch·ªù
        for task in pending:
            task.cancel()

        # N·∫øu nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn tr·∫£ l·ªùi
        if wait_for_message_task in done:
            response = wait_for_message_task.result()

            # Ki·ªÉm tra c√¢u tr·∫£ l·ªùi
            answer_correct = False
            for valid_answer in question_data["answer"]:
                if response.content.lower().replace(
                        " ", "") == valid_answer.replace(" ", ""):
                    answer_correct = True
                    break

            if answer_correct:
                winnings = bet_amount * 2
                currency[user_id] += winnings - bet_amount

                embed = discord.Embed(
                    title="‚úÖ CH√çNH X√ÅC!",
                    description=
                    f"Ch√∫c m·ª´ng {ctx.author.mention}! B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng!",
                    color=discord.Color.green())
                embed.add_field(name="Ti·ªÅn th∆∞·ªüng",
                                value=f"+{winnings} xu (x2)",
                                inline=True)
                embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i",
                                value=f"{currency[user_id]} xu",
                                inline=True)
            else:
                currency[user_id] -= bet_amount

                embed = discord.Embed(
                    title="‚ùå SAI R·ªíI!",
                    description=
                    f"R·∫•t ti·∫øc, {ctx.author.mention}! C√¢u tr·∫£ l·ªùi ƒë√∫ng l√†: {question_data['answer'][0]}",
                    color=discord.Color.red())
                embed.add_field(name="Thi·ªát h·∫°i",
                                value=f"-{bet_amount} xu",
                                inline=True)
                embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i",
                                value=f"{currency[user_id]} xu",
                                inline=True)

            await ctx.send(embed=embed)

    except asyncio.TimeoutError:
        # H·∫øt th·ªùi gian 10 gi√¢y m√† kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi
        currency[user_id] -= bet_amount
        embed = discord.Embed(
            title="‚è∞ H·∫æT GI·ªú!",
            description=f"{ctx.author.mention}, b·∫°n ƒë√£ kh√¥ng tr·∫£ l·ªùi k·ªãp th·ªùi!",
            color=discord.Color.red())
        embed.add_field(name="C√¢u tr·∫£ l·ªùi ƒë√∫ng",
                        value=question_data["answer"][0],
                        inline=True)
        embed.add_field(name="Thi·ªát h·∫°i",
                        value=f"-{bet_amount} xu",
                        inline=True)
        embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i",
                        value=f"{currency[user_id]} xu",
                        inline=True)
        await ctx.send(embed=embed)


@bot.command(name='baucua', aliases=['bc'])
@check_channel()
@check_game_enabled('baucua')
async def bau_cua(ctx, *args):
    """Tr√≤ ch∆°i B·∫ßu Cua T√¥m C√° v·ªõi kh·∫£ nƒÉng ƒë·∫∑t nhi·ªÅu √¥ c√πng l√∫c"""
    # ƒê·ªãnh nghƒ©a c√°c m·∫∑t x√∫c x·∫Øc v√† emoji
    symbols = {
        "b·∫ßu": "üçê", "bau": "üçê",
        "cua": "ü¶Ä",
        "t√¥m": "ü¶ê", "tom": "ü¶ê", 
        "c√°": "üêü", "ca": "üêü",
        "g√†": "üêì", "ga": "üêì",
        "nai": "ü¶å"
    }

    symbol_names = {
        "üçê": "B·∫ßu",
        "ü¶Ä": "Cua",
        "ü¶ê": "T√¥m",
        "üêü": "C√°",
        "üêì": "G√†",
        "ü¶å": "Nai"
    }

    # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n·∫øu kh√¥ng c√≥ ƒë·ªß th√¥ng tin
    if not args:
        embed = discord.Embed(
            title="üé≤ B·∫ßu Cua T√¥m C√° - H∆∞·ªõng D·∫´n",
            description="ƒê·∫∑t c∆∞·ª£c v√†o m·ªôt ho·∫∑c nhi·ªÅu m·∫∑t x√∫c x·∫Øc v√† th·∫Øng xu n·∫øu ch·ªçn ƒë√∫ng!",
            color=discord.Color.gold()
        )

        embed.add_field(
            name="üìã C√°ch ch∆°i",
            value=(
                "1. Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu m·∫∑t v√† s·ªë xu c∆∞·ª£c:\n"
                "2. M·∫∑t h·ª£p l·ªá: `bau`, `cua`, `tom`, `ca`, `ga`, `nai`\n"
                "3. V√≠ d·ª•: `.baucua bau 50 cua 100` ho·∫∑c `.bc ga all`\n"
                "4. B·∫°n c√≥ th·ªÉ ƒë·∫∑t nhi·ªÅu √¥ c√πng l√∫c!"
            ),
            inline=False
        )

        embed.add_field(
            name="üí∞ Th∆∞·ªüng",
            value=(
                "- Cho m·ªói √¥ ƒë·∫∑t c∆∞·ª£c:\n"
                "- Xu·∫•t hi·ªán 1 l·∫ßn: x1 ti·ªÅn c∆∞·ª£c\n"
                "- Xu·∫•t hi·ªán 2 l·∫ßn: x2 ti·ªÅn c∆∞·ª£c\n"
                "- Xu·∫•t hi·ªán 3 l·∫ßn (jackpot): x3 ti·ªÅn c∆∞·ª£c"
            ),
            inline=False
        )

        symbol_display = " ".join(list(dict.fromkeys(symbols.values())))
        embed.add_field(
            name="üéØ C√°c m·∫∑t x√∫c x·∫Øc",
            value=symbol_display,
            inline=False
        )

        await ctx.send(embed=embed)
        return

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c nhi·ªÅu √¥
    user_id = ctx.author.id
    bets = {}  # Dictionary ƒë·ªÉ l∆∞u c∆∞·ª£c cho m·ªói bi·ªÉu t∆∞·ª£ng: {emoji: bet_amount}
    total_bet = 0

    # Ph√¢n t√≠ch c√°c l·ª±a ch·ªçn c∆∞·ª£c
    i = 0
    while i < len(args):
        choice = args[i].lower()

        # Ki·ªÉm tra xem choice c√≥ h·ª£p l·ªá kh√¥ng
        if choice not in symbols:
            embed = discord.Embed(
                title="‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá",
                description=f"'{choice}' kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn: `bau`, `cua`, `tom`, `ca`, `ga`, `nai`.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return

        # L·∫•y bet amount cho choice n√†y
        if i + 1 >= len(args):
            embed = discord.Embed(
                title="‚ùå Thi·∫øu s·ªë ti·ªÅn c∆∞·ª£c",
                description=f"Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c sau '{choice}'.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return

        bet_str = args[i + 1]

        # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
        if bet_str.lower() == "all":
            # N·∫øu ƒë√£ c√≥ c∆∞·ª£c kh√°c tr∆∞·ªõc ƒë√≥, kh√¥ng cho ph√©p d√πng "all"
            if bets:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng h·ª£p l·ªá",
                    description="'all' ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng cho m·ªôt √¥ c∆∞·ª£c duy nh·∫•t.",
                    color=discord.Color.red()
                )
                await ctx.send(embed=embed)
                return

            bet_amount = currency[user_id]
        else:
            try:
                bet_amount = int(bet_str)
            except ValueError:
                embed = discord.Embed(
                    title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
                    description=f"'{bet_str}' kh√¥ng ph·∫£i l√† s·ªë ti·ªÅn h·ª£p l·ªá.",
                    color=discord.Color.red()
                )
                await ctx.send(embed=embed)
                return

        # Ki·ªÉm tra s·ªë ti·ªÅn c∆∞·ª£c
        if bet_amount <= 0:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return

        # L·∫•y emoji cho l·ª±a ch·ªçn
        choice_emoji = symbols[choice]

        # C·ªông d·ªìn ti·ªÅn c∆∞·ª£c cho symbol n√†y (c√≥ th·ªÉ ƒë·∫∑t c∆∞·ª£c nhi·ªÅu l·∫ßn cho c√πng m·ªôt symbol)
        if choice_emoji in bets:
            bets[choice_emoji] += bet_amount
        else:
            bets[choice_emoji] = bet_amount

        total_bet += bet_amount
        i += 2  # Chuy·ªÉn ƒë·∫øn c·∫∑p choice-bet ti·∫øp theo

    # Ki·ªÉm tra t·ªïng ti·ªÅn c∆∞·ª£c
    if total_bet <= 0:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="T·ªïng s·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return

    if currency[user_id] < total_bet:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß xu",
            description=f"B·∫°n c·∫ßn {total_bet} xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c, nh∆∞ng ch·ªâ c√≥ {currency[user_id]} xu.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return

    # Hi·ªáu ·ª©ng kh·ªüi ƒë·∫ßu
    loading_embed = discord.Embed(
        title="üé≤ ƒêANG L·∫ÆC B·∫¶U CUA",
        description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c t·ªïng **{total_bet} xu**",
        color=discord.Color.blue()
    )

    # Hi·ªÉn th·ªã c√°c c∆∞·ª£c ƒë√£ ƒë·∫∑t
    bet_details = ""
    for emoji, amount in bets.items():
        bet_details += f"{emoji} **{symbol_names[emoji]}**: {amount} xu\n"

    loading_embed.add_field(
        name="üí∞ Chi ti·∫øt c∆∞·ª£c", 
        value=bet_details,
        inline=False
    )
    loading_embed.set_footer(text="ƒêang l·∫Øc x√∫c x·∫Øc...")
    loading_msg = await ctx.send(embed=loading_embed)

    # T·∫°o list c√°c emoji
    all_emojis = list(symbol_names.keys())

    # Animation giai ƒëo·∫°n 1: L·∫Øc nhanh v·ªõi nhi·ªÅu emoji x√°o tr·ªôn
    shaking_colors = [
        discord.Color.blue(), 
        discord.Color.purple(), 
        discord.Color.teal(), 
        discord.Color.orange(), 
        discord.Color.gold()
    ]

    shake_titles = [
        "üé≤ ƒêANG L·∫ÆC B·∫¶U CUA",
        "üé≤ X√öC X·∫ÆC ƒêANG QUAY",
        "üé≤ ƒêANG X√ÅO TR·ªòN",
        "üé≤ B·∫¶U CUA ƒêANG L·∫ÆC",
        "üé≤ ƒêANG ƒê·ªäNH K·∫æT QU·∫¢"
    ]

    # Animation l·∫Øc m·∫°nh
    for i in range(5):
        # T·∫°o hi·ªáu ·ª©ng x√°o tr·ªôn 
        dice1 = random.sample(all_emojis, k=len(all_emojis))
        dice2 = random.sample(all_emojis, k=len(all_emojis))
        dice3 = random.sample(all_emojis, k=len(all_emojis))

        # Hi·ªÉn th·ªã c√°c x√∫c x·∫Øc ƒëang x√°o tr·ªôn nhanh
        shake_display = (
            f"**X√∫c x·∫Øc 1:** {' '.join(dice1[:3])}...\n"
            f"**X√∫c x·∫Øc 2:** {' '.join(dice2[:3])}...\n"
            f"**X√∫c x·∫Øc 3:** {' '.join(dice3[:3])}...\n"
        )

        title = shake_titles[i % len(shake_titles)]
        color = shaking_colors[i % len(shaking_colors)]
        dots = "." * (i+1)

        shaking_embed = discord.Embed(
            title=f"{title} {dots}",
            description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c t·ªïng **{total_bet} xu**",
            color=color
        )
        shaking_embed.add_field(
            name="üé≤ ƒêang l·∫Øc x√∫c x·∫Øc",
            value=shake_display,
            inline=False
        )

        # Gi·ªØ nguy√™n chi ti·∫øt c∆∞·ª£c
        shaking_embed.add_field(
            name="üí∞ Chi ti·∫øt c∆∞·ª£c", 
            value=bet_details,
            inline=False
        )

        shaking_embed.set_footer(text=f"ƒêang l·∫Øc{dots}")

        await loading_msg.edit(embed=shaking_embed)
        await asyncio.sleep(0.6)

    # Ch·∫≠m d·∫ßn v√† hi·ªÉn th·ªã t·ª´ng vi√™n x√∫c x·∫Øc
    await asyncio.sleep(0.5)

    # Ch·ªçn k·∫øt qu·∫£ ng·∫´u nhi√™n cho 3 vi√™n x√∫c x·∫Øc
    result_dice = [random.choice(all_emojis) for _ in range(3)]

    # Animation hi·ªÉn th·ªã t·ª´ng vi√™n x√∫c x·∫Øc
    for i in range(3):
        dice_embed = discord.Embed(
            title=f"üé≤ X√öC X·∫ÆC ƒêANG D·ª™NG L·∫†I",
            description=f"{ctx.author.mention} ƒë√£ ƒë·∫∑t c∆∞·ª£c t·ªïng **{total_bet} xu**",
            color=discord.Color.gold()
        )

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ng vi√™n m·ªôt
        dice_result = ""
        for j in range(i + 1):
            dice_result += f"**X√∫c x·∫Øc {j+1}:** {result_dice[j]} **{symbol_names[result_dice[j]]}**\n"

        for j in range(i + 1, 3):
            dice_result += f"**X√∫c x·∫Øc {j+1}:** ‚ùì\n"

        dice_embed.add_field(
            name="üéØ K·∫øt qu·∫£ ƒëang hi·ªán",
            value=dice_result,
            inline=False
        )

        # Gi·ªØ nguy√™n chi ti·∫øt c∆∞·ª£c
        dice_embed.add_field(
            name="üí∞ Chi ti·∫øt c∆∞·ª£c", 
            value=bet_details,
            inline=False
        )

        dice_embed.set_footer(text=f"ƒêang hi·ªán k·∫øt qu·∫£... {i+1}/3")
        await loading_msg.edit(embed=dice_embed)
        await asyncio.sleep(0.8)

    # ƒê·∫øm k·∫øt qu·∫£ cho t·ª´ng bi·ªÉu t∆∞·ª£ng
    symbol_counts = {}
    for emoji in all_emojis:
        symbol_counts[emoji] = result_dice.count(emoji)

    # T√≠nh to√°n th·∫Øng/thua cho m·ªói c∆∞·ª£c
    total_winnings = 0
    bet_results = {}

    for emoji, bet_amount in bets.items():
        matches = symbol_counts[emoji]
        if matches > 0:
            winnings = bet_amount * matches
            bet_results[emoji] = {
                "matches": matches,
                "winnings": winnings,
                "result": "win"
            }
            total_winnings += winnings
        else:
            bet_results[emoji] = {
                "matches": 0,
                "winnings": -bet_amount,
                "result": "lose"
            }

    # T√≠nh t·ªïng th·∫Øng/thua
    net_result = total_winnings - total_bet

    # C·∫≠p nh·∫≠t s·ªë xu c·ªßa ng∆∞·ªùi ch∆°i
    currency[user_id] += net_result

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
    final_embed = discord.Embed(
        title="üé≤ K·∫æT QU·∫¢ B·∫¶U CUA üé≤",
        description="",
        color=discord.Color.green() if net_result >= 0 else discord.Color.red()
    )

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ x√∫c x·∫Øc
    dice_result = ""
    for j in range(3):
        dice_result += f"**X√∫c x·∫Øc {j+1}:** {result_dice[j]} **{symbol_names[result_dice[j]]}**\n"

    final_embed.add_field(
        name="üéØ K·∫øt qu·∫£ x√∫c x·∫Øc",
        value=dice_result,
        inline=False
    )

    # Hi·ªÉn th·ªã chi ti·∫øt th·∫Øng/thua cho m·ªói c∆∞·ª£c
    results_details = ""
    for emoji, result_info in bet_results.items():
        if result_info["result"] == "win":
            if result_info["matches"] == 1:
                results_details += f"{emoji} **{symbol_names[emoji]}**: +{result_info['winnings']} xu (x1)\n"
            elif result_info["matches"] == 2:
                results_details += f"{emoji} **{symbol_names[emoji]}**: +{result_info['winnings']} xu (x2) üåü\n"
            else: # 3 matches
                results_details += f"{emoji} **{symbol_names[emoji]}**: +{result_info['winnings']} xu (x3) üíé\n"
        else:
            results_details += f"{emoji} **{symbol_names[emoji]}**: -{bets[emoji]} xu ‚ùå\n"

    final_embed.add_field(
        name="üí∞ Chi ti·∫øt th·∫Øng/thua",
        value=results_details,
        inline=False
    )

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ªïng
    if net_result > 0:
        final_embed.add_field(
            name="üèÜ T·ªîNG K·∫æT",
            value=f"Th·∫Øng: +{net_result} xu",
            inline=True
        )
        final_embed.description = f"üéâ {ctx.author.mention} ƒë√£ th·∫Øng **{net_result} xu**!"
    elif net_result == 0:
        final_embed.add_field(
            name="üèÜ T·ªîNG K·∫æT",
            value=f"H√≤a: ¬±0 xu",
            inline=True
        )
        final_embed.description = f"ü§ù {ctx.author.mention} h√≤a v·ªën!"
    else:
        final_embed.add_field(
            name="üèÜ T·ªîNG K·∫æT",
            value=f"Thua: {net_result} xu",
            inline=True
        )
        final_embed.description = f"üò¢ {ctx.author.mention} ƒë√£ thua **{-net_result} xu**!"

    final_embed.add_field(
        name="üíº S·ªë d∆∞ hi·ªán t·∫°i",
        value=f"{currency[user_id]} xu",
        inline=True
    )

    # Footer t√πy theo k·∫øt qu·∫£
    if net_result > 0:
        final_embed.set_footer(text="üçÄ H√¥m nay l√† ng√†y may m·∫Øn c·ªßa b·∫°n!")
    elif net_result == 0:
        final_embed.set_footer(text="ü§î H√≤a v·ªën! Th·ª≠ l·∫°i v·∫≠n may c·ªßa b·∫°n!")
    else:
        final_embed.set_footer(text="üò¢ Th·ª≠ l·∫°i v·∫≠n may c·ªßa b·∫°n nh√©!")

    await loading_msg.edit(embed=final_embed)


@bot.command(name='kbbpvp')
@check_channel()
@check_game_enabled('kbbpvp')
async def keo_bua_bao_pvp(ctx, opponent: discord.Member = None, bet: int = None):
    """Ch∆°i K√©o B√∫a Bao PvP v·ªõi ng∆∞·ªùi ch∆°i kh√°c v·ªõi hi·ªáu ·ª©ng ƒë·∫πp m·∫Øt"""
    if opponent is None or bet is None:
        embed = discord.Embed(
            title="‚öîÔ∏è K√©o B√∫a Bao PvP - H∆∞·ªõng D·∫´n",
            description=
            "Th√°ch ƒë·∫•u ng∆∞·ªùi ch∆°i kh√°c v·ªõi hi·ªáu ·ª©ng ƒë·∫πp m·∫Øt.\nV√≠ d·ª•: `.kbbpvp @t√™n_ng∆∞·ªùi_ch∆°i 50`",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°ch ch∆°i",
            value=
            "- Tag ng∆∞·ªùi ch∆°i mu·ªën th√°ch ƒë·∫•u\n- ƒê·∫∑t s·ªë xu mu·ªën c∆∞·ª£c\n- C·∫£ hai b√™n ch·ªçn k√©o/b√∫a/bao qua n√∫t b·∫•m\n- Ng∆∞·ªùi th·∫Øng nh·∫≠n to√†n b·ªô ti·ªÅn c∆∞·ª£c\n- Ng∆∞·ªùi th·∫Øng c√≥ th·ªÉ timeout ng∆∞·ªùi thua!",
            inline=False)
        embed.set_footer(text="K·∫ªo B√∫a Bao - Game th√°ch ƒë·∫•u h·∫•p d·∫´n!")
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id
    target_id = opponent.id

    # Ki·ªÉm tra kh√¥ng th·ªÉ ch∆°i v·ªõi ch√≠nh m√¨nh
    if user_id == target_id:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n kh√¥ng th·ªÉ th√°ch ƒë·∫•u ch√≠nh m√¨nh!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra kh√¥ng th·ªÉ ch∆°i v·ªõi bot
    if opponent.bot:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n kh√¥ng th·ªÉ th√°ch ƒë·∫•u bot! H√£y th√°ch ƒë·∫•u ng∆∞·ªùi ch∆°i kh√°c.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra s·ªë ti·ªÅn c∆∞·ª£c
    if bet <= 0:
        embed = discord.Embed(title="‚ùå L·ªói",
                              description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra s·ªë d∆∞ c·ªßa c·∫£ hai ng∆∞·ªùi ch∆°i
    if currency[user_id] < bet:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß xu",
            description=f"{ctx.author.mention} kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[target_id] < bet:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng ƒë·ªß xu",
            description=
            f"{opponent.mention} kh√¥ng ƒë·ªß xu ƒë·ªÉ ch·∫•p nh·∫≠n th√°ch ƒë·∫•u!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # T·∫°o view cho ng∆∞·ªùi th√°ch ƒë·∫•u
    class KBBView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=60)
            self.choices = {}
            self.choice_emojis = {"keo": "‚úÇÔ∏è", "bua": "ü™®", "bao": "üìÑ"}
            self.choice_names = {"keo": "K√©o", "bua": "B√∫a", "bao": "Bao"}
            self.result_shown = False

        @discord.ui.button(label="K√©o",
                          style=discord.ButtonStyle.primary,
                          emoji="‚úÇÔ∏è",
                          custom_id="keo")
        async def keo(self, interaction: discord.Interaction,
                      button: discord.ui.Button):
            await self.make_choice(interaction, "keo")

        @discord.ui.button(label="B√∫a",
                          style=discord.ButtonStyle.primary,
                          emoji="ü™®",
                          custom_id="bua")
        async def bua(self, interaction: discord.Interaction,
                      button: discord.ui.Button):
            await self.make_choice(interaction, "bua")

        @discord.ui.button(label="Bao",
                          style=discord.ButtonStyle.primary,
                          emoji="üìÑ",
                          custom_id="bao")
        async def bao(self, interaction: discord.Interaction,
                      button: discord.ui.Button):
            await self.make_choice(interaction, "bao")

        async def make_choice(self, interaction: discord.Interaction,
                             choice: str):
            player_id = interaction.user.id

            # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† ng∆∞·ªùi ch∆°i kh√¥ng
            if player_id not in [user_id, target_id]:
                await interaction.response.send_message(
                    "B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ch∆°i trong tr·∫≠n n√†y!",
                    ephemeral=True)
                return

            # Ki·ªÉm tra n·∫øu ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn r·ªìi
            if player_id in self.choices:
                prev_choice = self.choices[player_id]
                await interaction.response.send_message(
                    f"B·∫°n ƒë√£ thay ƒë·ªïi l·ª±a ch·ªçn t·ª´ {self.choice_names[prev_choice]} sang {self.choice_names[choice]}!",
                    ephemeral=True)
            else:
                await interaction.response.send_message(
                    f"B·∫°n ƒë√£ ch·ªçn {self.choice_names[choice]}!",
                    ephemeral=True)

            # L∆∞u l·ª±a ch·ªçn
            self.choices[player_id] = choice

            # Ki·ªÉm tra xem c·∫£ hai ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn ch∆∞a
            if len(self.choices) == 2 and not self.result_shown:
                self.result_shown = True
                self.stop()

                # V√¥ hi·ªáu h√≥a c√°c n√∫t
                for child in self.children:
                    child.disabled = True

    # T·∫°o th√¥ng b√°o th√°ch ƒë·∫•u
    challenge_embed = discord.Embed(
        title="‚öîÔ∏è TH√ÅCH ƒê·∫§U K√âO B√öA BAO!",
        description=
        f"{ctx.author.mention} th√°ch ƒë·∫•u {opponent.mention} v·ªõi **{bet} xu**!",
        color=discord.Color.gold())

    challenge_embed.add_field(
        name="üéÆ C√°ch ch∆°i",
        value="C·∫£ hai ng∆∞·ªùi ch∆°i h√£y b·∫•m n√∫t ƒë·ªÉ ch·ªçn K√©o, B√∫a ho·∫∑c Bao.\nNg∆∞·ªùi th·∫Øng s·∫Ω nh·∫≠n to√†n b·ªô ti·ªÅn c∆∞·ª£c!",
        inline=False
    )

    challenge_embed.add_field(
        name="‚ö†Ô∏è L∆∞u √Ω",
        value="- B·∫°n c√≥ 60 gi√¢y ƒë·ªÉ ch·ªçn\n- Ng∆∞·ªùi th·∫Øng c√≥ th·ªÉ timeout ng∆∞·ªùi thua\n- L·ª±a ch·ªçn c·ªßa b·∫°n ƒë∆∞·ª£c gi·ªØ b√≠ m·∫≠t",
        inline=False
    )

    challenge_embed.set_footer(text="H√£y ch·ªçn m·ªôt l·ª±a ch·ªçn b√™n d∆∞·ªõi")

    # Th√™m hi·ªáu ·ª©ng animation v·ªõi n·ªÅn v√† bi·ªÉu t∆∞·ª£ng
    challenge_graphic = "```\n" + \
                       "    ‚ö°‚ö°‚ö°    \n" + \
                       "  ‚öîÔ∏è VS ‚öîÔ∏è  \n" + \
                       "‚úÇÔ∏è  ü™®  üìÑ\n" + \
                       "  ‚ö° VS ‚ö°  \n" + \
                       "    ‚ö°‚ö°‚ö°    \n" + \
                       "```"
    challenge_embed.add_field(
        name="üèÜ Tr·∫≠n ƒë·∫•u",
        value=challenge_graphic,
        inline=False
    )

    kbb_view = KBBView()
    message = await ctx.send(embed=challenge_embed, view=kbb_view)

    # B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c v·ªõi hi·ªáu ·ª©ng
    countdown_seconds = 60
    countdown_interval = 10  # C·∫≠p nh·∫≠t m·ªói 10 gi√¢y

    # Animation ƒë·∫øm ng∆∞·ª£c khi ƒëang ch·ªù ng∆∞·ªùi ch∆°i
    for remaining in range(countdown_seconds, 0, -countdown_interval):
        if kbb_view.is_finished():
            break

        if remaining <= 30:  # Ch·ªâ hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c khi c√≤n 30 gi√¢y
            countdown_embed = discord.Embed(
                title="‚öîÔ∏è TH√ÅCH ƒê·∫§U K√âO B√öA BAO!",
                description=f"{ctx.author.mention} th√°ch ƒë·∫•u {opponent.mention} v·ªõi **{bet} xu**!",
                color=discord.Color.gold())

            countdown_embed.add_field(
                name="‚è±Ô∏è TH·ªúI GIAN C√íN L·∫†I",
                value=f"**{remaining} gi√¢y**",
                inline=False
            )

            # Hi·ªÉn th·ªã ai ƒë√£ ch·ªçn, ai ch∆∞a ch·ªçn
            player1_status = "‚úÖ ƒê√£ ch·ªçn" if user_id in kbb_view.choices else "‚è≥ Ch∆∞a ch·ªçn"
            player2_status = "‚úÖ ƒê√£ ch·ªçn" if target_id in kbb_view.choices else "‚è≥ Ch∆∞a ch·ªçn"

            countdown_embed.add_field(
                name="üë§ Tr·∫°ng th√°i ng∆∞·ªùi ch∆°i",
                value=f"{ctx.author.mention}: {player1_status}\n{opponent.mention}: {player2_status}",
                inline=False
            )

            # Nh·∫Øc nh·ªü
            countdown_embed.add_field(
                name="üí° Nh·∫Øc nh·ªü", 
                value="H√£y b·∫•m n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ch·ªçn K√©o, B√∫a ho·∫∑c Bao!",
                inline=False
            )

            await message.edit(embed=countdown_embed, view=kbb_view)

        await asyncio.sleep(countdown_interval)

    # Ch·ªù view ho√†n th√†nh ho·∫∑c timeout
    await kbb_view.wait()

    # Ki·ªÉm tra k·∫øt qu·∫£
    if len(kbb_view.choices) < 2:
        # C√≥ ng∆∞·ªùi kh√¥ng ch·ªçn trong th·ªùi gian quy ƒë·ªãnh
        timeout_embed = discord.Embed(
            title="‚è±Ô∏è H·∫æT TH·ªúI GIAN",
            description="M·ªôt ho·∫∑c c·∫£ hai ng∆∞·ªùi ch∆°i kh√¥ng k·ªãp ch·ªçn trong th·ªùi gian quy ƒë·ªãnh!",
            color=discord.Color.red())

        # X√°c ƒë·ªãnh ai ch∆∞a ch·ªçn
        if user_id not in kbb_view.choices and target_id not in kbb_view.choices:
            timeout_embed.add_field(
                name="‚ùå C·∫£ hai ng∆∞·ªùi ch∆°i ƒë·ªÅu ch∆∞a ch·ªçn",
                value="Th√°ch ƒë·∫•u b·ªã h·ªßy!",
                inline=False
            )
        elif user_id not in kbb_view.choices:
            timeout_embed.add_field(
                name="‚ùå Ng∆∞·ªùi th√°ch ƒë·∫•u kh√¥ng ch·ªçn",
                value=f"{ctx.author.mention} ƒë√£ kh√¥ng ch·ªçn k·ªãp th·ªùi!",
                inline=False
            )
        else:
            timeout_embed.add_field(
                name="‚ùå Ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u kh√¥ng ch·ªçn",
                value=f"{opponent.mention} ƒë√£ kh√¥ng ch·ªçn k·ªãp th·ªùi!",
                inline=False
            )

        await message.edit(embed=timeout_embed, view=None)
        return

    # X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng
    choice1 = kbb_view.choices[user_id]
    choice2 = kbb_view.choices[target_id]

    # T·∫°o hi·ªáu ·ª©ng ƒë·∫øm ng∆∞·ª£c tr∆∞·ªõc khi c√¥ng b·ªë k·∫øt qu·∫£
    for countdown in range(3, 0, -1):
        countdown_embed = discord.Embed(
            title="üëÄ C√îNG B·ªê K·∫æT QU·∫¢",
            description=f"K·∫øt qu·∫£ s·∫Ω hi·ªán ra sau {countdown}...",
            color=discord.Color.gold())

        # Hi·ªáu ·ª©ng t·∫°o k·ªãch t√≠nh
        if countdown == 3:
            countdown_embed.add_field(
                name="üîÑ ƒêang t√≠nh to√°n",
                value="```\nƒêang ph√¢n t√≠ch l·ª±a ch·ªçn...\n```",
                inline=False
            )
        elif countdown == 2:
            countdown_embed.add_field(
                name="üîÑ K·∫øt qu·∫£ s·∫µn s√†ng",
                value="```\nS·∫Øp hi·ªán k·∫øt qu·∫£...\n```",
                inline=False
            )
        else:
            countdown_embed.add_field(
                name="üîÑ Chu·∫©n b·ªã!",
                value="```\nK·∫øt qu·∫£ ngay sau ƒë√¢y...\n```",
                inline=False
            )

        await message.edit(embed=countdown_embed, view=kbb_view)
        await asyncio.sleep(0.8)

    # Hi·ªÉn th·ªã l·ª±a ch·ªçn c·ªßa c·∫£ hai ng∆∞·ªùi ch∆°i
    reveal_embed = discord.Embed(
        title="üéÆ L·ª∞A CH·ªåN ƒê√É ƒê∆Ø·ª¢C TI·∫æT L·ªò!",
        description=f"C·∫£ hai ng∆∞·ªùi ch∆°i ƒë√£ ho√†n th√†nh l∆∞·ª£t ch·ªçn!",
        color=discord.Color.blue())

    # Animation hi·ªÉn th·ªã l·ª±a ch·ªçn
    choice1_emoji = kbb_view.choice_emojis[choice1]
    choice1_name = kbb_view.choice_names[choice1]
    choice2_emoji = kbb_view.choice_emojis[choice2]
    choice2_name = kbb_view.choice_names[choice2]

    reveal_embed.add_field(
        name=f"{ctx.author.display_name} ch·ªçn",
        value=f"**{choice1_name}** {choice1_emoji}",
        inline=True
    )

    reveal_embed.add_field(
        name="VS",
        value="‚öîÔ∏è",
        inline=True
    )

    reveal_embed.add_field(
        name=f"{opponent.display_name} ch·ªçn",
        value=f"**{choice2_name}** {choice2_emoji}",
        inline=True
    )

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ l·ª±a ch·ªçn
    battle_graphic = "```\n" + \
                    f"  {ctx.author.display_name}    VS    {opponent.display_name}\n" + \
                    f"     {choice1_emoji}         {choice2_emoji}\n" + \
                    f"    {choice1_name}       {choice2_name}\n" + \
                    "```"
    reveal_embed.add_field(
        name="‚öîÔ∏è TR·∫¨N ƒê·∫§U",
        value=battle_graphic,
        inline=False
    )

    await message.edit(embed=reveal_embed, view=kbb_view)
    await asyncio.sleep(2)

    # X·ª≠ l√Ω k·∫øt qu·∫£
    if choice1 == choice2:
        # H√≤a
        result_embed = discord.Embed(
            title="ü§ù H√íA CU·ªòC!",
            description=f"C·∫£ hai ng∆∞·ªùi ch∆°i ƒë·ªÅu ch·ªçn **{kbb_view.choice_names[choice1]}**!",
            color=discord.Color.blue())

        result_embed.add_field(
            name="üí∞ K·∫øt qu·∫£ ti·ªÅn c∆∞·ª£c",
            value="C·∫£ hai ng∆∞·ªùi ch∆°i ƒë·ªÅu ƒë∆∞·ª£c ho√†n l·∫°i ti·ªÅn c∆∞·ª£c.",
            inline=False
        )

        # Animation hi·ªáu ·ª©ng h√≤a
        tie_graphic = "```\n" + \
                     "     üîÑ  üîÄ  üîÑ     \n" + \
                     "  ü§ù  H√íA CU·ªòC  ü§ù  \n" + \
                     f" {choice1_emoji} {ctx.author.name} VS {opponent.name} {choice2_emoji} \n" + \
                     "     üîÑ  üîÄ  üîÑ     \n" + \
                     "```"
        result_embed.add_field(
            name="üìä Chi ti·∫øt",
            value=tie_graphic,
            inline=False
        )

        await message.edit(embed=result_embed, view=kbb_view)

    else:
        # X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng
        player1_wins = ((choice1 == "keo" and choice2 == "bao")
                        or (choice1 == "bua" and choice2 == "keo")
                        or (choice1 == "bao" and choice2 == "bua"))

        if player1_wins:
            winner = ctx.author
            loser = opponent
            winner_id = user_id
            loser_id = target_id
            winner_choice = choice1
            loser_choice = choice2
        else:
            winner = opponent
            loser = ctx.author
            winner_id = target_id
            loser_id = user_id
            winner_choice = choice2
            loser_choice = choice1

        # Hi·ªáu ·ª©ng c√¥ng b·ªë ng∆∞·ªùi th·∫Øng
        for i in range(3):
            win_color = discord.Color.green() if i % 2 == 0 else discord.Color.gold()

            win_announce = discord.Embed(
                title=f"{'üéâ CHI·∫æN TH·∫ÆNG! üéâ' if i % 2 == 0 else 'üèÜ NG∆Ø·ªúI TH·∫ÆNG CU·ªòC üèÜ'}",
                description=f"**{winner.display_name}** ƒë√£ th·∫Øng!",
                color=win_color)

            win_graphic = "```\n" + \
                         f"    {'‚ú®' * (i+1)}    \n" + \
                         f"  üèÜ {winner.display_name} üèÜ  \n" + \
                         f" {kbb_view.choice_emojis[winner_choice]} CHI·∫æN TH·∫ÆNG! {kbb_view.choice_emojis[winner_choice]} \n" + \
                         f"    {'‚ú®' * (i+1)}    \n" + \
                         "```"
            win_announce.add_field(
                name="üéñÔ∏è Ng∆∞·ªùi chi·∫øn th·∫Øng",
                value=win_graphic,
                inline=False
            )

            await message.edit(embed=win_announce, view=kbb_view)
            await asyncio.sleep(0.8)

        # C·∫≠p nh·∫≠t xu
        currency[winner_id] += bet
        currency[loser_id] -= bet

        # T·∫°o k·∫øt qu·∫£ cu·ªëi c√πng
        result_embed = discord.Embed(
            title="üèÜ K·∫æT QU·∫¢ CU·ªêI C√ôNG üèÜ",
            description=f"**{winner.display_name}** ƒë√£ th·∫Øng **{loser.display_name}**!",
            color=discord.Color.green())

        # Hi·ªÉn th·ªã gi·∫£i th√≠ch l√Ω do th·∫Øng
        win_explanation = ""
        if winner_choice == "keo" and loser_choice == "bao":
            win_explanation = "K√©o ‚úÇÔ∏è c·∫Øt Bao üìÑ"
        elif winner_choice == "bua" and loser_choice == "keo":
            win_explanation = "B√∫a ü™® ƒë·∫≠p K√©o ‚úÇÔ∏è"
        elif winner_choice == "bao" and loser_choice == "bua":
            win_explanation = "Bao üìÑ b·ªçc B√∫a ü™®"

        result_embed.add_field(
            name="üéØ L√Ω do th·∫Øng",
            value=win_explanation,
            inline=False
        )

        # Hi·ªÉn th·ªã l·ª±a ch·ªçn chi ti·∫øt
        result_embed.add_field(
            name=f"{winner.display_name} (Th·∫Øng)",
            value=f"**{kbb_view.choice_names[winner_choice]}** {kbb_view.choice_emojis[winner_choice]}",
            inline=True
        )

        result_embed.add_field(
            name=f"{loser.display_name} (Thua)",
            value=f"**{kbb_view.choice_names[loser_choice]}** {kbb_view.choice_emojis[loser_choice]}",
            inline=True
        )

        # Hi·ªÉn th·ªã ti·ªÅn th∆∞·ªüng
        result_embed.add_field(
            name="üí∞ Ph·∫ßn th∆∞·ªüng",
            value=f"**{winner.mention}** ƒë√£ th·∫Øng v√† nh·∫≠n ƒë∆∞·ª£c **{bet*2} xu**!",
            inline=False
        )

        # Hi·ªÉn th·ªã s·ªë d∆∞ m·ªõi
        result_embed.add_field(
            name=f"üíº S·ªë d∆∞ c·ªßa {winner.display_name}",
            value=f"**{currency[winner_id]} xu**",
            inline=True
        )

        result_embed.add_field(
            name=f"üíº S·ªë d∆∞ c·ªßa {loser.display_name}",
            value=f"**{currency[loser_id]} xu**",
            inline=True
        )

        # Th√™m n√∫t timeout cho ng∆∞·ªùi th·∫Øng
        timeout_view = discord.ui.View(timeout=60)
        timeout_used = [False]  # S·ª≠ d·ª•ng list ƒë·ªÉ c√≥ th·ªÉ thay ƒë·ªïi gi√° tr·ªã trong callback

        # Th√™m footer nh·∫Øc nh·ªü v·ªÅ quy·ªÅn timeout
        result_embed.set_footer(text=f"Ng∆∞·ªùi th·∫Øng c√≥ th·ªÉ timeout ng∆∞·ªùi thua trong 1 ph√∫t")

        for duration in [1, 3, 5]:  # C√°c t√πy ch·ªçn timeout 1, 3, 5 ph√∫t
            button = discord.ui.Button(
                label=f"Timeout {duration} ph√∫t",
                style=discord.ButtonStyle.danger,
                custom_id=f"timeout_{duration}"
            )

            async def timeout_callback(interaction: discord.Interaction, duration=duration):
                if interaction.user.id != winner_id:
                    await interaction.response.send_message(
                        "Ch·ªâ ng∆∞·ªùi th·∫Øng m·ªõi c√≥ quy·ªÅn timeout ƒë·ªëi th·ªß!",
                        ephemeral=True
                    )
                    return

                # Ki·ªÉm tra xem timeout ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ch∆∞a
                if timeout_used[0]:
                    await interaction.response.send_message(
                        "‚ùå B·∫°n ƒë√£ s·ª≠ d·ª•ng quy·ªÅn timeout r·ªìi!",
                        ephemeral=True
                    )
                    return

                # ƒê√°nh d·∫•u timeout ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
                timeout_used[0] = True

                try:
                    # V√¥ hi·ªáu h√≥a t·∫•t c·∫£ c√°c n√∫t sau khi s·ª≠ d·ª•ng
                    for child in timeout_view.children:
                        child.disabled = True
                    await interaction.response.edit_message(view=timeout_view)

                    # √Åp d·ª•ng timeout
                    timeout_until = discord.utils.utcnow() + timedelta(minutes=duration)
                    await loser.timeout(
                        timeout_until,
                        reason=f"Thua KBB PvP v·ªõi {winner.display_name}"
                    )

                    # G·ª≠i th√¥ng b√°o x√°c nh·∫≠n
                    timeout_embed = discord.Embed(
                        title="‚è∞ TIMEOUT TH√ÄNH C√îNG",
                        description=f"ƒê√£ timeout {loser.mention} trong {duration} ph√∫t!",
                        color=discord.Color.orange()
                    )
                    timeout_embed.set_footer(text=f"Th·ª±c hi·ªán b·ªüi: {winner.display_name}")
                    await interaction.followup.send(embed=timeout_embed)

                except discord.Forbidden:
                    await interaction.followup.send(
                        "‚ùå Kh√¥ng th·ªÉ timeout ng∆∞·ªùi n√†y! H·ªç c√≥ th·ªÉ c√≥ quy·ªÅn h·∫°n cao h∆°n bot.",
                        ephemeral=True
                    )
                except Exception as e:
                    await interaction.followup.send(
                        f"‚ùå L·ªói khi timeout: {str(e)}",
                        ephemeral=True
                    )

            button.callback = timeout_callback
            timeout_view.add_item(button)

        # C·∫≠p nh·∫≠t k·∫øt qu·∫£ cu·ªëi c√πng v√† hi·ªÉn th·ªã n√∫t timeout
        await message.edit(embed=result_embed, view=timeout_view)


@bot.command(name='vqmm')
@check_channel()
@check_game_enabled('vqmm')
async def vong_quay_may_man(ctx, bet: str = None):
    """Tr√≤ ch∆°i V√≤ng Quay May M·∫Øn v·ªõi nhi·ªÅu ph·∫ßn th∆∞·ªüng"""
    if bet is None:
        embed = discord.Embed(
            title="üé° V√≤ng Quay May M·∫Øn - H∆∞·ªõng D·∫´n",
            description="H√£y nh·∫≠p s·ªë xu mu·ªën c∆∞·ª£c ƒë·ªÉ ch∆°i.\nV√≠ d·ª•: `.vqmm 50` ho·∫∑c `.vqmm all`",
            color=discord.Color.blue())
        embed.add_field(
            name="Lu·∫≠t ch∆°i",
            value=
            "- V√≤ng quay s·∫Ω x√°c ƒë·ªãnh ng·∫´u nhi√™n ph·∫ßn th∆∞·ªüng c·ªßa b·∫°n\n- Nh·∫≠n nhi·ªÅu lo·∫°i gi·∫£i th∆∞·ªüng kh√°c nhau t·ª´ x2 ƒë·∫øn x10",
            inline=False)
        embed.add_field(
            name="B·∫£ng th∆∞·ªüng",
            value=
            "- Jackpot üíé: x10 ti·ªÅn c∆∞·ª£c\n- Gi·∫£i ƒë·∫∑c bi·ªát üåü: x5 ti·ªÅn c∆∞·ª£c\n- Gi·∫£i may m·∫Øn üçÄ: x3 ti·ªÅn c∆∞·ª£c\n- Gi·∫£i th∆∞·ªùng üéÅ: x2 ti·ªÅn c∆∞·ª£c\n- Ti·∫øc qu√° ‚ùå: M·∫•t ti·ªÅn c∆∞·ª£c",
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra cooldown
    can_play, remaining_time = check_cooldown(user_id)
    if not can_play:
        embed = discord.Embed(
            title="‚è≥ Th·ªùi gian ch·ªù",
            description=
            f"B·∫°n c·∫ßn ƒë·ª£i th√™m {remaining_time} gi√¢y tr∆∞·ªõc khi ch∆°i ti·∫øp.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if bet_amount <= 0:
        embed = discord.Embed(
            title="üé° V√≤ng Quay May M·∫Øn",
            description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0 xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[user_id] < bet_amount:
        embed = discord.Embed(
            title="üé° V√≤ng Quay May M·∫Øn",
            description=
            f"{ctx.author.mention}, b·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c! B·∫°n hi·ªán c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # C√°c ph·∫ßn th∆∞·ªüng c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c t·ª´ v√≤ng quay - Gi·∫£m t·ªâ l·ªá th·∫Øng xu·ªëng 10%
    prizes = [
        {"name": "Jackpot", "multiplier": 10, "emoji": "üíé", "color": discord.Color.gold(), "weight": 1},
        {"name": "Gi·∫£i ƒë·∫∑c bi·ªát", "multiplier": 5, "emoji": "üåü", "color": discord.Color.purple(), "weight": 2},
        {"name": "Gi·∫£i may m·∫Øn", "multiplier": 3, "emoji": "üçÄ", "color": discord.Color.green(), "weight": 3},
        {"name": "Gi·∫£i th∆∞·ªùng", "multiplier": 2, "emoji": "üéÅ", "color": discord.Color.blue(), "weight": 4},
        {"name": "Ti·∫øc qu√°", "multiplier": 0, "emoji": "‚ùå", "color": discord.Color.red(), "weight": 90}
    ]

    # Kh·ªüi t·∫°o tin nh·∫Øn v·ªõi embed ban ƒë·∫ßu
    initial_embed = discord.Embed(
        title="üé° V√íNG QUAY MAY M·∫ÆN üé°",
        description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**",
        color=discord.Color.blue()
    )
    initial_embed.add_field(
        name="V√≤ng quay ƒëang kh·ªüi ƒë·ªông...", 
        value="Vui l√≤ng ch·ªù trong gi√¢y l√°t...",
        inline=False
    )
    loading = await ctx.send(embed=initial_embed)
    await asyncio.sleep(1)

    # Hi·ªáu ·ª©ng chu·∫©n b·ªã quay
    colors = [discord.Color.blue(), discord.Color.purple(), discord.Color.gold(), discord.Color.green(), discord.Color.red()]

    # Animation v√≤ng quay ƒëang kh·ªüi ƒë·ªông v·ªõi c√°c ƒë√®n nh·∫•p nh√°y
    wheel_frames = [
        "```\n    üí°    \n  üé°  üí°  \nüí°  üéÆ  üí°\n  üí°  üé°  \n    üí°    \n```",
        "```\n    üí´    \n  üé°  üí´  \nüí´  üéÆ  üí´\n  üí´  üé°  \n    üí´    \n```",
        "```\n    ‚ú®    \n  üé°  ‚ú®  \n‚ú®  üéÆ  ‚ú®\n  ‚ú®  üé°  \n    ‚ú®    \n```"
    ]

    for i in range(3):
        starting_embed = discord.Embed(
            title="üé° V√íNG QUAY MAY M·∫ÆN üé°",
            description=f"{ctx.author.mention} ƒëang b·∫Øt ƒë·∫ßu quay...",
            color=colors[i % len(colors)]
        )
        starting_embed.add_field(
            name="‚öôÔ∏è Chu·∫©n b·ªã quay", 
            value=wheel_frames[i % len(wheel_frames)],
            inline=False
        )
        await loading.edit(embed=starting_embed)
        await asyncio.sleep(0.8)

    # Hi·ªáu ·ª©ng ƒë·∫øm ng∆∞·ª£c 
    countdown_embed = discord.Embed(
        title="üé° V√íNG QUAY MAY M·∫ÆN üé°",
        description=f"{ctx.author.mention} ƒëang b·∫Øt ƒë·∫ßu quay...",
        color=discord.Color.gold()
    )
    countdown_embed.add_field(
        name="üîÑ S·∫µn s√†ng", 
        value="V√≤ng quay s·∫Ω b·∫Øt ƒë·∫ßu trong...",
        inline=False
    )

    for count in ["3Ô∏è‚É£", "2Ô∏è‚É£", "1Ô∏è‚É£"]:
        countdown_embed.set_field_at(0, name="üîÑ S·∫µn s√†ng", value=f"V√≤ng quay s·∫Ω b·∫Øt ƒë·∫ßu trong... {count}", inline=False)
        await loading.edit(embed=countdown_embed)
        await asyncio.sleep(0.7)

    # Hi·ªáu ·ª©ng v√≤ng quay ƒëang quay v·ªõi c√°c ph·∫ßn th∆∞·ªüng quay nhanh
    all_prizes = [p["emoji"] for p in prizes]

    for i in range(8):  # Quay nhanh 8 l·∫ßn
        speed = 0.5 - (i * 0.05)  # Gi·∫£m d·∫ßn t·ªëc ƒë·ªô
        if speed < 0.2:
            speed = 0.2

        spinning_prizes = random.sample(all_prizes, len(all_prizes))
        prize_display = " ".join(spinning_prizes)

        spin_embed = discord.Embed(
            title="üé° V√íNG QUAY MAY M·∫ÆN üé°",
            description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**",
            color=colors[i % len(colors)]
        )

        spin_embed.add_field(
            name=f"üîÑ ƒêang quay {'.' * ((i % 3) + 1)}", 
            value=f"[ {prize_display} ]",
            inline=False
        )

        # Th√™m hi·ªáu ·ª©ng v√≤ng quay ƒë·∫πp m·∫Øt
        wheel_animation = "```\n" + \
                         f"    {'‚ÜóÔ∏è' if i % 2 == 0 else '‚ÜñÔ∏è'}    \n" + \
                         f"  {'‚Üí'} üé° {'‚Üê' if i % 2 == 0 else '‚üµ'}  \n" + \
                         f"{'‚ÜòÔ∏è' if i % 2 == 0 else '‚ÜôÔ∏è'} üéÆ {'‚ÜôÔ∏è' if i % 2 == 0 else '‚ÜòÔ∏è'}\n" + \
                         f"  {'‚Üê' if i % 2 == 0 else '‚üµ'} üé° {'‚Üí'}  \n" + \
                         f"    {'‚ÜñÔ∏è' if i % 2 == 0 else '‚ÜóÔ∏è'}    \n" + \
                         "```"
        spin_embed.add_field(
            name=f"‚ö° T·ªëc ƒë·ªô: {(8-i)*10}%", 
            value=wheel_animation,
            inline=False
        )

        await loading.edit(embed=spin_embed)
        await asyncio.sleep(speed)

    # Hi·ªáu ·ª©ng v√≤ng quay ch·∫≠m d·∫ßn v√† d·ª´ng l·∫°i
    # Ch·ªçn k·∫øt qu·∫£ d·ª±a v√†o tr·ªçng s·ªë
    weights = [p["weight"] for p in prizes]
    result = random.choices(prizes, weights=weights, k=1)[0]

    # Thi√™n v·ªã ng∆∞·ªùi ch∆°i trong whitelist n·∫øu h·ªç t·ªìn t·∫°i v√† kh√¥ng ph·∫£i l√† jackpot
    if is_whitelisted(ctx.author.id) and result["multiplier"] < 5:
        # ƒê·∫£m b·∫£o ng∆∞·ªùi ch∆°i whitelist c√≥ c∆° h·ªôi cao h∆°n ƒë·ªÉ th·∫Øng gi·∫£i l·ªõn
        better_prizes = [p for p in prizes if p["multiplier"] >= 3]
        result = random.choice(better_prizes)

    # Qu√° tr√¨nh l√†m ch·∫≠m v√≤ng quay v√† d·∫ßn h∆∞·ªõng t·ªõi k·∫øt qu·∫£
    slowing_prizes = []
    for i in range(5):  # 5 l·∫ßn l√†m ch·∫≠m
        # T·∫°o danh s√°ch ph·∫ßn th∆∞·ªüng v·ªõi k·∫øt qu·∫£ cu·ªëi c√πng xu·∫•t hi·ªán ng√†y c√†ng nhi·ªÅu
        prize_pool = all_prizes.copy()
        for _ in range(i):  # Th√™m k·∫øt qu·∫£ cu·ªëi c√πng nhi·ªÅu l·∫ßn
            prize_pool.append(result["emoji"])

        slowing_prizes = random.sample(prize_pool, min(5, len(prize_pool)))
        while result["emoji"] not in slowing_prizes:
            slowing_prizes = random.sample(prize_pool, min(5, len(prize_pool)))

        prize_display = " ".join(slowing_prizes)

        slow_embed = discord.Embed(
            title="üé° V√íNG QUAY MAY M·∫ÆN üé°",
            description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**",
            color=discord.Color.orange()
        )

        slow_embed.add_field(
            name=f"üõë V√≤ng quay ƒëang ch·∫≠m d·∫ßn...", 
            value=f"[ {prize_display} ]",
            inline=False
        )

        await loading.edit(embed=slow_embed)
        await asyncio.sleep(0.7 + (i * 0.2))  # TƒÉng th·ªùi gian ch·ªù

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát
    # T√≠nh to√°n ti·ªÅn th·∫Øng/thua
    if result["multiplier"] > 0:
        winnings = bet_amount * result["multiplier"]
        currency[user_id] += winnings - bet_amount
        win_message = f"üéä {result['name']}! B·∫°n th·∫Øng {winnings} xu (x{result['multiplier']})!"
    else:
        winnings = 0
        currency[user_id] -= bet_amount
        win_message = f"‚ùå {result['name']}! B·∫°n ƒë√£ thua {bet_amount} xu."

    # ƒê·∫øm ng∆∞·ª£c ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi hi·ªáu ·ª©ng k·ªãch t√≠nh
    final_countdown_embed = discord.Embed(
        title="üé° K·∫æT QU·∫¢ S·∫ÆP L·ªò DI·ªÜN",
        description=f"V√≤ng quay ƒë√£ d·ª´ng l·∫°i...",
        color=discord.Color.gold()
    )

    for i in range(3, 0, -1):
        final_countdown_embed.description = f"V√≤ng quay ƒë√£ d·ª´ng l·∫°i...\n\nK·∫øt qu·∫£ s·∫Ω hi·ªán ra trong {i}..."
        await loading.edit(embed=final_countdown_embed)
        await asyncio.sleep(0.7)

    # Hi·ªáu ·ª©ng nh·∫•p nh√°y tr∆∞·ªõc khi hi·ªÉn th·ªã k·∫øt qu·∫£
    if result["multiplier"] >= 5:  # Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát cho jackpot v√† gi·∫£i ƒë·∫∑c bi·ªát
        for i in range(4):
            flash_color = result["color"] if i % 2 == 0 else discord.Color.white()
            flash_embed = discord.Embed(
                title=f"{'üéä JACKPOT! üéä' if result['multiplier'] == 10 else 'üåü GI·∫¢I ƒê·∫∂C BI·ªÜT! üåü'}",
                description=f"WOW! {ctx.author.mention} ƒê√É TH·∫ÆNG L·ªöN!",
                color=flash_color
            )
            flash_embed.add_field(
                name=f"{result['emoji']} K·∫æT QU·∫¢ {result['emoji']}", 
                value=f"{result['name']}",
                inline=False
            )
            await loading.edit(embed=flash_embed)
            await asyncio.sleep(0.4)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    final_result_embed = discord.Embed(
        title=f"üé° K·∫æT QU·∫¢ V√íNG QUAY MAY M·∫ÆN üé°",
        description=win_message,
        color=result["color"]
    )

    # Hi·ªÉn th·ªã bi·ªÉu t∆∞·ª£ng k·∫øt qu·∫£ v·ªõi hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát
    result_display = f"{result['emoji']} {result['emoji']} {result['emoji']}"
    final_result_embed.add_field(
        name="üéØ K·∫øt qu·∫£ quay", 
        value=f"[ {result_display} ]", 
        inline=False
    )

    # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
    if result["multiplier"] > 0:
        final_result_embed.add_field(
            name="üí∞ Ti·ªÅn th·∫Øng", 
            value=f"+{winnings} xu (x{result['multiplier']})", 
            inline=True
        )
    else:
        final_result_embed.add_field(
            name="üí∏ Ti·ªÅn thua", 
            value=f"-{bet_amount} xu", 
            inline=True
        )

    final_result_embed.add_field(
        name="üíº S·ªë d∆∞ hi·ªán t·∫°i",
        value=f"{currency[user_id]} xu",
        inline=True
    )

    # Hi·ªáu ·ª©ng ƒë·ªì h·ªça b·ªï sung
    wheel_graphic = ""
    if result["multiplier"] == 10:  # Jackpot
        wheel_graphic = "```\n" + \
                       "    üíéüíéüíé    \n" + \
                       "  üíé üé° üíé  \n" + \
                       "üíé JACKPOT üíé\n" + \
                       "  üíé üé° üíé  \n" + \
                       "    üíéüíéüíé    \n" + \
                       "```"
    elif result["multiplier"] == 5:  # Gi·∫£i ƒë·∫∑c bi·ªát
        wheel_graphic = "```\n" + \
                       "    üåüüåüüåü    \n" + \
                       "  üåü üé° üåü  \n" + \
                       "üåü ƒê·∫∂C BI·ªÜT üåü\n" + \
                       "  üåü üé° üåü  \n" + \
                       "    üåüüåüüåü    \n" + \
                       "```"
    elif result["multiplier"] == 3:  # Gi·∫£i may m·∫Øn
        wheel_graphic = "```\n" + \
                       "    üçÄüçÄüçÄ    \n" + \
                       "  üçÄ üé° üçÄ  \n" + \
                       "üçÄ MAY M·∫ÆN üçÄ\n" + \
                       "  üçÄ üé° üçÄ  \n" + \
                       "    üçÄüçÄüçÄ    \n" + \
                       "```"
    elif result["multiplier"] == 2:  # Gi·∫£i th∆∞·ªùng
        wheel_graphic = "```\n" + \
                       "    üéÅüéÅüéÅ    \n" + \
                       "  üéÅ üé° üéÅ  \n" + \
                       "üéÅ TH∆Ø·ªúNG üéÅ\n" + \
                       "  üéÅ üé° üéÅ  \n" + \
                       "    üéÅüéÅüéÅ    \n" + \
                       "```"
    else:  # Thua
        wheel_graphic = "```\n" + \
                       "    ‚ùå‚ùå‚ùå    \n" + \
                       "  ‚ùå üé° ‚ùå  \n" + \
                       "‚ùå TI·∫æC QU√Å ‚ùå\n" + \
                       "  ‚ùå üé° ‚ùå  \n" + \
                       "    ‚ùå‚ùå‚ùå    \n" + \
                       "```"

    if wheel_graphic:
        final_result_embed.add_field(
            name="üé° V√≤ng Quay", 
            value=wheel_graphic, 
            inline=False
        )

    # Th√™m footer v·ªõi tip ng·∫´u nhi√™n
    tips = [
        "Ch∆°i c√≥ tr√°ch nhi·ªám, ƒë·ª´ng ƒë·∫∑t c∆∞·ª£c qu√° nhi·ªÅu!",
        "Mua b√πa may m·∫Øn t·ª´ shop ƒë·ªÉ tƒÉng c∆° h·ªôi th·∫Øng!",
        "Gi·ªØ m·ªôt ph·∫ßn xu trong k√©t s·∫Øt ƒë·ªÉ ch∆°i an to√†n!",
        "C√†ng c∆∞·ª£c nhi·ªÅu, c∆° h·ªôi tr√∫ng Jackpot c√†ng cao!",
        "V√≤ng quay lu√¥n c√¥ng b·∫±ng - 100% ng·∫´u nhi√™n!"
    ]
    tip = random.choice(tips)
    final_result_embed.set_footer(text=f"Ng∆∞·ªùi ch∆°i: {ctx.author.display_name} | {tip}")

    await loading.edit(embed=final_result_embed)

@bot.command(name='phom', aliases=['ph'])
@check_channel()
@check_game_enabled('phom')
async def phom(ctx, bet: str = None):
    """Tr√≤ ch∆°i Ph·ªèm ƒë∆°n gi·∫£n"""
    if bet is None:
        embed = discord.Embed(
            title="üé¥ Ph·ªèm - H∆∞·ªõng D·∫´n",
            description=
            "H√£y nh·∫≠p s·ªë xu mu·ªën c∆∞·ª£c.\nV√≠ d·ª•: `.phom 50` ho·∫∑c `.phom all`",
            color=discord.Color.blue())
        embed.add_field(
            name="Lu·∫≠t ch∆°i",
            value=
            "- M·ªói ng∆∞·ªùi ch∆°i nh·∫≠n 9 l√° b√†i\n- Bot t·ª± ƒë·ªông x·∫øp b√†i th√†nh c√°c b·ªô\n- Ng∆∞·ªùi c√≥ b·ªô m·∫°nh h∆°n s·∫Ω th·∫Øng",
            inline=False)
        embed.add_field(
            name="Ph·∫ßn th∆∞·ªüng",
            value=
            "- Th·∫Øng th∆∞·ªùng: x1.5 ti·ªÅn c∆∞·ª£c\n- Ph·ªèm ƒê·∫∑c Bi·ªát: x2.5 ti·ªÅn c∆∞·ª£c\n- Ph·ªèm Th√πng: x3 ti·ªÅn c∆∞·ª£c",
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if bet_amount <= 0:
        embed = discord.Embed(title="üé¥ Ph·ªèm",
                              description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0 xu.",
                              color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[user_id] < bet_amount:
        embed = discord.Embed(
            title="üé¥ Ph·ªèm",
            description=
            f"{ctx.author.mention}, b·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c! B·∫°n hi·ªán c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Hi·ªÉn th·ªã loading message
    loading_message = await ctx.send("üé¥ **ƒêang chu·∫©n b·ªã b√†n ch∆°i Ph·ªèm...**")
    await asyncio.sleep(1)

    # T·∫°o b·ªô b√†i
    suits = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è']
    cards = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']

    # T·∫°o gi√° tr·ªã cho m·ªói qu√¢n b√†i ƒë·ªÉ so s√°nh
    values = {
        'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,
        '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13
    }

    deck = [(card, suit) for suit in suits for card in cards]
    random.shuffle(deck)

    # Animation chia b√†i
    await loading_message.edit(content="üé¥ **ƒêang chia b√†i...**")
    await asyncio.sleep(1)

    # Hi·ªáu ·ª©ng r√∫t t·ª´ng l√° b√†i
    card_animations = [
        "üé¥ **ƒêang chia b√†i [1/9]** üé¥",
        "üé¥ **ƒêang chia b√†i [3/9]** üé¥üé¥üé¥",
        "üé¥ **ƒêang chia b√†i [6/9]** üé¥üé¥üé¥üé¥üé¥üé¥",
        "üé¥ **ƒêang chia b√†i [9/9]** üé¥üé¥üé¥üé¥üé¥üé¥üé¥üé¥üé¥"
    ]
    for animation in card_animations:
        await loading_message.edit(content=animation)
        await asyncio.sleep(0.7)

    # Chia b√†i
    player_hand = [deck.pop() for _ in range(9)]
    bot_hand = [deck.pop() for _ in range(9)]

    # S·∫Øp x·∫øp b√†i theo b·ªô ƒë·ªÉ d·ªÖ xem
    def sort_by_value(cards):
        return sorted(cards, key=lambda x: (values[x[0]], x[1]))

    # Ph√¢n t√≠ch tay b√†i th√†nh c√°c b·ªô (3 l√° c√πng ch·∫•t, 3 l√° c√πng s·ªë)
    def analyze_hand(hand):
        # S·∫Øp x·∫øp b√†i theo gi√° tr·ªã
        hand = sort_by_value(hand)

        # Nh√≥m b√†i theo gi√° tr·ªã
        value_groups = {}
        for card, suit in hand:
            if card not in value_groups:
                value_groups[card] = []
            value_groups[card].append(suit)

        # Nh√≥m b√†i theo ch·∫•t
        suit_groups = {}
        for card, suit in hand:
            if suit not in suit_groups:
                suit_groups[suit] = []
            suit_groups[suit].append(card)

        # T√¨m b·ªô ba c√πng gi√° tr·ªã
        triplets_by_value = []
        for card, suits in value_groups.items():
            if len(suits) >= 3:
                triplets_by_value.append([(card, suit) for suit in suits[:3]])

        # T√¨m b·ªô ba c√πng ch·∫•t li√™n ti·∫øp
        triplets_by_suit = []
        for suit, cards in suit_groups.items():
            if len(cards) >= 3:
                sorted_cards = sorted(cards, key=lambda x: values[x])
                for i in range(len(sorted_cards) - 2):
                    if (values[sorted_cards[i+1]] == values[sorted_cards[i]] + 1 and 
                        values[sorted_cards[i+2]] == values[sorted_cards[i]] + 2):
                        triplets_by_suit.append([(sorted_cards[i], suit), 
                                                 (sorted_cards[i+1], suit), 
                                                 (sorted_cards[i+2], suit)])

        # T√¨m ph·ªèm ƒë·∫∑c bi·ªát (th√πng - 5 l√° c√πng ch·∫•t)
        special_hands = []
        for suit, cards in suit_groups.items():
            if len(cards) >= 5:
                special_hands.append([
                    (card, suit) for card in sorted(cards, key=lambda x: values[x])[:5]
                ])

        # K·∫øt h·ª£p c√°c b·ªô l·∫°i
        all_sets = triplets_by_value + triplets_by_suit + special_hands

        # Tr·∫£ v·ªÅ c√°c b·ªô b√†i v√† b√†i l·∫ª
        used_cards = set()
        selected_sets = []

        # ∆Øu ti√™n b·ªô ƒë·∫∑c bi·ªát
        for hand_set in special_hands:
            cards_tuple = tuple(sorted(hand_set))
            if not any(card in used_cards for card in cards_tuple):
                selected_sets.append(hand_set)
                used_cards.update(cards_tuple)

        # Sau ƒë√≥ ƒë·∫øn c√°c b·ªô ba
        for hand_set in triplets_by_value + triplets_by_suit:
            cards_tuple = tuple(sorted(hand_set))
            if not any(card in used_cards for card in cards_tuple):
                selected_sets.append(hand_set)
                used_cards.update(cards_tuple)

        # Nh·ªØng qu√¢n b√†i c√≤n l·∫°i l√† l·∫ª
        singles = [card for card in hand if card not in used_cards]

        return selected_sets, singles

    # Ph√¢n t√≠ch b√†i
    await loading_message.edit(content="üß© **ƒêang x·∫øp b√†i...**")
    await asyncio.sleep(1)

    player_sets, player_singles = analyze_hand(player_hand)
    bot_sets, bot_singles = analyze_hand(bot_hand)

    # Hi·ªÉn th·ªã b√†i ƒë√£ x·∫øp c·ªßa ng∆∞·ªùi ch∆°i
    formatted_player_hand = ""

    # Hi·ªÉn th·ªã c√°c b·ªô ƒë√£ x·∫øp
    for i, card_set in enumerate(player_sets, 1):
        set_str = " ".join(f"{card}{suit}" for card, suit in card_set)
        if len(card_set) >= 5:  # B·ªô ƒë·∫∑c bi·ªát
            formatted_player_hand += f"üî• **Ph·ªèm Th√πng #{i}:** {set_str}\n"
        else:
            formatted_player_hand += f"‚úÖ **Ph·ªèm #{i}:** {set_str}\n"

    # Hi·ªÉn th·ªã c√°c l√° l·∫ª
    if player_singles:
        singles_str = " ".join(f"{card}{suit}" for card, suit in player_singles)
        formatted_player_hand += f"‚ùå **B√†i l·∫ª:** {singles_str}"

    # Hi·ªÉn th·ªã b√†i ƒë√£ x·∫øp
    await loading_message.edit(content="üÉè **ƒê√£ x·∫øp xong b√†i...**")
    await asyncio.sleep(1)

    # T√≠nh ƒëi·ªÉm d·ª±a tr√™n s·ªë b·ªô v√† lo·∫°i b·ªô
    def calculate_score(sets, singles):
        score = 0
        has_special = False
        has_flush = False

        # ƒêi·ªÉm cho c√°c b·ªô
        for card_set in sets:
            if len(card_set) >= 5:  # Ph·ªèm th√πng
                score += 30
                has_flush = True
            elif len(card_set) == 3:  # Ph·ªèm th∆∞·ªùng
                # Ki·ªÉm tra xem c√≥ ph·∫£i 3 l√° c√πng s·ªë kh√¥ng
                if all(card[0] == card_set[0][0] for card in card_set):
                    score += 10
                    if card_set[0][0] in ['J', 'Q', 'K', 'A']:  # Ph·ªèm ƒë·∫∑c bi·ªát
                        score += 5
                        has_special = True
                else:  # 3 l√° c√πng ch·∫•t li√™n ti·∫øp
                    score += 8

        # Tr·ª´ ƒëi·ªÉm cho b√†i l·∫ª
        score -= len(singles) * 2

        return score, has_special, has_flush

    player_score, player_has_special, player_has_flush = calculate_score(player_sets, player_singles)
    bot_score, bot_has_special, bot_has_flush = calculate_score(bot_sets, bot_singles)

    # X√°c ƒë·ªãnh k·∫øt qu·∫£ d·ª±a v√†o whitelist v√† t·ª∑ l·ªá th·∫Øng/thua
    if is_whitelisted(ctx.author.id):
        # Ng∆∞·ªùi d√πng trong whitelist lu√¥n th·∫Øng
        player_wins = True
        if random.random() < 0.3:  # 30% c∆° h·ªôi c√≥ Ph·ªèm Th√πng
            player_has_flush = True
        elif random.random() < 0.5:  # 50% c∆° h·ªôi c√≥ Ph·ªèm ƒê·∫∑c Bi·ªát
            player_has_special = True
    else:
        # T·ª∑ l·ªá th·∫Øng thua th√¥ng th∆∞·ªùng (30% th·∫Øng, 70% thua)
        player_wins = random.choices([True, False], weights=[30, 70], k=1)[0]

    # T·∫°o animation hi·ªáu ·ª©ng ƒëang so s√°nh b√†i
    comparison_embed = discord.Embed(
        title="üé¥ Ph·ªèm - ƒêang so s√°nh b√†i",
        description=f"{ctx.author.mention} ƒë·∫•u v·ªõi Bot",
        color=discord.Color.gold()
    )

    comparison_embed.add_field(
        name="üßÆ B√†i c·ªßa b·∫°n",
        value=formatted_player_hand,
        inline=False
    )

    comparison_embed.add_field(
        name="‚åõ ƒêang so s√°nh",
        value="Ch·ªù trong gi√¢y l√°t...",
        inline=False
    )

    await loading_message.edit(content=None, embed=comparison_embed)
    await asyncio.sleep(2)

    # Hi·ªÉn th·ªã b√†i c·ªßa bot
    formatted_bot_hand = ""

    # Hi·ªÉn th·ªã c√°c b·ªô ƒë√£ x·∫øp c·ªßa bot
    for i, card_set in enumerate(bot_sets, 1):
        set_str = " ".join(f"{card}{suit}" for card, suit in card_set)
        if len(card_set) >= 5:  # B·ªô ƒë·∫∑c bi·ªát
            formatted_bot_hand += f"üî• **Ph·ªèm Th√πng #{i}:** {set_str}\n"
        else:
            formatted_bot_hand += f"‚úÖ **Ph·ªèm #{i}:** {set_str}\n"

    # Hi·ªÉn th·ªã c√°c l√° l·∫ª c·ªßa bot
    if bot_singles:
        singles_str = " ".join(f"{card}{suit}" for card, suit in bot_singles)
        formatted_bot_hand += f"‚ùå **B√†i l·∫ª:** {singles_str}"

    # Hi·ªÉn th·ªã so s√°nh b√†i
    comparison_embed = discord.Embed(
        title="üé¥ Ph·ªèm - So S√°nh B√†i",
        description=f"{ctx.author.mention} ƒë·∫•u v·ªõi Bot",
        color=discord.Color.gold()
    )

    comparison_embed.add_field(
        name="üßÆ B√†i c·ªßa b·∫°n",
        value=formatted_player_hand,
        inline=False
    )

    comparison_embed.add_field(
        name="ü§ñ B√†i c·ªßa Bot",
        value=formatted_bot_hand,
        inline=False
    )

    comparison_embed.add_field(
        name="‚öñÔ∏è ƒê√°nh gi√°",
        value="ƒêang t√≠nh to√°n k·∫øt qu·∫£...",
        inline=False
    )

    await loading_message.edit(embed=comparison_embed)
    await asyncio.sleep(1.5)

    # X·ª≠ l√Ω k·∫øt qu·∫£
    if player_wins:
        # X√°c ƒë·ªãnh lo·∫°i th·∫Øng d·ª±a v√†o ph·ªèm ƒë·∫∑c bi·ªát/th√πng
        if player_has_flush:
            # Th·∫Øng v·ªõi Ph·ªèm Th√πng
            winnings = int(bet_amount * 3)
            result_title = "üî• PH·ªéM TH√ôNG! üî•"
            result_desc = f"{ctx.author.mention} ƒë√£ th·∫Øng v·ªõi Ph·ªèm Th√πng (5 l√° c√πng ch·∫•t)!"
            result_color = discord.Color.gold()
        elif player_has_special:
            # Th·∫Øng v·ªõi Ph·ªèm ƒë·∫∑c bi·ªát
            winnings = int(bet_amount * 2.5)
            result_title = "üéâ PH·ªéM ƒê·∫∂C BI·ªÜT! üéâ"
            result_desc = f"{ctx.author.mention} ƒë√£ th·∫Øng v·ªõi Ph·ªèm ƒê·∫∑c Bi·ªát!"
            result_color = discord.Color.purple()
        else:
            # Th·∫Øng th∆∞·ªùng
            winnings = int(bet_amount * 1.5)
            result_title = "üéâ CHI·∫æN TH·∫ÆNG!"
            result_desc = f"{ctx.author.mention} ƒë√£ th·∫Øng trong Ph·ªèm!"
            result_color = discord.Color.green()

        # C·ªông ti·ªÅn th·∫Øng
        currency[user_id] += winnings - bet_amount
    else:
        # Thua
        winnings = 0
        currency[user_id] -= bet_amount
        result_title = "‚ùå THUA CU·ªòC!"
        result_desc = f"{ctx.author.mention} ƒë√£ thua trong Ph·ªèm!"
        result_color = discord.Color.red()

    # Ho·∫°t ·∫£nh ƒë·∫øm ng∆∞·ª£c k·∫øt qu·∫£
    for i in range(3, 0, -1):
        countdown_embed = discord.Embed(
            title=f"üé¥ Ph·ªèm - K·∫øt qu·∫£ trong {i}...",
            description=f"{ctx.author.mention} ƒë·∫•u v·ªõi Bot",
            color=discord.Color.gold()
        )

        countdown_embed.add_field(
            name="üßÆ B√†i c·ªßa b·∫°n",
            value=formatted_player_hand,
            inline=False
        )

        countdown_embed.add_field(
            name="ü§ñ B√†i c·ªßa Bot",
            value=formatted_bot_hand,
            inline=False
        )

        await loading_message.edit(embed=countdown_embed)
        await asyncio.sleep(0.7)

    # K·∫øt qu·∫£ cu·ªëi c√πng
    result_embed = discord.Embed(
        title=result_title,
        description=result_desc,
        color=result_color
    )

    # Th√™m th√¥ng tin chi ti·∫øt v·ªÅ b√†i
    result_embed.add_field(
        name="üßÆ B√†i c·ªßa b·∫°n",
        value=formatted_player_hand,
        inline=False
    )

    result_embed.add_field(
        name="ü§ñ B√†i c·ªßa Bot",
        value=formatted_bot_hand,
        inline=False
    )

    # Th√™m ƒë√°nh gi√° b√†i chi ti·∫øt
    if player_wins:
        if player_has_flush:
            result_embed.add_field(
                name="üèÜ ƒê√°nh gi√° b√†i th·∫Øng",
                value="Ph·ªèm Th√πng (5 l√° c√πng ch·∫•t) - B·ªô b√†i c·ª±c m·∫°nh!",
                inline=False
            )
            result_embed.add_field(
                name="üí∞ Ti·ªÅn th∆∞·ªüng ƒë·∫∑c bi·ªát",
                value=f"+{winnings} xu (x3)",
                inline=True
            )
        elif player_has_special:
            result_embed.add_field(
                name="üèÜ ƒê√°nh gi√° b√†i th·∫Øng",
                value="Ph·ªèm ƒê·∫∑c Bi·ªát v·ªõi c√°c qu√¢n b√†i cao!",
                inline=False
            )
            result_embed.add_field(
                name="üí∞ Ti·ªÅn th∆∞·ªüng",
                value=f"+{winnings} xu (x2.5)",
                inline=True
            )
        else:
            result_embed.add_field(
                name="üèÜ ƒê√°nh gi√° b√†i th·∫Øng",
                value=f"B·∫°n c√≥ {len(player_sets)} b·ªô Ph·ªèm th∆∞·ªùng m·∫°nh h∆°n Bot!",
                inline=False
            )
            result_embed.add_field(
                name="üí∞ Ti·ªÅn th∆∞·ªüng",
                value=f"+{winnings} xu (x1.5)",
                inline=True
            )
    else:
        result_embed.add_field(
            name="‚ùå ƒê√°nh gi√° b√†i thua",
            value=f"Bot c√≥ {len(bot_sets)} b·ªô Ph·ªèm m·∫°nh h∆°n!",
            inline=False
        )
        result_embed.add_field(
            name="üí∏ Thi·ªát h·∫°i",
            value=f"-{bet_amount} xu",
            inline=True
        )

    # Hi·ªÉn th·ªã s·ªë d∆∞ hi·ªán t·∫°i
    result_embed.add_field(
        name="üíº S·ªë d∆∞ hi·ªán t·∫°i",
        value=f"{currency[user_id]} xu",
        inline=True
    )

    # Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát cho th·∫Øng/thua
    if player_wins:
        if player_has_flush:
            # Hi·ªáu ·ª©ng ph·ªèm th√πng
            victory_animation = "```\n" + \
                              "  üéá üéá  \n" + \
                              " üéÜ üéÜ üéÜ \n" + \
                              "üéØ üèÜ üéØ\n" + \
                              " üéÜ üéÜ üéÜ \n" + \
                              "  üéá üéá  \n" + \
                              "```"
            result_embed.description = f"{result_desc}\n\n{victory_animation}"
        else:
            # Hi·ªáu ·ª©ng th·∫Øng th∆∞·ªùng
            victory_animation = "```\n" + \
                              "   üéä   \n" + \
                              " üé¥üé¥üé¥ \n" + \
                              "üéâ üèÜ üéâ\n" + \
                              " üé¥üé¥üé¥ \n" + \
                              "   üéä   \n" + \
                              "```"
            result_embed.description = f"{result_desc}\n\n{victory_animation}"
    else:
        # Hi·ªáu ·ª©ng thua
        defeat_animation = "```\n" + \
                          "   üí¢   \n" + \
                          " üò¢üé¥üò¢ \n" + \
                          "üí¢ ‚ùå üí¢\n" + \
                          " üò¢üé¥üò¢ \n" + \
                          "   üí¢   \n" + \
                          "```"
        result_embed.description = f"{result_desc}\n\n{defeat_animation}"

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    await loading_message.edit(embed=result_embed)


@bot.command(name='kbb', aliases=['keobabao', 'rps'])
@check_channel()
@check_game_enabled('kbb')
async def keo_bua_bao(ctx, choice: str = None, bet: str = None):
    """Tr√≤ ch∆°i K√©o B√∫a Bao v·ªõi hi·ªáu ·ª©ng ƒë·∫πp m·∫Øt"""
    if choice is None or bet is None:
        embed = discord.Embed(
            title="‚úÇÔ∏è K√©o B√∫a Bao - H∆∞·ªõng D·∫´n",
            description="H√£y nh·∫≠p l·ª±a ch·ªçn v√† s·ªë xu c∆∞·ª£c.\nV√≠ d·ª•: `.kbb keo 50` ho·∫∑c `.kbb bua all`",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°ch ch∆°i",
            value="- Ch·ªçn k√©o (k), b√∫a (b) ho·∫∑c bao (o)\n- ƒê·∫∑t c∆∞·ª£c s·ªë xu\n- Th·∫Øng: x1.5 ti·ªÅn c∆∞·ª£c\n- Thua: b·ªã timeout 1 ph√∫t",
            inline=False)
        embed.add_field(
            name="L·ª±a ch·ªçn h·ª£p l·ªá",
            value="- **K√©o**: k, keo, scissors\n- **B√∫a**: b, bua, rock\n- **Bao**: o, bao, paper",
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # Ki·ªÉm tra cooldown
    can_play, remaining_time = check_cooldown(user_id)
    if not can_play:
        embed = discord.Embed(
            title="‚è≥ Th·ªùi gian ch·ªù",
            description=f"B·∫°n c·∫ßn ƒë·ª£i th√™m {remaining_time} gi√¢y tr∆∞·ªõc khi ch∆°i ti·∫øp.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Chu·∫©n h√≥a l·ª±a ch·ªçn ng∆∞·ªùi ch∆°i
    choice = choice.lower()

    # X√°c ƒë·ªãnh l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi ch∆°i
    if choice in ['k', 'keo', 'scissors', 'k√©o']:
        player_choice = "keo"
        player_emoji = "‚úÇÔ∏è"
        player_display = "K√©o ‚úÇÔ∏è"
    elif choice in ['b', 'bua', 'rock', 'b√∫a']:
        player_choice = "bua"
        player_emoji = "ü™®"
        player_display = "B√∫a ü™®"
    elif choice in ['o', 'bao', 'paper', 'bao']:
        player_choice = "bao"
        player_emoji = "üìÑ"
        player_display = "Bao üìÑ"
    else:
        embed = discord.Embed(
            title="‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng ch·ªçn 'keo' (k), 'bua' (b) ho·∫∑c 'bao' (o).",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if bet_amount <= 0:
        embed = discord.Embed(
            title="‚úÇÔ∏è K√©o B√∫a Bao",
            description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0 xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[user_id] < bet_amount:
        embed = discord.Embed(
            title="‚úÇÔ∏è K√©o B√∫a Bao",
            description=f"{ctx.author.mention}, b·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c! B·∫°n hi·ªán c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # T·∫°o hi·ªáu ·ª©ng ƒë·∫øm ng∆∞·ª£c v√† animation
    start_embed = discord.Embed(
        title="‚úÇÔ∏è K√âO B√öA BAO B·∫ÆT ƒê·∫¶U!",
        description=f"{ctx.author.mention} ƒë√£ ch·ªçn m·ªôt l·ª±a ch·ªçn v√† ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**!",
        color=discord.Color.blue())

    start_embed.add_field(name="L·ª±a ch·ªçn c·ªßa b·∫°n", value=f"**{player_display}**", inline=True)
    start_embed.add_field(name="‚è≥ Tr·∫°ng th√°i", value="Bot ƒëang chu·∫©n b·ªã...", inline=True)

    # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu ƒëang ƒë·∫∑t c∆∞·ª£c t·∫•t c·∫£
    is_all_in = bet_amount == currency[user_id]
    if is_all_in:
        start_embed.add_field(name="‚ö†Ô∏è ALL-IN", value="B·∫°n ƒëang ƒë·∫∑t c∆∞·ª£c t·∫•t c·∫£ xu!", inline=False)

    message = await ctx.send(embed=start_embed)
    await asyncio.sleep(1)

    # Animation chu·∫©n b·ªã ra quy·∫øt ƒë·ªãnh
    countdown_texts = [
        "**K√©o...**",
        "**K√©o... B√∫a...**",
        "**K√©o... B√∫a... Bao...**"
    ]

    countdown_emojis = [
        "‚úä",
        "‚úä",
        "üëä"
    ]

    for i in range(3):
        countdown_embed = discord.Embed(
            title=f"‚úÇÔ∏è K√âO B√öA BAO ({i+1}/3)",
            description=f"{countdown_texts[i]}",
            color=discord.Color.gold())

        countdown_embed.add_field(
            name="L·ª±a ch·ªçn c·ªßa b·∫°n", 
            value=f"**{player_display}**", 
            inline=True)

        countdown_embed.add_field(
            name="Bot ƒëang ra", 
            value=f"{countdown_emojis[i]}", 
            inline=True)

        await message.edit(embed=countdown_embed)
        await asyncio.sleep(0.8)

    # Quy·∫øt ƒë·ªãnh ng·∫´u nhi√™n c·ªßa bot
    choices = ["keo", "bua", "bao"]
    bot_choice = random.choice(choices)

    # √Ånh x·∫° l·ª±a ch·ªçn c·ªßa bot sang emoji v√† t√™n hi·ªÉn th·ªã
    if bot_choice == "keo":
        bot_emoji = "‚úÇÔ∏è"
        bot_display = "K√©o ‚úÇÔ∏è"
    elif bot_choice == "bua":
        bot_emoji = "ü™®"
        bot_display = "B√∫a ü™®"
    else:
        bot_emoji = "üìÑ"
        bot_display = "Bao üìÑ"

    # X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng
    if player_choice == bot_choice:
        result = "draw"
        result_text = "H√íA!"
        result_emoji = "ü§ù"
        result_color = discord.Color.blue()
    elif (player_choice == "keo" and bot_choice == "bao") or \
         (player_choice == "bua" and bot_choice == "keo") or \
         (player_choice == "bao" and bot_choice == "bua"):
        result = "win"
        result_text = "TH·∫ÆNG!"
        result_emoji = "üèÜ"
        result_color = discord.Color.green()
    else:
        result = "lose"
        result_text = "THUA!"
        result_emoji = "‚ùå"
        result_color = discord.Color.red()

    # Hi·ªáu ·ª©ng c√¥ng b·ªë k·∫øt qu·∫£ v·ªõi animation l·ªô t·ª´ng ph·∫ßn
    result_embed = discord.Embed(
        title=f"‚úÇÔ∏è K·∫æO B√öA BAO - K·∫æT QU·∫¢",
        description=f"Bot ƒë√£ ra **{bot_display}**!",
        color=result_color)

    result_embed.add_field(
        name="L·ª±a ch·ªçn c·ªßa b·∫°n", 
        value=f"**{player_display}**", 
        inline=True)

    result_embed.add_field(
        name="L·ª±a ch·ªçn c·ªßa bot", 
        value=f"**{bot_display}**", 
        inline=True)

    # Th√™m hi·ªáu ·ª©ng rung l·∫Øc cho k·∫øt qu·∫£
    for i in range(3):
        if i % 2 == 0:
            result_embed.title = f"‚úÇÔ∏è K·∫æO B√öA BAO - {result_text} {result_emoji}"
        else:
            result_embed.title = f"{result_emoji} K·∫æO B√öA BAO - {result_text} ‚úÇÔ∏è"

        await message.edit(embed=result_embed)
        await asyncio.sleep(0.4)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    final_embed = discord.Embed(
        title=f"{result_emoji} K·∫æO B√öA BAO - {result_text} {result_emoji}",
        color=result_color)

    # T·∫°o hi·ªáu ·ª©ng ƒë·ªëi kh√°ng ƒë·∫πp m·∫Øt
    battle_display = f"{player_emoji} **VS** {bot_emoji}"
    final_embed.add_field(
        name="Tr·∫≠n ƒë·∫•u", 
        value=battle_display, 
        inline=False)

    # Chi ti·∫øt l·ª±a ch·ªçn
    choice_details = f"**B·∫°n:** {player_display} | **Bot:** {bot_display}"
    final_embed.add_field(
        name="Chi ti·∫øt", 
        value=choice_details, 
        inline=False)

    # X·ª≠ l√Ω k·∫øt qu·∫£ v√† th∆∞·ªüng/ph·∫°t
    if result == "win":
        winnings = int(bet_amount * 1.5)
        currency[user_id] += winnings - bet_amount  # Tr·ª´ ti·ªÅn c∆∞·ª£c v√† c·ªông ti·ªÅn th·∫Øng

        # Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát cho all-in
        if is_all_in:
            final_embed.add_field(
                name="üí∞ TH·∫ÆNG L·ªöN - ALL IN", 
                value=f"**+{winnings} xu** (x1.5)\nB·∫°n ƒë√£ ƒë·∫∑t c∆∞·ª£c v√† th·∫Øng t·∫•t c·∫£!", 
                inline=True)
        else:
            final_embed.add_field(
                name="üí∞ Ti·ªÅn th·∫Øng", 
                value=f"**+{winnings} xu** (x1.5)", 
                inline=True)

        # Th√™m hi·ªáu ·ª©ng vui
        victory_animation = "```\n" + \
                          "   üéä   \n" + \
                          " üí∞üí∞üí∞ \n" + \
                          "üéâ üèÜ üéâ\n" + \
                          " üí∞üí∞üí∞ \n" + \
                          "   üéä   \n" + \
                          "```"
        final_embed.description = f"{ctx.author.mention} ƒë√£ th·∫Øng!\n\n{victory_animation}"
        final_embed.set_footer(text="Ch√∫c m·ª´ng chi·∫øn th·∫Øng! B·∫°n ƒë√£ ƒë√°nh b·∫°i bot!")

    elif result == "lose":
        currency[user_id] -= bet_amount

        # Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát cho all-in thua
        if is_all_in:
            final_embed.add_field(
                name="üí∏ THUA TR·∫ÆNG - ALL IN", 
                value=f"**-{bet_amount} xu**\nB·∫°n ƒë√£ m·∫•t t·∫•t c·∫£ s·ªë xu ƒë·∫∑t c∆∞·ª£c!", 
                inline=True)
        else:
            final_embed.add_field(
                name="üí∏ Ti·ªÅn thua", 
                value=f"**-{bet_amount} xu**", 
                inline=True)

        final_embed.add_field(
            name="‚è≥ H·ªá qu·∫£", 
            value="B·∫°n s·∫Ω b·ªã timeout 1 ph√∫t!", 
            inline=False)

        # Th√™m hi·ªáu ·ª©ng bu·ªìn
        defeat_animation = "```\n" + \
                          "   üí¢   \n" + \
                          "  üò¢üò¢  \n" + \
                          "üí¢ ‚ùå üí¢\n" + \
                          "  üò¢üò¢  \n" + \
                          "   üí¢   \n" + \
                          "```"
        final_embed.description = f"{ctx.author.mention} ƒë√£ thua v√† s·∫Ω b·ªã timeout 1 ph√∫t!\n\n{defeat_animation}"
        final_embed.set_footer(text="R·∫•t ti·∫øc! Th·ª≠ l·∫°i v·∫≠n may l·∫ßn sau nh√©!")

        # Timeout ng∆∞·ªùi ch∆°i 1 ph√∫t
        try:
            timeout_until = discord.utils.utcnow() + timedelta(minutes=1)
            await ctx.author.timeout(timeout_until, reason="Thua tr√≤ ch∆°i K√©o B√∫a Bao")
        except discord.Forbidden:
            final_embed.add_field(name="‚ö†Ô∏è L·ªói", value="Kh√¥ng th·ªÉ timeout ng∆∞·ªùi ch∆°i!", inline=False)
        except Exception as e:
            final_embed.add_field(name="‚ö†Ô∏è L·ªói", value=f"L·ªói timeout: {str(e)}", inline=False)

    else:  # H√≤a
        final_embed.add_field(
            name="ü§ù K·∫øt qu·∫£ h√≤a", 
            value="Ho√†n l·∫°i ti·ªÅn c∆∞·ª£c", 
            inline=True)

        # Th√™m hi·ªáu ·ª©ng h√≤a
        draw_animation = "```\n" + \
                       "   üîÑ   \n" + \
                       "  ü§ùü§ù  \n" + \
                       "üîÑ ü§ù üîÑ\n" + \
                       "  ü§ùü§ù  \n" + \
                       "   üîÑ   \n" + \
                       "```"
        final_embed.description = f"{ctx.author.mention} v√† bot h√≤a nhau!\n\n{draw_animation}"
        final_embed.set_footer(text="H√≤a nhau! H√£y th·ª≠ l·∫°i ƒë·ªÉ ph√¢n ƒë·ªãnh th·∫Øng thua!")

    # Hi·ªÉn th·ªã s·ªë d∆∞ hi·ªán t·∫°i
    final_embed.add_field(
        name="üíº S·ªë d∆∞ hi·ªán t·∫°i", 
        value=f"**{currency[user_id]} xu**", 
        inline=True)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    await message.edit(embed=final_embed)

class CaroView(discord.ui.View):
    def __init__(self, player1, player2, bet):
        super().__init__(timeout=180)
        self.player1 = player1
        self.player2 = player2
        self.bet = bet
        self.current_player = player1
        self.board = [[" " for _ in range(5)] for _ in range(5)]
        self.game_over = False
        self.setup_board()

    def setup_board(self):
        for i in range(5):
            for j in range(5):
                button = discord.ui.Button(label="\u200b", style=discord.ButtonStyle.secondary, row=i, custom_id=f"{i}-{j}")
                button.callback = self.button_callback
                self.add_item(button)

    async def button_callback(self, interaction: discord.Interaction):
        if interaction.user not in [self.player1, self.player2]:
            await interaction.response.send_message("B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ch∆°i trong tr·∫≠n n√†y!", ephemeral=True)
            return

        if self.game_over:
            await interaction.response.send_message("Tr√≤ ch∆°i ƒë√£ k·∫øt th√∫c!", ephemeral=True)
            return

        if interaction.user != self.current_player:
            await interaction.response.send_message("Ch∆∞a ƒë·∫øn l∆∞·ª£t c·ªßa b·∫°n!", ephemeral=True)
            return

        # Get button position from custom_id
        custom_id = interaction.data["custom_id"]
        i, j = map(int, custom_id.split("-"))

        if self.board[i][j] != " ":
            return

        # Find the button from the view's children
        button = None
        for child in self.children:
            if child.custom_id == custom_id:
                button = child
                break

        # Update board
        symbol = "X" if self.current_player == self.player1 else "O"
        self.board[i][j] = symbol
        button.label = symbol
        button.disabled = True
        button.style = discord.ButtonStyle.danger if symbol == "X" else discord.ButtonStyle.success

        # Check win
        if self.check_win(i, j, symbol):
            winner = self.current_player
            loser = self.player2 if winner == self.player1 else self.player1

            # Update currency
            currency[winner.id] += self.bet * 2
            currency[loser.id] -= self.bet

            # Timeout loser for 5 minutes
            try:
                timeout_until = discord.utils.utcnow() + timedelta(minutes=5)
                await loser.timeout(timeout_until, reason=f"Thua Caro PvP v·ªõi {winner.display_name}")
                timeout_applied = True
            except:
                timeout_applied = False

            embed = discord.Embed(
                title="üéÆ Caro PvP - K·∫øt th√∫c!",
                description=f"üéâ {winner.mention} ƒë√£ chi·∫øn th·∫Øng!",
                color=discord.Color.green()
            )
            embed.add_field(name="Ph·∫ßn th∆∞·ªüng", value=f"+{self.bet * 2} xu", inline=True)
            if timeout_applied:
                embed.add_field(name="H√¨nh ph·∫°t", value=f"{loser.mention} b·ªã timeout 5 ph√∫t", inline=True)
            self.game_over = True

            # Disable all buttons
            for child in self.children:
                child.disabled = True

            await interaction.response.edit_message(embed=embed, view=self)
            return

        # Switch player
        self.current_player = self.player2 if self.current_player == self.player1 else self.player1

        # Update embed
        embed = discord.Embed(
            title="üéÆ Caro PvP",
            description=f"L∆∞·ª£t c·ªßa {self.current_player.mention}",
            color=discord.Color.blue()
        )
        await interaction.response.edit_message(embed=embed, view=self)

    def check_win(self, x, y, symbol):
        # Check row
        if all(self.board[x][j] == symbol for j in range(5)):
            return True

        # Check column
        if all(self.board[i][y] == symbol for i in range(5)):
            return True

        # Check diagonals
        if x == y and all(self.board[i][i] == symbol for i in range(5)):
            return True
        if x + y == 4 and all(self.board[i][4-i] == symbol for i in range(5)):
            return True

        return False

@bot.command(name='caropvp', aliases=['crpvp'])
@check_channel()
@check_game_enabled('caropvp')
async def caro_pvp(ctx, opponent: discord.Member = None, bet: int = None):
        """Ch∆°i Caro PvP v·ªõi ng∆∞·ªùi ch∆°i kh√°c"""
        if opponent is None or bet is None:
            embed = discord.Embed(
                title="üéØ Caro PvP - H∆∞·ªõng D·∫´n",
                description="Th√°ch ƒë·∫•u ng∆∞·ªùi ch∆°i kh√°c.\nV√≠ d·ª•: `.caropvp @t√™n_ng∆∞·ªùi_ch∆°i 50`",
                color=discord.Color.blue())
            embed.add_field(
                name="C√°ch ch∆°i", 
                value="- Tag ng∆∞·ªùi ch∆°i mu·ªën th√°ch ƒë·∫•u\n- ƒê·∫∑t s·ªë xu mu·ªën c∆∞·ª£c\n- Ng∆∞·ªùi th·∫Øng nh·∫≠n x2 ti·ªÅn c∆∞·ª£c\n- Ng∆∞·ªùi thua m·∫•t ti·ªÅn c∆∞·ª£c v√† b·ªã timeout 5 ph√∫t",
                inline=False)
            await ctx.send(embed=embed)
            return

        # üîπ T·∫°o embed th√°ch ƒë·∫•u
        challenge_embed = discord.Embed(
            title="üéÆ Th√°ch ƒê·∫•u Caro PvP",
            description=f"{ctx.author.mention} th√°ch ƒë·∫•u {opponent.mention} v·ªõi {bet} xu!",
            color=discord.Color.blue()
        )
        challenge_embed.add_field(name="Gi·∫£i th∆∞·ªüng", value=f"Ng∆∞·ªùi th·∫Øng nh·∫≠n {bet} xu", inline=False)
        challenge_embed.add_field(name="H√¨nh ph·∫°t", value="Ng∆∞·ªùi thua b·ªã timeout 5 ph√∫t", inline=False)

        # üîπ T·∫°o View v√† Buttons
        view = discord.ui.View()

        # N√∫t Ch·∫•p nh·∫≠n
        accept_button = discord.ui.Button(label="Ch·∫•p nh·∫≠n", style=discord.ButtonStyle.green, emoji="‚úÖ")
        async def accept_callback(interaction: discord.Interaction):
            if interaction.user != opponent:
                await interaction.response.send_message("B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u!", ephemeral=True)
                return

            # B·∫Øt ƒë·∫ßu game
            game_embed = discord.Embed(
                title="üéÆ Caro PvP",
                description=f"L∆∞·ª£t c·ªßa {ctx.author.mention}",
                color=discord.Color.blue()
            )
            game_embed.add_field(name="B√†n C·ªù", value="B√†n c·ªù s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y", inline=False)  # Placeholder
            await interaction.message.edit(embed=game_embed, view=CaroView(ctx.author, opponent, bet))

        accept_button.callback = accept_callback
        view.add_item(accept_button)

        # N√∫t T·ª´ ch·ªëi
        decline_button = discord.ui.Button(label="T·ª´ ch·ªëi", style=discord.ButtonStyle.red, emoji="‚ùå")
        async def decline_callback(interaction: discord.Interaction):
            if interaction.user != opponent:
                await interaction.response.send_message("B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u!", ephemeral=True)
                return

            decline_embed = discord.Embed(
                title="‚ùå Th√°ch ƒë·∫•u b·ªã t·ª´ ch·ªëi",
                description=f"{opponent.mention} ƒë√£ t·ª´ ch·ªëi th√°ch ƒë·∫•u c·ªßa {ctx.author.mention}",
                color=discord.Color.red()
            )
            await interaction.message.edit(embed=decline_embed, view=None)

        decline_button.callback = decline_callback
        view.add_item(decline_button)

        # üîπ G·ª≠i th√¥ng b√°o th√°ch ƒë·∫•u
        await ctx.send(embed=challenge_embed, view=view)


@bot.command(name='stvhow')
async def how_commands(ctx):
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n c√°c l·ªánh how c√≥ th·ªÉ d√πng ·ªü m·ªçi k√™nh"""
    embed = discord.Embed(
        title="üéØ C√°c L·ªánh ƒêo Ch·ªâ S·ªë",
        description="C√°c l·ªánh gi·∫£i tr√≠ c√≥ th·ªÉ d√πng ·ªü b·∫•t k·ª≥ k√™nh n√†o",
        color=discord.Color.orange())

    embed.add_field(
        name="C√°c l·ªánh c√≥ s·∫µn",
        value=("**`.howgay @ng∆∞·ªùi_d√πng`** - ƒêo ƒë·ªô gay\n"
               "**`.howmad @ng∆∞·ªùi_d√πng`** - ƒêo ƒë·ªô ƒëi√™n\n"
               "**`.howfat @ng∆∞·ªùi_d√πng`** - ƒêo c√¢n n·∫∑ng\n"
               "**`.howheight @ng∆∞·ªùi_d√πng`** - ƒêo chi·ªÅu cao\n"
               "**`.howiq @ng∆∞·ªùi_d√πng`** - ƒêo ch·ªâ s·ªë IQ\n"
               "**`.howperson @ng∆∞·ªùi_d√πng`** - Ph√¢n t√≠ch t√≠nh c√°ch\n"
               "**`.howprb @ng∆∞·ªùi_d√πng`** - ƒêo t·ª≠u l∆∞·ª£ng ng∆∞·ªùi kh√°c\n"
               "**`.howstupid @ng∆∞·ªùi_d√πng`** - ƒêo ƒë·ªô ngu ng∆∞·ªùi kh√°c\n"
               "**`.howretarded @ng∆∞·ªùi_d√πng`** - ƒêo thi·ªÉu nƒÉng ng∆∞·ªùi kh√°c\n"
               "**`.howdamde @ng∆∞·ªùi_d√πng`** - ƒêo ƒë·ªô d√¢m d√™"),
               
               
        inline=False)

    embed.add_field(
        name="C√°ch s·ª≠ d·ª•ng",
        value=
        "Tag m·ªôt ng∆∞·ªùi d√πng ƒë·ªÉ ƒëo ch·ªâ s·ªë c·ªßa h·ªç, ho·∫∑c b·ªè tr·ªëng ƒë·ªÉ ƒëo ch·ªâ s·ªë c·ªßa b·∫£n th√¢n.",
        inline=False)

    embed.set_footer(text="C√°c k·∫øt qu·∫£ n√†y ch·ªâ mang t√≠nh ch·∫•t gi·∫£i tr√≠")

    await ctx.send(embed=embed)


@bot.command(name='stvp')
async def play_music(ctx, *, query=None):
    """Ph√°t nh·∫°c t·ª´ YouTube, SoundCloud, Spotify v√† nhi·ªÅu ngu·ªìn kh√°c"""
    if query is None:
        embed = discord.Embed(
            title="üéµ Ph√°t nh·∫°c - H∆∞·ªõng d·∫´n",
            description="Ph√°t nh·∫°c t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau v√† th√™m v√†o h√†ng ƒë·ª£i",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.stvp [t√™n b√†i h√°t/URL]`\nV√≠ d·ª•: `.stvp C√≥ Ch·∫Øc Y√™u L√† ƒê√¢y`",
            inline=False
        )
        embed.add_field(
            name="üîó C√°c ngu·ªìn ƒë∆∞·ª£c h·ªó tr·ª£",
            value="‚Ä¢ YouTube (video & playlist)\n‚Ä¢ SoundCloud (tracks, albums & playlists)\n‚Ä¢ Spotify (tracks, albums & playlists)\n‚Ä¢ Direct links (MP3, WAV, M4A, etc.)",
            inline=False
        )
        embed.add_field(
            name="üìã Qu·∫£n l√Ω h√†ng ƒë·ª£i",
            value="`.stvq` - Xem h√†ng ƒë·ª£i\n`.stvclear` - X√≥a h√†ng ƒë·ª£i\n`.stvskip` - Chuy·ªÉn b√†i ti·∫øp theo\n`.stvvol [1-100]` - ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng",
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ v√†o k√™nh voice ch∆∞a
    if not ctx.author.voice:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n c·∫ßn v√†o k√™nh voice tr∆∞·ªõc khi ph√°t nh·∫°c.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    voice_channel = ctx.author.voice.channel
    
    # Ki·ªÉm tra voice client hi·ªán t·∫°i
    voice_client = discord.utils.get(bot.voice_clients, guild=ctx.guild)
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang ·ªü trong k√™nh voice c·ªßa bot kh√¥ng (n·∫øu bot ƒë√£ k·∫øt n·ªëi s·∫µn)
    if voice_client and voice_client.is_connected() and ctx.author.voice.channel != voice_client.channel:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n ph·∫£i ·ªü c√πng k√™nh voice v·ªõi bot ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # X√°c ƒë·ªãnh lo·∫°i link (URL ho·∫∑c t√¨m ki·∫øm)
    is_url = False
    url_type = "search"
    is_playlist = False
    query_display = query
    original_query = query
    
    # C√°c m·∫´u URL th√¥ng d·ª•ng
    url_patterns = {
        "youtube": r"(youtu\.be\/|youtube\.com\/(watch\?v=|embed\/|v\/|shorts\/))",
        "youtube_playlist": r"youtube\.com\/(playlist\?list=)",
        "spotify": r"(open\.spotify\.com\/(track|album|playlist)\/)",
        "soundcloud": r"(soundcloud\.com\/[\w-]+\/([\w-]+)(?!\/(sets|albums)))",  # Track ƒë∆°n l·∫ª
        "soundcloud_album": r"(soundcloud\.com\/[\w-]+\/(sets|albums)\/[\w-]+)",  # Album/playlist
        "bandcamp": r"(\w+\.bandcamp\.com\/)",
        "direct_link": r"(\.mp3|\.wav|\.ogg|\.aac|\.m4a|\.flac)(\?[\w=&]*)?$"
    }
    
    # Ki·ªÉm tra lo·∫°i URL
    for url_name, pattern in url_patterns.items():
        if re.search(pattern, query, re.IGNORECASE):
            is_url = True
            url_type = url_name
            if url_name in ["youtube_playlist", "soundcloud_album", "spotify"] and "playlist" in query:
                is_playlist = True
            break
    
    # G·ª≠i th√¥ng b√°o ƒëang x·ª≠ l√Ω
    processing_embed = discord.Embed(
        title="üîç ƒêang x·ª≠ l√Ω...",
        color=discord.Color.blue()
    )
    
    # Hi·ªÉn th·ªã th√¥ng tin ph√π h·ª£p d·ª±a tr√™n lo·∫°i URL
    if is_url:
        if url_type == "soundcloud":
            processing_embed.description = f"ƒêang x·ª≠ l√Ω track SoundCloud..."
            processing_embed.add_field(
                name="üîó Link",
                value=query[:100] + "..." if len(query) > 100 else query,
                inline=False
            )
        elif url_type == "soundcloud_album":
            processing_embed.description = f"ƒêang x·ª≠ l√Ω album/playlist SoundCloud..."
            processing_embed.add_field(
                name="üîó Link",
                value=query[:100] + "..." if len(query) > 100 else query,
                inline=False
            )
            processing_embed.add_field(
                name="‚è≥ Th√¥ng b√°o",
                value="Vi·ªác t·∫£i album c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian h∆°n, vui l√≤ng ch·ªù...",
                inline=False
            )
        elif url_type == "spotify":
            # Tr√≠ch xu·∫•t t√™n t·ª´ ph·∫ßn cu·ªëi URL
            try:
                # Extract Spotify ID and type
                spotify_parts = query.split('/')
                spotify_type = ""
                spotify_id = ""
                
                # Find the type (track, album, playlist)
                for i, part in enumerate(spotify_parts):
                    if part in ["track", "album", "playlist"]:
                        spotify_type = part
                        if i+1 < len(spotify_parts):
                            spotify_id = spotify_parts[i+1].split('?')[0]  # Remove query params
                        break
                
                if spotify_id:
                    processing_embed.description = f"ƒêang x·ª≠ l√Ω {spotify_type} Spotify..."
                    query_display = f"Spotify {spotify_type}: {spotify_id}"
                else:
                    processing_embed.description = "ƒêang x·ª≠ l√Ω link Spotify..."
                
                processing_embed.add_field(
                    name="üîó Link",
                    value=query[:100] + "..." if len(query) > 100 else query,
                    inline=False
                )
                
                processing_embed.add_field(
                    name="‚ö†Ô∏è L∆∞u √Ω",
                    value="Spotify ƒë∆∞·ª£c x·ª≠ l√Ω th√¥ng qua YouTube, c√≥ th·ªÉ m·∫•t th√™m th·ªùi gian",
                    inline=False
                )
            except Exception as e:
                processing_embed.description = "ƒêang x·ª≠ l√Ω link Spotify..."
                processing_embed.add_field(
                    name="‚ö†Ô∏è L∆∞u √Ω", 
                    value="Link Spotify kh√¥ng ƒë∆∞·ª£c ph√¢n t√≠ch ƒë√∫ng, ƒëang th·ª≠ chuy·ªÉn ƒë·ªïi...",
                    inline=False
                )
        elif url_type == "youtube":
            processing_embed.description = "ƒêang x·ª≠ l√Ω video YouTube..."
            processing_embed.add_field(
                name="üîó Link",
                value=query[:100] + "..." if len(query) > 100 else query,
                inline=False
            )
        elif url_type == "youtube_playlist":
            processing_embed.description = "ƒêang x·ª≠ l√Ω playlist YouTube..."
            processing_embed.add_field(
                name="üîó Link",
                value=query[:100] + "..." if len(query) > 100 else query,
                inline=False
            )
        elif url_type == "direct_link":
            processing_embed.description = "ƒêang x·ª≠ l√Ω file nh·∫°c tr·ª±c ti·∫øp..."
            processing_embed.add_field(
                name="üîó Link",
                value=query[:100] + "..." if len(query) > 100 else query,
                inline=False
            )
    else:
        processing_embed.description = f"ƒêang t√¨m ki·∫øm: `{query}`"
    
    processing_msg = await ctx.send(embed=processing_embed)
    
    try:
        # K·∫øt n·ªëi t·ªõi k√™nh voice n·∫øu ch∆∞a k·∫øt n·ªëi
        if not voice_client:
            voice_client = await voice_channel.connect()
        
        # Ki·ªÉm tra file cookies.txt t·ªìn t·∫°i
        cookies_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'cookies.txt')
        has_cookies = os.path.isfile(cookies_path)
        
        # Chu·∫©n b·ªã c·∫•u h√¨nh yt-dlp v·ªõi timeout v√† nhi·ªÅu ph∆∞∆°ng th·ª©c bypass
        ydl_opts = {
            'format': 'bestaudio/best',
            'noplaylist': not is_playlist,  # Cho ph√©p x·ª≠ l√Ω playlist n·∫øu URL l√† playlist
            'quiet': True,
            'no_warnings': True,
            'extract_flat': False,  # Kh√¥ng extract_flat cho album SoundCloud ƒë·ªÉ l·∫•y t·∫•t c·∫£ tracks
            'default_search': 'auto',
            'geo_bypass': True,
            'geo_bypass_country': 'US',
            'socket_timeout': 20,  # TƒÉng timeout cho album
            'extractor_retries': 3,  # TƒÉng s·ªë l·∫ßn retry cho album
            'http_headers': {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
                'Accept-Language': 'en-US,en;q=0.9',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
                'Origin': 'https://www.youtube.com',
                'Referer': 'https://www.youtube.com/'
            }
        }
        
        # Th√™m cookies n·∫øu c√≥
        if has_cookies:
            ydl_opts['cookiefile'] = cookies_path
        
        # S·ª≠ d·ª•ng asyncio v·ªõi timeout ƒë·ªÉ tr√°nh treo bot
        async def extract_info_with_timeout():
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                return await bot.loop.run_in_executor(
                    None, 
                    lambda: ydl.extract_info(query, download=False)
                )
                
        # Ch·∫°y tr√≠ch xu·∫•t th√¥ng tin v·ªõi timeout
        try:
            info = await asyncio.wait_for(extract_info_with_timeout(), timeout=30.0)
            
            # X·ª≠ l√Ω n·∫øu l√† playlist/album
            if url_type == "soundcloud_album" or (is_playlist and "entries" in info):
                playlist_embed = discord.Embed(
                    title="üìã ƒêang th√™m playlist v√†o h√†ng ƒë·ª£i",
                    description=f"**{info.get('title', 'Playlist')}**",
                    color=discord.Color.blue()
                )
                
                entries = info.get("entries", [])
                playlist_embed.add_field(
                    name="üéµ S·ªë b√†i h√°t",
                    value=f"{len(entries)} b√†i h√°t",
                    inline=True
                )
                
                playlist_embed.add_field(
                    name="‚è≥ Tr·∫°ng th√°i",
                    value="ƒêang th√™m v√†o h√†ng ƒë·ª£i...",
                    inline=True
                )
                
                await processing_msg.edit(embed=playlist_embed)
                
                # Gi·ªõi h·∫°n s·ªë b√†i h√°t t·ª´ playlist ƒë·ªÉ tr√°nh spam
                max_tracks = 20
                if len(entries) > max_tracks:
                    entries = entries[:max_tracks]
                    playlist_embed.add_field(
                        name="‚ö†Ô∏è Gi·ªõi h·∫°n",
                        value=f"Ch·ªâ th√™m {max_tracks} b√†i h√°t ƒë·∫ßu ti√™n ƒë·ªÉ tr√°nh qu√° t·∫£i",
                        inline=False
                    )
                
                # Kh·ªüi t·∫°o h√†ng ƒë·ª£i n·∫øu ch∆∞a t·ªìn t·∫°i
                guild_id = ctx.guild.id
                if guild_id not in music_queues:
                    music_queues[guild_id] = []
                
                # Th√™m t·ª´ng b√†i h√°t v√†o h√†ng ƒë·ª£i
                first_track = None
                added_count = 0
                
                for entry in entries:
                    try:
                        # Skip entries without all needed information
                        if not entry.get("title") or not entry.get("url"):
                            continue
                            
                        # Create song object
                        song = SongInfo(
                            entry.get("title", "Unknown"),
                            entry.get("url"),
                            entry.get("duration", 0),
                            entry.get("thumbnail", ""),
                            requester=ctx.author
                        )
                        
                        # Save the first valid track
                        if not first_track:
                            first_track = song
                        
                        # Add to queue
                        music_queues[guild_id].append(song)
                        added_count += 1
                        
                    except Exception as e:
                        print(f"Error adding track from playlist: {e}")
                
                # Start playing if not already playing
                is_playing = voice_client.is_playing()
                if not is_playing and first_track:
                    await play_next(ctx, voice_client, first_track)
                
                # Update embed with final status
                final_playlist_embed = discord.Embed(
                    title="‚úÖ Playlist ƒë√£ ƒë∆∞·ª£c th√™m v√†o h√†ng ƒë·ª£i",
                    description=f"**{info.get('title', 'Playlist')}**",
                    color=discord.Color.green()
                )
                
                final_playlist_embed.add_field(
                    name="üéµ ƒê√£ th√™m",
                    value=f"{added_count} b√†i h√°t",
                    inline=True
                )
                
                final_playlist_embed.add_field(
                    name="üë§ Y√™u c·∫ßu b·ªüi",
                    value=ctx.author.mention,
                    inline=True
                )
                
                if first_track:
                    final_playlist_embed.add_field(
                        name="‚ñ∂Ô∏è ƒêang ph√°t ƒë·∫ßu ti√™n" if not is_playing else "üéµ B√†i ƒë·∫ßu ti√™n",
                        value=f"**{first_track.title}**",
                        inline=False
                    )
                
                final_playlist_embed.set_footer(text="S·ª≠ d·ª•ng .stvq ƒë·ªÉ xem to√†n b·ªô h√†ng ƒë·ª£i")
                
                await processing_msg.edit(embed=final_playlist_embed)
                return
            
            # X·ª≠ l√Ω cho m·ªôt b√†i h√°t ƒë∆°n l·∫ª (kh√¥ng ph·∫£i playlist)
            if "entries" in info:
                info = info["entries"][0]
            
            url = info["url"]
            title = info["title"]
            duration = info.get("duration", 0)
            thumbnail = info.get("thumbnail", "")
        except asyncio.TimeoutError:
            # X·ª≠ l√Ω khi timeout
            timeout_embed = discord.Embed(
                title="‚è±Ô∏è Qu√° th·ªùi gian x·ª≠ l√Ω",
                description="X·ª≠ l√Ω b√†i h√°t m·∫•t qu√° nhi·ªÅu th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c th·ª≠ m·ªôt b√†i h√°t kh√°c.",
                color=discord.Color.red()
            )
            
            await processing_msg.edit(embed=timeout_embed)
            return
        
        # T·∫°o ƒë·ªëi t∆∞·ª£ng b√†i h√°t
        song = SongInfo(title, url, duration, thumbnail, requester=ctx.author)
        
        # Kh·ªüi t·∫°o h√†ng ƒë·ª£i n·∫øu ch∆∞a t·ªìn t·∫°i cho guild n√†y
        guild_id = ctx.guild.id
        if guild_id not in music_queues:
            music_queues[guild_id] = []
        
        # Ki·ªÉm tra xem c√≥ ƒëang ph√°t nh·∫°c hay kh√¥ng
        is_playing = voice_client.is_playing()
        
        # Th√™m b√†i h√°t v√†o h√†ng ƒë·ª£i
        music_queues[guild_id].append(song)
        
        # N·∫øu kh√¥ng ph√°t nh·∫°c, b·∫Øt ƒë·∫ßu ph√°t
        if not is_playing:
            await play_next(ctx, voice_client, song)
            play_embed = discord.Embed(
                title="üéµ ƒêang ph√°t nh·∫°c",
                description=f"**{title}**",
                color=discord.Color.green()
            )
            
            # ƒê·ªãnh d·∫°ng th·ªùi l∆∞·ª£ng th√†nh mm:ss
            minutes = int(duration // 60)
            seconds = int(duration % 60)
            duration_str = f"{minutes}:{seconds:02d}" if duration else "Kh√¥ng x√°c ƒë·ªãnh"
            
            play_embed.add_field(
                name="‚è±Ô∏è Th·ªùi l∆∞·ª£ng",
                value=duration_str,
                inline=True
            )
            
            play_embed.add_field(
                name="üîä √Çm l∆∞·ª£ng",
                value="50%",
                inline=True
            )
            
            play_embed.add_field(
                name="üéß K√™nh voice",
                value=voice_channel.name,
                inline=True
            )
            
            if thumbnail:
                play_embed.set_thumbnail(url=thumbnail)
            
            # Hi·ªÉn th·ªã ngu·ªìn nh·∫°c
            if url_type == "soundcloud":
                play_embed.add_field(
                    name="üéµ Ngu·ªìn",
                    value="SoundCloud",
                    inline=True
                )
            elif url_type == "spotify":
                play_embed.add_field(
                    name="üéµ Ngu·ªìn",
                    value="Spotify (qua YouTube)",
                    inline=True
                )
            elif url_type == "youtube" or url_type == "youtube_playlist":
                play_embed.add_field(
                    name="üéµ Ngu·ªìn",
                    value="YouTube",
                    inline=True
                )
            
            play_embed.set_footer(text=f"Y√™u c·∫ßu b·ªüi: {ctx.author.display_name}")
            await processing_msg.edit(embed=play_embed)
        else:
            # B√†i h√°t ƒë√£ ƒë∆∞·ª£c th√™m v√†o h√†ng ƒë·ª£i
            queue_position = len(music_queues[guild_id]) - 1
            queue_embed = discord.Embed(
                title="üéµ ƒê√£ th√™m v√†o h√†ng ƒë·ª£i",
                description=f"**{title}**",
                color=discord.Color.blue()
            )
            
            # ƒê·ªãnh d·∫°ng th·ªùi l∆∞·ª£ng th√†nh mm:ss
            minutes = int(duration // 60)
            seconds = int(duration % 60)
            duration_str = f"{minutes}:{seconds:02d}" if duration else "Kh√¥ng x√°c ƒë·ªãnh"
            
            queue_embed.add_field(
                name="‚è±Ô∏è Th·ªùi l∆∞·ª£ng",
                value=duration_str,
                inline=True
            )
            
            queue_embed.add_field(
                name="üìä V·ªã tr√≠ trong h√†ng ƒë·ª£i",
                value=f"#{queue_position + 1}",
                inline=True
            )
            
            queue_embed.add_field(
                name="üë§ Y√™u c·∫ßu b·ªüi",
                value=ctx.author.mention,
                inline=True
            )
            
            # Hi·ªÉn th·ªã ngu·ªìn nh·∫°c
            if url_type == "soundcloud":
                queue_embed.add_field(
                    name="üéµ Ngu·ªìn",
                    value="SoundCloud",
                    inline=True
                )
            elif url_type == "spotify":
                queue_embed.add_field(
                    name="üéµ Ngu·ªìn",
                    value="Spotify (qua YouTube)",
                    inline=True
                )
            elif url_type == "youtube" or url_type == "youtube_playlist":
                queue_embed.add_field(
                    name="üéµ Ngu·ªìn",
                    value="YouTube",
                    inline=True
                )
            
            if thumbnail:
                queue_embed.set_thumbnail(url=thumbnail)
                
            queue_embed.set_footer(text="S·ª≠ d·ª•ng .stvq ƒë·ªÉ xem to√†n b·ªô h√†ng ƒë·ª£i")
            
            await processing_msg.edit(embed=queue_embed)
    
    except Exception as e:
        error_embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng th·ªÉ ph√°t nh·∫°c t·ª´ ngu·ªìn n√†y!",
            color=discord.Color.red()
        )
        
        # Th√™m th√¥ng tin chi ti·∫øt v·ªÅ l·ªói
        error_message = str(e)
        error_embed.add_field(
            name="Chi ti·∫øt l·ªói",
            value=error_message[:1000] if error_message else "Kh√¥ng c√≥ th√¥ng tin l·ªói",
            inline=False
        )
        
        # Th√™m g·ª£i √Ω kh·∫Øc ph·ª•c d·ª±a v√†o lo·∫°i l·ªói
        if "soundcloud" in query.lower():
            error_embed.add_field(
                name="üîß Kh·∫Øc ph·ª•c cho SoundCloud",
                value="- ƒê·∫£m b·∫£o album/playlist SoundCloud kh√¥ng b·ªã private\n- Th·ª≠ refresh l·∫°i trang SoundCloud v√† l·∫•y link m·ªõi\n- N·∫øu v·∫´n l·ªói, th·ª≠ t√¨m ki·∫øm b√†i h√°t t∆∞∆°ng t·ª±: `.stvp [t√™n b√†i h√°t]`",
                inline=False
            )
        elif "spotify" in query.lower():
            error_embed.add_field(
                name="üîß Kh·∫Øc ph·ª•c cho Spotify",
                value="- ƒê·∫£m b·∫£o link Spotify ho·∫°t ƒë·ªông v√† b√†i h√°t c√≥ th·ªÉ ph√°t\n- Th·ª≠ t√¨m ki·∫øm b√†i h√°t tr·ª±c ti·∫øp: `.stvp " + (info.get("title", "") if 'info' in locals() else original_query.split('/')[-1].replace('-', ' ')) + "`",
                inline=False
            )
        elif "DRM" in error_message:
            error_embed.add_field(
                name="üîß Kh·∫Øc ph·ª•c",
                value="N·ªôi dung c√≥ b·∫£o v·ªá DRM kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp. Th·ª≠ ph√°t l·∫°i v·ªõi l·ªánh: `.stvp " + original_query.split('/')[-1].replace('-', ' ') + "`",
                inline=False
            )
        elif "Sign in" in error_message or "not available" in error_message:
            error_embed.add_field(
                name="üîß Kh·∫Øc ph·ª•c",
                value="Video/playlist n√†y y√™u c·∫ßu ƒëƒÉng nh·∫≠p ho·∫∑c c√≥ gi·ªõi h·∫°n ƒë·ªô tu·ªïi. H√£y th·ª≠ video kh√°c.",
                inline=False
            )
        else:
            error_embed.add_field(
                name="üîß Kh·∫Øc ph·ª•c",
                value="H√£y th·ª≠ l·∫°i v·ªõi m·ªôt video ho·∫∑c URL kh√°c.",
                inline=False
            )
        
        await processing_msg.edit(embed=error_embed)
        print(f"Music error: {str(e)}")

# H√†m ƒë·ªÉ ph√°t b√†i h√°t ti·∫øp theo trong h√†ng ƒë·ª£i
async def play_next(ctx, voice_client, current_song=None):
    """Ph√°t b√†i h√°t ti·∫øp theo trong h√†ng ƒë·ª£i"""
    guild_id = ctx.guild.id
    
    # L∆∞u b√†i h√°t hi·ªán t·∫°i
    if current_song:
        current_playing[guild_id] = current_song
    
    # Chu·∫©n b·ªã ngu·ªìn ph√°t v·ªõi FFMPEG v√† t√πy ch·ªçn th√™m
    ffmpeg_options = {
        'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
        'options': '-vn'
    }
    source = discord.FFmpegPCMAudio(current_song.url, **ffmpeg_options)
    
    # T·∫°o m·ªôt AudioSource c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng
    audio = discord.PCMVolumeTransformer(source, volume=current_song.volume)
    
    # ƒê·ªãnh nghƒ©a callback ƒë·ªÉ ph√°t b√†i ti·∫øp theo khi b√†i hi·ªán t·∫°i k·∫øt th√∫c
    def after_playing(error):
        if error:
            print(f'Player error: {error}')
        
        # X√≥a b√†i h√°t ƒë·∫ßu ti√™n kh·ªèi h√†ng ƒë·ª£i (b√†i v·ª´a ph√°t xong)
        if guild_id in music_queues and music_queues[guild_id]:
            music_queues[guild_id].pop(0)
        
        # Ki·ªÉm tra xem c√≤n b√†i n√†o trong h√†ng ƒë·ª£i kh√¥ng
        if guild_id in music_queues and music_queues[guild_id]:
            next_song = music_queues[guild_id][0]
            
            # S·ª≠ d·ª•ng bot.loop.create_task thay v√¨ asyncio.run_coroutine_threadsafe
            # v√¨ ch√∫ng ta ƒëang ·ªü trong m·ªôt callback kh√¥ng ƒë·ªìng b·ªô
            coro = play_next(ctx, voice_client, next_song)
            bot.loop.create_task(coro)
        else:
            # Kh√¥ng c√≤n b√†i h√°t trong h√†ng ƒë·ª£i
            if guild_id in current_playing:
                del current_playing[guild_id]
    
    # Ph√°t nh·∫°c v·ªõi callback
    voice_client.play(audio, after=after_playing)

@bot.command(name='stvskip')
async def skip_song(ctx):
    """B·ªè qua b√†i h√°t hi·ªán t·∫°i"""
    voice_client = discord.utils.get(bot.voice_clients, guild=ctx.guild)
    
    if not voice_client or not voice_client.is_connected():
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Bot kh√¥ng ƒëang ph√°t nh·∫°c!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
        
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang ·ªü trong k√™nh voice c·ªßa bot kh√¥ng
    if not ctx.author.voice or ctx.author.voice.channel != voice_client.channel:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n ph·∫£i ·ªü c√πng k√™nh voice v·ªõi bot ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
        
    if not voice_client.is_playing():
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # D·ª´ng b√†i h√°t hi·ªán t·∫°i - callback s·∫Ω t·ª± ƒë·ªông ph√°t b√†i ti·∫øp theo
    voice_client.stop()
    
    embed = discord.Embed(
        title="‚è≠Ô∏è ƒê√£ b·ªè qua",
        description="ƒêang chuy·ªÉn sang b√†i h√°t ti·∫øp theo...",
        color=discord.Color.green())
    await ctx.send(embed=embed)

@bot.command(name='stvpcookies')
@commands.has_permissions(administrator=True)
async def setup_cookies(ctx, browser: str = None):
    """Thi·∫øt l·∫≠p cookies cho YouTube t·ª´ tr√¨nh duy·ªát"""
    if browser is None:
        embed = discord.Embed(
            title="üç™ Thi·∫øt l·∫≠p Cookies YouTube",
            description="Thi·∫øt l·∫≠p cookies ƒë·ªÉ x√°c th·ª±c v·ªõi YouTube",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.stvpcookies [t√™n tr√¨nh duy·ªát]`\n"
                  "C√°c tr√¨nh duy·ªát h·ªó tr·ª£: chrome, firefox, edge, safari, opera",
            inline=False
        )
        embed.add_field(
            name="V√≠ d·ª•",
            value="`.stvpcookies chrome`",
            inline=False
        )
        embed.add_field(
            name="L∆∞u √Ω",
            value="- B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p YouTube tr√™n tr√¨nh duy·ªát tr∆∞·ªõc\n"
                  "- Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ th·ªÉ thi·∫øt l·∫≠p cookies",
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    browser = browser.lower()
    supported_browsers = ['chrome', 'firefox', 'edge', 'safari', 'opera', 'brave']
    
    if browser not in supported_browsers:
        embed = discord.Embed(
            title="‚ùå Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£",
            description=f"Tr√¨nh duy·ªát `{browser}` kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.",
            color=discord.Color.red()
        )
        embed.add_field(
            name="Tr√¨nh duy·ªát ƒë∆∞·ª£c h·ªó tr·ª£",
            value=", ".join(supported_browsers),
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    # L∆∞u tr·ªØ c·∫•u h√¨nh cookies v√†o bi·∫øn to√†n c·ª•c
    global yt_cookies_browser
    yt_cookies_browser = browser
    
    embed = discord.Embed(
        title="‚úÖ ƒê√£ thi·∫øt l·∫≠p cookies",
        description=f"ƒê√£ thi·∫øt l·∫≠p s·ª≠ d·ª•ng cookies t·ª´ tr√¨nh duy·ªát **{browser}**.",
        color=discord.Color.green()
    )
    embed.add_field(
        name="S·ª≠ d·ª•ng",
        value="B√¢y gi·ªù b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng `.stvp [t√™n b√†i h√°t]` ƒë·ªÉ ph√°t nh·∫°c.",
        inline=False
    )
    await ctx.send(embed=embed)


@bot.command(name='stvstop')
async def stop_music(ctx):
    """D·ª´ng ph√°t nh·∫°c v√† r·ªùi kh·ªèi k√™nh voice"""
    voice_client = discord.utils.get(bot.voice_clients, guild=ctx.guild)
    
    if not voice_client or not voice_client.is_connected():
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Bot kh√¥ng ·ªü trong k√™nh voice n√†o.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang ·ªü trong k√™nh voice c·ªßa bot kh√¥ng
    if not ctx.author.voice or ctx.author.voice.channel != voice_client.channel:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n ph·∫£i ·ªü c√πng k√™nh voice v·ªõi bot ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # X√≥a h√†ng ƒë·ª£i v√† ng·∫Øt k·∫øt n·ªëi
    guild_id = ctx.guild.id
    if guild_id in music_queues:
        music_queues[guild_id] = []
    
    if guild_id in current_playing:
        del current_playing[guild_id]
    
    await voice_client.disconnect()
    
    embed = discord.Embed(
        title="üõë ƒê√£ d·ª´ng ph√°t nh·∫°c",
        description="Bot ƒë√£ r·ªùi kh·ªèi k√™nh voice v√† x√≥a h√†ng ƒë·ª£i.",
        color=discord.Color.green())
    await ctx.send(embed=embed)


@bot.command(name='stvpause')
async def pause_music(ctx):
    """T·∫°m d·ª´ng b√†i h√°t hi·ªán t·∫°i"""
    voice_client = discord.utils.get(bot.voice_clients, guild=ctx.guild)
    
    if not voice_client or not voice_client.is_connected():
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Bot kh√¥ng ƒëang ph√°t nh·∫°c!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
        
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang ·ªü trong k√™nh voice c·ªßa bot kh√¥ng
    if not ctx.author.voice or ctx.author.voice.channel != voice_client.channel:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n ph·∫£i ·ªü c√πng k√™nh voice v·ªõi bot ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
        
    if voice_client.is_playing():
        voice_client.pause()
        embed = discord.Embed(
            title="‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng",
            description="ƒê√£ t·∫°m d·ª´ng ph√°t nh·∫°c.",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!",
            color=discord.Color.red())
        await ctx.send(embed=embed)

@bot.command(name='stvresume')
async def resume_music(ctx):
    """Ti·∫øp t·ª•c ph√°t b√†i h√°t ƒëang t·∫°m d·ª´ng"""
    voice_client = discord.utils.get(bot.voice_clients, guild=ctx.guild)
    
    if not voice_client or not voice_client.is_connected():
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Bot kh√¥ng ƒëang ph√°t nh·∫°c!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
        
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang ·ªü trong k√™nh voice c·ªßa bot kh√¥ng
    if not ctx.author.voice or ctx.author.voice.channel != voice_client.channel:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n ph·∫£i ·ªü c√πng k√™nh voice v·ªõi bot ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
        
    if voice_client.is_paused():
        voice_client.resume()
        embed = discord.Embed(
            title="‚ñ∂Ô∏è ƒê√£ ti·∫øp t·ª•c",
            description="ƒê√£ ti·∫øp t·ª•c ph√°t nh·∫°c.",
            color=discord.Color.green())
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang t·∫°m d·ª´ng!",
            color=discord.Color.red())
        await ctx.send(embed=embed)


@bot.command(name='stvq', aliases=['stvqueue'])
async def show_queue(ctx):
    """Hi·ªÉn th·ªã danh s√°ch ch·ªù ph√°t nh·∫°c"""
    guild_id = ctx.guild.id
    
    # Ki·ªÉm tra n·∫øu h√†ng ƒë·ª£i kh√¥ng t·ªìn t·∫°i ho·∫∑c tr·ªëng
    if guild_id not in music_queues or len(music_queues[guild_id]) == 0:
        embed = discord.Embed(
            title="üéµ H√†ng ƒê·ª£i Nh·∫°c",
            description="H√†ng ƒë·ª£i tr·ªëng! S·ª≠ d·ª•ng `.stvp [t√™n b√†i/URL]` ƒë·ªÉ th√™m nh·∫°c.",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
        return
    
    queue = music_queues[guild_id]
    
    # T·∫°o embed v·ªõi th√¥ng tin t·ªïng quan
    embed = discord.Embed(
        title="üéµ H√†ng ƒê·ª£i Nh·∫°c",
        description=f"ƒêang c√≥ **{len(queue)}** b√†i h√°t trong h√†ng ƒë·ª£i",
        color=discord.Color.blue())
    
    # T√≠nh t·ªïng th·ªùi l∆∞·ª£ng
    total_duration = sum(song.duration for song in queue if isinstance(song.duration, (int, float)))
    total_minutes = int(total_duration // 60)
    total_seconds = int(total_duration % 60)
    total_hours = total_minutes // 60
    total_minutes %= 60
    
    if total_hours > 0:
        duration_text = f"{total_hours}:{total_minutes:02d}:{total_seconds:02d}"
    else:
        duration_text = f"{total_minutes}:{total_seconds:02d}"
    
    # Th√™m th√¥ng tin t·ªïng th·ªùi l∆∞·ª£ng
    embed.add_field(
        name="‚è±Ô∏è T·ªïng th·ªùi l∆∞·ª£ng",
        value=duration_text,
        inline=True
    )
    
    embed.add_field(
        name="üîä K√™nh voice",
        value=ctx.author.voice.channel.name if ctx.author.voice else "Kh√¥ng x√°c ƒë·ªãnh",
        inline=True
    )
    
    # Hi·ªÉn th·ªã b√†i ƒëang ph√°t
    if queue:
        current_song = queue[0]
        current_duration = current_song.duration if hasattr(current_song, "duration") else 0
        
        # ƒê·ªãnh d·∫°ng th·ªùi l∆∞·ª£ng c·ªßa b√†i hi·ªán t·∫°i
        if isinstance(current_duration, (int, float)):
            minutes = int(current_duration // 60)
            seconds = int(current_duration % 60)
            duration_str = f"{minutes}:{seconds:02d}"
        else:
            duration_str = "Kh√¥ng x√°c ƒë·ªãnh"
        
        # Th√™m th√¥ng tin b√†i ƒëang ph√°t
        embed.add_field(
            name="üîä ƒêang Ph√°t",
            value=(
                f"**{current_song.title if hasattr(current_song, 'title') else 'Kh√¥ng x√°c ƒë·ªãnh'}**\n"
                f"‚è±Ô∏è Th·ªùi l∆∞·ª£ng: {duration_str}\n"
                f"üë§ Y√™u c·∫ßu b·ªüi: {current_song.requester.mention if hasattr(current_song, 'requester') and current_song.requester else 'Kh√¥ng x√°c ƒë·ªãnh'}"
            ),
            inline=False
        )
    
    # Hi·ªÉn th·ªã c√°c b√†i ti·∫øp theo trong h√†ng ƒë·ª£i
    if len(queue) > 1:
        upcoming_songs = []
        
        for i, song in enumerate(queue[1:], 1):
            # Ch·ªâ hi·ªÉn th·ªã 5 b√†i ƒë·∫ßu ti√™n
            if i > 5:
                upcoming_songs.append(f"... v√† {len(queue) - 6} b√†i h√°t kh√°c")
                break
                
            duration = song.duration if hasattr(song, "duration") else 0
            
            # ƒê·ªãnh d·∫°ng th·ªùi l∆∞·ª£ng
            if isinstance(duration, (int, float)):
                minutes = int(duration // 60)
                seconds = int(duration % 60)
                duration_str = f"{minutes}:{seconds:02d}"
            else:
                duration_str = "Kh√¥ng x√°c ƒë·ªãnh"
                
            # ƒê·ªãnh d·∫°ng t√™n b√†i h√°t (gi·ªõi h·∫°n ƒë·ªô d√†i)
            title = song.title if hasattr(song, "title") else "Kh√¥ng x√°c ƒë·ªãnh"
            if len(title) > 50:
                title = title[:47] + "..."
                
            # Th√™m v√†o danh s√°ch
            requester_name = song.requester.display_name if hasattr(song, "requester") and song.requester else "Unknown"
            upcoming_songs.append(f"`{i}.` **{title}** [{duration_str}] ‚Ä¢ Y√™u c·∫ßu: {requester_name}")
        
        # Th√™m danh s√°ch b√†i ti·∫øp theo v√†o embed
        embed.add_field(
            name="üìã Ti·∫øp Theo Trong H√†ng ƒê·ª£i",
            value="\n".join(upcoming_songs),
            inline=False
        )
        
        # Th√™m c√°c n√∫t ƒëi·ªÅu khi·ªÉn
        controls_text = (
            "`.stvskip` - B·ªè qua b√†i hi·ªán t·∫°i\n"
            "`.stvpause` - T·∫°m d·ª´ng ph√°t nh·∫°c\n"
            "`.stvresume` - Ti·∫øp t·ª•c ph√°t nh·∫°c\n"
            "`.stvstop` - D·ª´ng ph√°t v√† x√≥a h√†ng ƒë·ª£i\n"
            "`.stvvol [0-100]` - ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng"
        )
        
        embed.add_field(
            name="üéõÔ∏è ƒêi·ªÅu Khi·ªÉn",
            value=controls_text,
            inline=False
        )
    
    # Th√™m th√¥ng tin b·ªï sung
    embed.set_footer(text="S·ª≠ d·ª•ng .stvp ƒë·ªÉ th√™m b√†i h√°t v√†o h√†ng ƒë·ª£i | .stvclear ƒë·ªÉ x√≥a h√†ng ƒë·ª£i")
    
    # Th√™m h√¨nh ·∫£nh nh·∫°c n·∫øu b√†i ƒë·∫ßu ti√™n c√≥ thumbnail
    if queue and hasattr(queue[0], "thumbnail") and queue[0].thumbnail:
        embed.set_thumbnail(url=queue[0].thumbnail)
    
    # G·ª≠i embed
    await ctx.send(embed=embed)

@bot.command(name='stvclear')
async def clear_queue(ctx):
    """X√≥a danh s√°ch ch·ªù ph√°t nh·∫°c"""
    voice_client = discord.utils.get(bot.voice_clients, guild=ctx.guild)
    
    if not voice_client or not voice_client.is_connected():
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Bot kh√¥ng ƒëang ph√°t nh·∫°c!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
        
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang ·ªü trong k√™nh voice c·ªßa bot kh√¥ng
    if not ctx.author.voice or ctx.author.voice.channel != voice_client.channel:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n ph·∫£i ·ªü c√πng k√™nh voice v·ªõi bot ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    guild_id = ctx.guild.id
    
    if guild_id not in music_queues or len(music_queues[guild_id]) <= 1:
        embed = discord.Embed(
            title="‚ùå H√†ng ƒë·ª£i tr·ªëng",
            description="Kh√¥ng c√≥ b√†i h√°t n√†o trong h√†ng ƒë·ª£i ƒë·ªÉ x√≥a!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # Gi·ªØ b√†i h√°t ƒëang ph√°t, x√≥a t·∫•t c·∫£ c√°c b√†i kh√°c
    current_song = None
    if music_queues[guild_id]:
        current_song = music_queues[guild_id][0]
        music_queues[guild_id] = [current_song]
    
    embed = discord.Embed(
        title="üßπ ƒê√£ x√≥a h√†ng ƒë·ª£i",
        description="ƒê√£ x√≥a t·∫•t c·∫£ b√†i h√°t trong h√†ng ƒë·ª£i.",
        color=discord.Color.green())
    
    if current_song:
        embed.add_field(
            name="üéµ Hi·ªán t·∫°i v·∫´n ƒëang ph√°t", 
            value=f"**{current_song.title}**", 
            inline=False)
    
    await ctx.send(embed=embed)

@bot.command(name='stvvolume', aliases=['stvvol'])
async def change_volume(ctx, volume: int = None):
    """Thay ƒë·ªïi √¢m l∆∞·ª£ng ph√°t nh·∫°c (0-100)"""
    voice_client = discord.utils.get(bot.voice_clients, guild=ctx.guild)
    
    if not voice_client or not voice_client.is_connected():
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Bot kh√¥ng ƒëang ph√°t nh·∫°c!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
        
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang ·ªü trong k√™nh voice c·ªßa bot kh√¥ng
    if not ctx.author.voice or ctx.author.voice.channel != voice_client.channel:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n ph·∫£i ·ªü c√πng k√™nh voice v·ªõi bot ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    if volume is None:
        embed = discord.Embed(
            title="üîä ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng",
            description="S·ª≠ d·ª•ng `.stvvolume [m·ª©c √¢m l∆∞·ª£ng]` v·ªõi m·ª©c t·ª´ 0-100.\nV√≠ d·ª•: `.stvvolume 50`",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
        return
    
    if not 0 <= volume <= 100:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="√Çm l∆∞·ª£ng ph·∫£i n·∫±m trong kho·∫£ng 0-100.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # Set volume (0.0 to 1.0)
    normalized_volume = volume / 100
    
    guild_id = ctx.guild.id
    if guild_id in music_queues and music_queues[guild_id]:
        for player in music_queues[guild_id]:
            player.volume = normalized_volume
    
    embed = discord.Embed(
        title="üîä √Çm l∆∞·ª£ng",
        description=f"ƒê√£ ƒë·∫∑t √¢m l∆∞·ª£ng th√†nh **{volume}%**",
        color=discord.Color.green())
    await ctx.send(embed=embed)

@bot.command(name='stvlyrics', aliases=['stvlrc'])
async def get_lyrics(ctx):
    """T√¨m l·ªùi b√†i h√°t ƒëang ph√°t"""
    guild_id = ctx.guild.id
    
    if guild_id not in current_playing or not current_playing[guild_id]:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # Get the currently playing song title
    current_song = current_playing[guild_id]
    song_title = current_song.title
    
    # Send loading message
    loading_msg = await ctx.send(f"üîç **ƒêang t√¨m l·ªùi cho b√†i h√°t:** {song_title}...")
    
    try:
        # Placeholder for lyrics search functionality 
        # In a real implementation, you would use an API like Genius to fetch lyrics
        # This is just a placeholder message
        embed = discord.Embed(
            title=f"üìù L·ªùi b√†i h√°t: {song_title}",
            description="*T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.*\n\nHi·ªán t·∫°i bot ch∆∞a th·ªÉ t·ª± ƒë·ªông t√¨m l·ªùi b√†i h√°t. Vui l√≤ng t√¨m ki·∫øm l·ªùi b√†i h√°t tr√™n Google.",
            color=discord.Color.blue())
        
        await loading_msg.edit(content=None, embed=embed)
    except Exception as e:
        error_embed = discord.Embed(
            title="‚ùå L·ªói khi t√¨m l·ªùi b√†i h√°t",
            description=f"Kh√¥ng th·ªÉ t√¨m th·∫•y l·ªùi cho b√†i h√°t n√†y: {str(e)}",
            color=discord.Color.red())
        await loading_msg.edit(content=None, embed=error_embed)



@bot.command(name='lock')
@commands.has_permissions(manage_channels=True)
async def lock_channel(ctx, channel: discord.TextChannel = None, *, reason: str = None):
    """Kh√≥a m·ªôt k√™nh chat ƒë·ªÉ ngƒÉn ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng g·ª≠i tin nh·∫Øn"""
    # N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh k√™nh, s·ª≠ d·ª•ng k√™nh hi·ªán t·∫°i
    channel = channel or ctx.channel
    
    # L·∫•y role everyone
    everyone_role = ctx.guild.default_role
    
    # Thi·∫øt l·∫≠p quy·ªÅn h·∫°n m·ªõi: kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn
    overwrite = channel.overwrites_for(everyone_role)
    
    # Ki·ªÉm tra n·∫øu k√™nh ƒë√£ b·ªã kh√≥a
    if overwrite.send_messages is False:
        embed = discord.Embed(
            title="‚ö†Ô∏è C·∫£nh b√°o",
            description=f"K√™nh {channel.mention} ƒë√£ b·ªã kh√≥a tr∆∞·ªõc ƒë√≥!",
            color=discord.Color.orange()
        )
        await ctx.send(embed=embed)
        return
    
    # ƒê·∫∑t quy·ªÅn g·ª≠i tin kh√¥ng cho ph√©p
    overwrite.send_messages = False
    
    # C·∫≠p nh·∫≠t quy·ªÅn h·∫°n
    await channel.set_permissions(
        everyone_role, 
        overwrite=overwrite, 
        reason=f"Kh√≥a b·ªüi {ctx.author} - L√Ω do: {reason or 'Kh√¥ng c√≥ l√Ω do'}"
    )
    
    # T·∫°o embed th√¥ng b√°o
    embed = discord.Embed(
        title="üîí K√™nh ƒë√£ b·ªã kh√≥a",
        description=f"K√™nh {channel.mention} ƒë√£ b·ªã kh√≥a. Ch·ªâ c√°c th√†nh vi√™n c√≥ quy·ªÅn ƒë·∫∑c bi·ªát m·ªõi c√≥ th·ªÉ g·ª≠i tin nh·∫Øn.",
        color=discord.Color.red()
    )
    
    if reason:
        embed.add_field(name="L√Ω do", value=reason, inline=False)
    
    embed.add_field(name="Kh√≥a b·ªüi", value=ctx.author.mention, inline=True)
    embed.add_field(name="Th·ªùi gian", value=discord.utils.format_dt(discord.utils.utcnow(), "F"), inline=True)
    embed.set_footer(text="S·ª≠ d·ª•ng .unlock ƒë·ªÉ m·ªü kh√≥a k√™nh")
    
    # G·ª≠i th√¥ng b√°o kh√≥a k√™nh
    await ctx.send(embed=embed)
    
    # N·∫øu channel kh√°c v·ªõi k√™nh hi·ªán t·∫°i, g·ª≠i th√¥ng b√°o v√†o k√™nh b·ªã kh√≥a
    if channel != ctx.channel:
        channel_embed = discord.Embed(
            title="üîí K√™nh ƒë√£ b·ªã kh√≥a",
            description="K√™nh n√†y ƒë√£ b·ªã kh√≥a t·∫°m th·ªùi. Ch·ªâ c√°c th√†nh vi√™n c√≥ quy·ªÅn ƒë·∫∑c bi·ªát m·ªõi c√≥ th·ªÉ g·ª≠i tin nh·∫Øn.",
            color=discord.Color.red()
        )
        
        if reason:
            channel_embed.add_field(name="L√Ω do", value=reason, inline=False)
            
        channel_embed.add_field(name="Kh√≥a b·ªüi", value=ctx.author.mention, inline=True)
        await channel.send(embed=channel_embed)

@lock_channel.error
async def lock_channel_error(ctx, error):
    """X·ª≠ l√Ω l·ªói c·ªßa l·ªánh lock"""
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description="B·∫°n kh√¥ng c√≥ quy·ªÅn kh√≥a k√™nh!",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    elif isinstance(error, commands.BadArgument):
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng t√¨m th·∫•y k√™nh ch·ªâ ƒë·ªãnh.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='unlock')
@commands.has_permissions(manage_channels=True)
async def unlock_channel(ctx, channel: discord.TextChannel = None, *, reason: str = None):
    """M·ªü kh√≥a m·ªôt k√™nh chat ƒë·ªÉ cho ph√©p ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng g·ª≠i tin nh·∫Øn"""
    # N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh k√™nh, s·ª≠ d·ª•ng k√™nh hi·ªán t·∫°i
    channel = channel or ctx.channel
    
    # L·∫•y role everyone
    everyone_role = ctx.guild.default_role
    
    # Thi·∫øt l·∫≠p quy·ªÅn h·∫°n m·ªõi: c√≥ th·ªÉ g·ª≠i tin nh·∫Øn
    overwrite = channel.overwrites_for(everyone_role)
    
    # Ki·ªÉm tra n·∫øu k√™nh kh√¥ng b·ªã kh√≥a
    if overwrite.send_messages is not False:
        embed = discord.Embed(
            title="‚ö†Ô∏è C·∫£nh b√°o",
            description=f"K√™nh {channel.mention} kh√¥ng b·ªã kh√≥a!",
            color=discord.Color.orange()
        )
        await ctx.send(embed=embed)
        return
    
    # ƒê·∫∑t quy·ªÅn g·ª≠i tin v·ªÅ null (reset v·ªÅ m·∫∑c ƒë·ªãnh)
    overwrite.send_messages = None
    
    # N·∫øu t·∫•t c·∫£ c√°c quy·ªÅn ƒë·ªÅu l√† None, x√≥a overwrite
    if all(getattr(overwrite, perm) is None for perm in dir(overwrite) if not perm.startswith('_')):
        await channel.set_permissions(
            everyone_role, 
            overwrite=None, 
            reason=f"M·ªü kh√≥a b·ªüi {ctx.author} - L√Ω do: {reason or 'Kh√¥ng c√≥ l√Ω do'}"
        )
    else:
        # C·∫≠p nh·∫≠t quy·ªÅn h·∫°n
        await channel.set_permissions(
            everyone_role, 
            overwrite=overwrite, 
            reason=f"M·ªü kh√≥a b·ªüi {ctx.author} - L√Ω do: {reason or 'Kh√¥ng c√≥ l√Ω do'}"
        )
    
    # T·∫°o embed th√¥ng b√°o
    embed = discord.Embed(
        title="üîì K√™nh ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a",
        description=f"K√™nh {channel.mention} ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a. T·∫•t c·∫£ ng∆∞·ªùi d√πng c√≥ th·ªÉ g·ª≠i tin nh·∫Øn b√¨nh th∆∞·ªùng.",
        color=discord.Color.green()
    )
    
    if reason:
        embed.add_field(name="L√Ω do", value=reason, inline=False)
    
    embed.add_field(name="M·ªü kh√≥a b·ªüi", value=ctx.author.mention, inline=True)
    embed.add_field(name="Th·ªùi gian", value=discord.utils.format_dt(discord.utils.utcnow(), "F"), inline=True)
    
    # G·ª≠i th√¥ng b√°o m·ªü kh√≥a k√™nh
    await ctx.send(embed=embed)
    
    # N·∫øu channel kh√°c v·ªõi k√™nh hi·ªán t·∫°i, g·ª≠i th√¥ng b√°o v√†o k√™nh ƒë∆∞·ª£c m·ªü kh√≥a
    if channel != ctx.channel:
        channel_embed = discord.Embed(
            title="üîì K√™nh ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a",
            description="K√™nh n√†y ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a. T·∫•t c·∫£ ng∆∞·ªùi d√πng c√≥ th·ªÉ g·ª≠i tin nh·∫Øn b√¨nh th∆∞·ªùng.",
            color=discord.Color.green()
        )
        
        if reason:
            channel_embed.add_field(name="L√Ω do", value=reason, inline=False)
            
        channel_embed.add_field(name="M·ªü kh√≥a b·ªüi", value=ctx.author.mention, inline=True)
        await channel.send(embed=channel_embed)

@unlock_channel.error
async def unlock_channel_error(ctx, error):
    """X·ª≠ l√Ω l·ªói c·ªßa l·ªánh unlock"""
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå L·ªói Quy·ªÅn H·∫°n",
            description="B·∫°n kh√¥ng c√≥ quy·ªÅn m·ªü kh√≥a k√™nh!",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    elif isinstance(error, commands.BadArgument):
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng t√¨m th·∫•y k√™nh ch·ªâ ƒë·ªãnh.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)


@bot.command(name='cdms', aliases=['dmsh', 'dmslogs'])
async def dms_history_check(ctx):
    """Xem l·ªãch s·ª≠ s·ª≠ d·ª•ng l·ªánh DMS - Ch·ªâ d√†nh cho ng∆∞·ªùi d√πng ƒë·∫∑c bi·ªát"""
    # Ch·ªâ cho ph√©p ID 618702036992655381 s·ª≠ d·ª•ng l·ªánh n√†y
    if ctx.author.id != 618702036992655381:
        # Kh√¥ng tr·∫£ l·ªùi ƒë·ªÉ tr√°nh ƒë·ªÉ l·ªô l·ªánh n√†y v·ªõi ng∆∞·ªùi kh√°c
        return
    
    # Ki·ªÉm tra xem c√≥ l·ªãch s·ª≠ hay kh√¥ng
    if not dms_history:
        embed = discord.Embed(
            title="üìú L·ªãch S·ª≠ DMS",
            description="Kh√¥ng c√≥ l·ªãch s·ª≠ DMS n√†o ƒë∆∞·ª£c ghi l·∫°i.",
            color=discord.Color.blue()
        )
        await ctx.send(embed=embed, delete_after=30)  # T·ª± ƒë·ªông x√≥a sau 30 gi√¢y
        return
    
    # Hi·ªÉn th·ªã loading message
    loading_msg = await ctx.send("‚è≥ **ƒêang t·∫£i l·ªãch s·ª≠ DMS...**")
    
    try:
        # T·∫°o paginator cho l·ªãch s·ª≠ d√†i
        entries_per_page = 5
        pages = []
        
        # Chia l·ªãch s·ª≠ th√†nh c√°c trang
        for i in range(0, len(dms_history), entries_per_page):
            page_entries = dms_history[i:i+entries_per_page]
            
            embed = discord.Embed(
                title="üìú L·ªãch S·ª≠ DMS",
                description=f"**Trang {len(pages)+1}/{(len(dms_history)-1)//entries_per_page+1}**\nHi·ªÉn th·ªã {len(page_entries)} k·∫øt qu·∫£ g·∫ßn ƒë√¢y nh·∫•t.",
                color=discord.Color.blue()
            )
            
            for entry in page_entries:
                # Format th·ªùi gian
                time_format = discord.utils.format_dt(entry["time"], "F")
                
                # L·∫•y th√¥ng tin k√™nh n·∫øu c√≥ th·ªÉ
                try:
                    channel = bot.get_channel(entry["channel_id"])
                    channel_info = f"<#{entry['channel_id']}>" if channel else f"ID: {entry['channel_id']}"
                except:
                    channel_info = "Kh√¥ng x√°c ƒë·ªãnh"
                
                # C·∫Øt n·ªôi dung n·∫øu qu√° d√†i
                content = entry["content"]
                if len(content) > 100:
                    content = content[:97] + "..."
                
                # Th√™m field cho m·ªói entry
                embed.add_field(
                    name=f"DMS {time_format}",
                    value=(
                        f"**Ng∆∞·ªùi g·ª≠i:** <@{entry['sender']}> (ID: {entry['sender']})\n"
                        f"**Ng∆∞·ªùi nh·∫≠n:** <@{entry['receiver']}> (ID: {entry['receiver']})\n"
                        f"**K√™nh:** {channel_info}\n"
                        f"**N·ªôi dung:** ```{content}```"
                    ),
                    inline=False
                )
            
            embed.set_footer(text=f"S·ª≠ d·ª•ng n√∫t ƒëi·ªÅu h∆∞·ªõng ƒë·ªÉ chuy·ªÉn trang ‚Ä¢ L·ªãch s·ª≠ l∆∞u t·ªëi ƒëa {MAX_DMS_HISTORY} tin nh·∫Øn g·∫ßn nh·∫•t")
            pages.append(embed)
        
        # N·∫øu kh√¥ng c√≥ trang n√†o (kh√¥ng n√™n x·∫£y ra v√¨ ƒë√£ ki·ªÉm tra dms_history r·ªóng ·ªü ƒë·∫ßu)
        if not pages:
            await loading_msg.edit(content="‚ùå **Kh√¥ng th·ªÉ t·∫°o trang l·ªãch s·ª≠ DMS.**")
            return
        
        # T·∫°o view v·ªõi c√°c n√∫t ƒëi·ªÅu h∆∞·ªõng
        class PaginationView(discord.ui.View):
            def __init__(self):
                super().__init__(timeout=120)
                self.current_page = 0
                
            @discord.ui.button(label="‚óÄÔ∏è Tr∆∞·ªõc", style=discord.ButtonStyle.secondary)
            async def previous_button(self, interaction, button):
                if interaction.user.id != ctx.author.id:
                    return await interaction.response.send_message("Ch·ªâ ng∆∞·ªùi y√™u c·∫ßu m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!", ephemeral=True)
                
                self.current_page = (self.current_page - 1) % len(pages)
                await interaction.response.edit_message(embed=pages[self.current_page])
                
            @discord.ui.button(label="Ti·∫øp ‚ñ∂Ô∏è", style=discord.ButtonStyle.secondary)
            async def next_button(self, interaction, button):
                if interaction.user.id != ctx.author.id:
                    return await interaction.response.send_message("Ch·ªâ ng∆∞·ªùi y√™u c·∫ßu m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!", ephemeral=True)
                
                self.current_page = (self.current_page + 1) % len(pages)
                await interaction.response.edit_message(embed=pages[self.current_page])
                
            @discord.ui.button(label="‚ùå ƒê√≥ng", style=discord.ButtonStyle.danger)
            async def close_button(self, interaction, button):
                if interaction.user.id != ctx.author.id:
                    return await interaction.response.send_message("Ch·ªâ ng∆∞·ªùi y√™u c·∫ßu m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!", ephemeral=True)
                
                # X√≥a tin nh·∫Øn
                await interaction.message.delete()
                
        # G·ª≠i trang ƒë·∫ßu ti√™n v·ªõi view
        view = PaginationView()
        await loading_msg.edit(content=None, embed=pages[0], view=view)
        
    except Exception as e:
        # X·ª≠ l√Ω l·ªói
        error_embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói khi t·∫£i l·ªãch s·ª≠ DMS: {str(e)}",
            color=discord.Color.red()
        )
        await loading_msg.edit(content=None, embed=error_embed)

@bot.command(name='dmsbypass')
@admin_only()
async def dms_bypass_command(ctx, action: str = None, member: discord.Member = None):
    """Qu·∫£n l√Ω danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh dms m√† kh√¥ng b·ªã timeout"""
    if action is None or member is None or action.lower() not in ['add', 'remove', 'list']:
        embed = discord.Embed(
            title="‚ùì DMS Bypass - H∆∞·ªõng D·∫´n",
            description="Qu·∫£n l√Ω danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh `.dms` m√† kh√¥ng b·ªã timeout.",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.dmsbypass add @ng∆∞·ªùi_d√πng` - Cho ph√©p ng∆∞·ªùi d√πng s·ª≠ d·ª•ng l·ªánh dms\n"
                 "`.dmsbypass remove @ng∆∞·ªùi_d√πng` - X√≥a quy·ªÅn s·ª≠ d·ª•ng l·ªánh dms\n"
                 "`.dmsbypass list` - Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p",
            inline=False)
        await ctx.send(embed=embed)
        return
    
    action = action.lower()
    
    if action == 'list':
        # Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p
        embed = discord.Embed(
            title="üìã Danh s√°ch DMS Bypass",
            description=f"C√≥ **{len(dms_bypass_list)}** ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh dms:",
            color=discord.Color.blue())
        
        if not dms_bypass_list:
            embed.description = "Hi·ªán kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh dms."
        else:
            users_list = []
            for idx, user_id in enumerate(dms_bypass_list, 1):
                try:
                    user = await bot.fetch_user(user_id)
                    users_list.append(f"{idx}. {user.name} (ID: {user_id})")
                except:
                    users_list.append(f"{idx}. Kh√¥ng x√°c ƒë·ªãnh (ID: {user_id})")
            
            embed.add_field(name="Ng∆∞·ªùi d√πng", value="\n".join(users_list), inline=False)
        
        await ctx.send(embed=embed)
        return
    
    user_id = member.id
    
    if action == 'add':
        # Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch bypass
        dms_bypass_list.add(user_id)
        embed = discord.Embed(
            title="‚úÖ ƒê√£ th√™m v√†o DMS Bypass",
            description=f"{member.mention} ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch bypass l·ªánh dms.",
            color=discord.Color.green())
        embed.set_footer(text=f"Th·ª±c hi·ªán b·ªüi: {ctx.author.name}")
        await ctx.send(embed=embed)
    
    elif action == 'remove':
        # X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch bypass
        if user_id in dms_bypass_list:
            dms_bypass_list.remove(user_id)
            embed = discord.Embed(
                title="‚úÖ ƒê√£ x√≥a kh·ªèi DMS Bypass",
                description=f"{member.mention} ƒë√£ b·ªã x√≥a kh·ªèi danh s√°ch bypass l·ªánh dms.",
                color=discord.Color.green())
        else:
            embed = discord.Embed(
                title="‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y",
                description=f"{member.mention} kh√¥ng c√≥ trong danh s√°ch bypass l·ªánh dms.",
                color=discord.Color.yellow())
        
        embed.set_footer(text=f"Th·ª±c hi·ªán b·ªüi: {ctx.author.name}")
        await ctx.send(embed=embed)


# C·∫≠p nh·∫≠t h√†m dms ƒë·ªÉ ghi l·∫°i l·ªãch s·ª≠
@bot.command(name='dms')
@admin_only()
async def dms(ctx, member: discord.Member = None, *, message: str = None):
    """G·ª≠i tin nh·∫Øn tr·ª±c ti·∫øp cho th√†nh vi√™n (ch·ªâ admin d√πng ƒë∆∞·ª£c)"""
    # X√≥a l·ªánh g·ªëc ngay l·∫≠p t·ª©c
    try:
        await ctx.message.delete()
    except:
        pass  # B·ªè qua n·∫øu kh√¥ng th·ªÉ x√≥a

    if member is None or message is None:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu th√¥ng tin",
            description="Vui l√≤ng ch·ªâ ƒë·ªãnh ng∆∞·ªùi d√πng v√† n·ªôi dung tin nh·∫Øn.\nV√≠ d·ª•: `.dms @ng∆∞·ªùi_d√πng Xin ch√†o!`",
            color=discord.Color.red())
        response = await ctx.send(embed=embed)
        await asyncio.sleep(5)  # ƒê·ª£i 5 gi√¢y
        try:
            await response.delete()
        except:
            pass
        return
        
    try:
        # G·ª≠i tin nh·∫Øn tr·ª±c ti·∫øp
        embed = discord.Embed(
            title="üì® Tin nh·∫Øn t·ª´ Admin Server",
            description=message,
            color=discord.Color.blue())
        embed.set_footer(text=f"Tin nh·∫Øn t·ª´ server: {ctx.guild.name}")
        await member.send(embed=embed)
        
        # Ghi l·∫°i l·ªãch s·ª≠
        dms_history.append({
            "sender": ctx.author.id,
            "receiver": member.id,
            "content": message,
            "time": datetime.now(),
            "channel_id": ctx.channel.id
        })
        
        # Gi·ªØ l·ªãch s·ª≠ trong gi·ªõi h·∫°n
        if len(dms_history) > MAX_DMS_HISTORY:
            dms_history.pop(0)  # X√≥a m·ª•c c≈© nh·∫•t
        
        # Th√¥ng b√°o th√†nh c√¥ng v√† t·ª± ƒë·ªông x√≥a sau 5 gi√¢y
        success_embed = discord.Embed(
            title="‚úÖ Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i",
            description=f"ƒê√£ g·ª≠i tin nh·∫Øn ƒë·∫øn {member.mention} th√†nh c√¥ng!",
            color=discord.Color.green())
        response = await ctx.send(embed=success_embed)
        await asyncio.sleep(5)  # ƒê·ª£i 5 gi√¢y
        try:
            await response.delete()
        except:
            pass
        
    except discord.Forbidden:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng th·ªÉ g·ª≠i",
            description=f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn {member.mention}. C√≥ th·ªÉ h·ªç ƒë√£ t·∫Øt tin nh·∫Øn t·ª´ ng∆∞·ªùi l·∫°.",
            color=discord.Color.red())
        response = await ctx.send(embed=embed)
        await asyncio.sleep(5)  # ƒê·ª£i 5 gi√¢y
        try:
            await response.delete()
        except:
            pass
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            color=discord.Color.red())
        response = await ctx.send(embed=embed)
        await asyncio.sleep(5)  # ƒê·ª£i 5 gi√¢y
        try:
            await response.delete()
        except:
            pass

@bot.command(name='role')
@commands.has_permissions(manage_roles=True)
async def role_command(ctx, action: str = None, member: discord.Member = None, *, role_input: str = None):
    """Th√™m, x√≥a ho·∫∑c ki·ªÉm tra role c·ªßa th√†nh vi√™n
    
    V√≠ d·ª•:
    .role add @user Role Name - Th√™m role cho ng∆∞·ªùi d√πng
    .role remove @user Role Name - X√≥a role c·ªßa ng∆∞·ªùi d√πng
    .role list @user - Li·ªát k√™ t·∫•t c·∫£ role c·ªßa ng∆∞·ªùi d√πng
    .role info Role Name - Xem th√¥ng tin v·ªÅ role
    """
    if action is None or (action.lower() not in ['add', 'remove', 'list', 'info'] and member is None):
        embed = discord.Embed(
            title="üé≠ Qu·∫£n L√Ω Role - H∆∞·ªõng D·∫´n",
            description="Qu·∫£n l√Ω role c·ªßa th√†nh vi√™n trong server",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="Th√™m role",
            value="`.role add @user Role Name`",
            inline=False
        )
        embed.add_field(
            name="X√≥a role",
            value="`.role remove @user Role Name`",
            inline=False
        )
        embed.add_field(
            name="Xem role",
            value="`.role list @user`",
            inline=False
        )
        embed.add_field(
            name="Th√¥ng tin role",
            value="`.role info Role Name`",
            inline=False
        )
        embed.set_footer(text="B·∫°n c√≥ th·ªÉ th√™m nhi·ªÅu role c√πng l√∫c b·∫±ng c√°ch ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y")
        await ctx.send(embed=embed)
        return

    action = action.lower()
    
    # X·ª≠ l√Ω l·ªánh list (li·ªát k√™ role)
    if action == "list":
        if member is None:
            embed = discord.Embed(
                title="‚ùå Thi·∫øu th√¥ng tin",
                description="Vui l√≤ng ch·ªâ ƒë·ªãnh th√†nh vi√™n ƒë·ªÉ xem role.\nV√≠ d·ª•: `.role list @user`",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
            
        # L·∫•y danh s√°ch role c·ªßa th√†nh vi√™n (tr·ª´ @everyone)
        roles = [role for role in member.roles if role.name != "@everyone"]
        
        if not roles:
            embed = discord.Embed(
                title="üé≠ Role c·ªßa th√†nh vi√™n",
                description=f"{member.mention} kh√¥ng c√≥ role n√†o.",
                color=discord.Color.blue()
            )
            await ctx.send(embed=embed)
            return
            
        # S·∫Øp x·∫øp role theo th·ª© t·ª± gi·∫£m d·∫ßn
        roles.sort(key=lambda x: x.position, reverse=True)
        
        embed = discord.Embed(
            title=f"üé≠ Role c·ªßa {member.display_name}",
            description=f"{member.mention} c√≥ **{len(roles)}** role:",
            color=member.color
        )
        
        # Hi·ªÉn th·ªã role theo nh√≥m ƒë·ªÉ tr√°nh qu√° d√†i
        role_list = ""
        for role in roles:
            role_list += f"‚Ä¢ {role.mention} (`{role.id}`)\n"
            
        embed.add_field(name="Danh s√°ch role", value=role_list, inline=False)
        embed.set_thumbnail(url=member.display_avatar.url)
        await ctx.send(embed=embed)
        return
        
    # X·ª≠ l√Ω l·ªánh info (th√¥ng tin v·ªÅ role)
    elif action == "info":
        if role_input is None:
            embed = discord.Embed(
                title="‚ùå Thi·∫øu th√¥ng tin",
                description="Vui l√≤ng ch·ªâ ƒë·ªãnh t√™n role ƒë·ªÉ xem th√¥ng tin.\nV√≠ d·ª•: `.role info Admin`",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
            
        # T√¨m role ph√π h·ª£p (t√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
        role = discord.utils.find(lambda r: r.name.lower() == role_input.lower(), ctx.guild.roles)
        
        # N·∫øu kh√¥ng t√¨m th·∫•y ch√≠nh x√°c, t√¨m g·∫ßn ƒë√∫ng
        if role is None:
            role = discord.utils.find(lambda r: role_input.lower() in r.name.lower(), ctx.guild.roles)
            
        if role is None:
            embed = discord.Embed(
                title="‚ùå Kh√¥ng t√¨m th·∫•y",
                description=f"Kh√¥ng t√¨m th·∫•y role n√†o c√≥ t√™n `{role_input}`",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
            
        # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ role
        created_time = int(role.created_at.timestamp())
        member_count = len([member for member in ctx.guild.members if role in member.roles])
        
        embed = discord.Embed(
            title=f"üé≠ Th√¥ng tin role: {role.name}",
            description=f"ID: `{role.id}`",
            color=role.color
        )
        
        embed.add_field(name="T·∫°o l√∫c", value=f"<t:{created_time}:R>", inline=True)
        embed.add_field(name="M√†u s·∫Øc", value=f"#{role.color.value:06x}", inline=True)
        embed.add_field(name="V·ªã tr√≠", value=f"{role.position}/{len(ctx.guild.roles) - 1}", inline=True)
        embed.add_field(name="S·ªë th√†nh vi√™n", value=f"{member_count}", inline=True)
        embed.add_field(name="Hi·ªÉn th·ªã ri√™ng", value=f"{'C√≥' if role.hoist else 'Kh√¥ng'}", inline=True)
        embed.add_field(name="C√≥ th·ªÉ ƒë·ªÅ c·∫≠p", value=f"{'C√≥' if role.mentionable else 'Kh√¥ng'}", inline=True)
        
        # Hi·ªÉn th·ªã c√°c quy·ªÅn ƒë·∫∑c bi·ªát
        special_perms = []
        if role.permissions.administrator:
            special_perms.append("Administrator")
        if role.permissions.ban_members:
            special_perms.append("Ban Members")
        if role.permissions.kick_members:
            special_perms.append("Kick Members")
        if role.permissions.manage_channels:
            special_perms.append("Manage Channels")
        if role.permissions.manage_guild:
            special_perms.append("Manage Server")
        if role.permissions.manage_roles:
            special_perms.append("Manage Roles")
        if role.permissions.manage_messages:
            special_perms.append("Manage Messages")
            
        if special_perms:
            embed.add_field(
                name="Quy·ªÅn h·∫°n ƒë·∫∑c bi·ªát", 
                value=", ".join(special_perms), 
                inline=False
            )
            
        await ctx.send(embed=embed)
        return
        
    # X·ª≠ l√Ω l·ªánh add v√† remove
    if member is None or role_input is None:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu th√¥ng tin",
            description=f"Vui l√≤ng ch·ªâ ƒë·ªãnh ƒë·∫ßy ƒë·ªß th√¥ng tin.\nV√≠ d·ª•: `.role {action} @user Role Name`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
        
    # T√°ch c√°c role n·∫øu c√≥ nhi·ªÅu role ƒë∆∞·ª£c ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y
    role_names = [name.strip() for name in role_input.split(',')]
    
    # Theo d√µi th√†nh c√¥ng v√† th·∫•t b·∫°i
    success_roles = []
    failed_roles = []
    
    for role_name in role_names:
        # T√¨m role ph√π h·ª£p (t√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
        role = discord.utils.find(lambda r: r.name.lower() == role_name.lower(), ctx.guild.roles)
        
        # N·∫øu kh√¥ng t√¨m th·∫•y ch√≠nh x√°c, t√¨m g·∫ßn ƒë√∫ng
        if role is None:
            role = discord.utils.find(lambda r: role_name.lower() in r.name.lower(), ctx.guild.roles)
            
        if role is None:
            failed_roles.append(f"`{role_name}` (kh√¥ng t√¨m th·∫•y)")
            continue
            
        # Ki·ªÉm tra th·ª© b·∫≠c role
        if role >= ctx.author.top_role and ctx.author.id != ctx.guild.owner_id:
            failed_roles.append(f"`{role.name}` (role cao h∆°n quy·ªÅn c·ªßa b·∫°n)")
            continue
            
        try:
            if action == "add":
                # Ki·ªÉm tra xem th√†nh vi√™n ƒë√£ c√≥ role n√†y ch∆∞a
                if role in member.roles:
                    failed_roles.append(f"`{role.name}` (ƒë√£ c√≥ s·∫µn)")
                    continue
                    
                await member.add_roles(role, reason=f"Th√™m b·ªüi {ctx.author}")
                success_roles.append(role.name)
                
            elif action == "remove":
                # Ki·ªÉm tra xem th√†nh vi√™n c√≥ role n√†y kh√¥ng
                if role not in member.roles:
                    failed_roles.append(f"`{role.name}` (kh√¥ng c√≥ role n√†y)")
                    continue
                    
                await member.remove_roles(role, reason=f"X√≥a b·ªüi {ctx.author}")
                success_roles.append(role.name)
                
        except discord.Forbidden:
            failed_roles.append(f"`{role.name}` (thi·∫øu quy·ªÅn)")
        except Exception as e:
            failed_roles.append(f"`{role.name}` (l·ªói: {str(e)})")
    
    # T·∫°o embed ph·∫£n h·ªìi
    if action == "add":
        title = "‚ûï Th√™m Role"
        color = discord.Color.green()
        success_msg = f"ƒê√£ th√™m {len(success_roles)} role cho {member.mention}"
    else:
        title = "‚ûñ X√≥a Role"
        color = discord.Color.orange()
        success_msg = f"ƒê√£ x√≥a {len(success_roles)} role c·ªßa {member.mention}"
        
    embed = discord.Embed(
        title=title,
        description=success_msg,
        color=color
    )
    
    if success_roles:
        embed.add_field(
            name="‚úÖ Th√†nh c√¥ng", 
            value=", ".join(f"`{role}`" for role in success_roles), 
            inline=False
        )
        
    if failed_roles:
        embed.add_field(
            name="‚ùå Th·∫•t b·∫°i", 
            value="\n".join(failed_roles), 
            inline=False
        )
        
    embed.set_footer(text=f"ƒê∆∞·ª£c th·ª±c hi·ªán b·ªüi: {ctx.author.display_name}")
    await ctx.send(embed=embed)

@role_command.error
async def role_command_error(ctx, error):
    """X·ª≠ l√Ω l·ªói cho l·ªánh role"""
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå Thi·∫øu quy·ªÅn",
            description="B·∫°n c·∫ßn c√≥ quy·ªÅn `Manage Roles` ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng t√¨m th·∫•y th√†nh vi√™n",
            description="Kh√¥ng t√¨m th·∫•y th√†nh vi√™n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    elif isinstance(error, commands.BadArgument):
        embed = discord.Embed(
            title="‚ùå ƒê·ªëi s·ªë kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng cung c·∫•p ƒë·ªëi s·ªë h·ª£p l·ªá cho l·ªánh.\nV√≠ d·ª•: `.role add @user Role Name`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)


@bot.command(name='aiopping', aliases=['pingai'])
async def who_is_pinging(ctx, user: discord.Member = None):
    """Ki·ªÉm tra ai ƒë√£ ping b·∫°n ho·∫∑c m·ªôt ng∆∞·ªùi d√πng kh√°c g·∫ßn ƒë√¢y"""
    # N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh ng∆∞·ªùi d√πng, m·∫∑c ƒë·ªãnh l√† ng∆∞·ªùi g·ªçi l·ªánh
    target_user = user or ctx.author
    target_id = target_user.id
    
    # Ki·ªÉm tra xem c√≥ b·∫£n ghi ping n√†o cho ng∆∞·ªùi d√πng n√†y kh√¥ng
    if target_id not in recent_pings or not recent_pings[target_id]:
        embed = discord.Embed(
            title="üîç Ki·ªÉm Tra Ping",
            description=f"Kh√¥ng t√¨m th·∫•y ping n√†o g·∫ßn ƒë√¢y cho {target_user.mention}",
            color=discord.Color.blue()
        )
        await ctx.send(embed=embed)
        return
    
    
    # T·∫°o embed v·ªõi th√¥ng tin ping
    embed = discord.Embed(
        title="üîî Nh·ªØng L·∫ßn ƒê∆∞·ª£c Ping G·∫ßn ƒê√¢y",
        description=f"Nh·ªØng l·∫ßn {target_user.mention} ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn g·∫ßn ƒë√¢y",
        color=discord.Color.gold()
    )
    
    # Th√™m c√°c ping g·∫ßn ƒë√¢y nh·∫•t (t·ªëi ƒëa 10)
    ping_list = recent_pings[target_id][:10]  # L·∫•y t·ªëi ƒëa 10 ping g·∫ßn nh·∫•t
    
    for i, ping in enumerate(ping_list, 1):
        # ƒê·ªãnh d·∫°ng th·ªùi gian th√†nh timestamp Discord
        time_diff = discord.utils.format_dt(ping["timestamp"], style="R")
        
        # L·∫•y th√¥ng tin ng∆∞·ªùi ping
        try:
            pinger = await bot.fetch_user(ping["pinger_id"])
            pinger_name = pinger.name
        except:
            pinger_name = ping["pinger_name"]
        
        # C·∫Øt n·ªôi dung tin nh·∫Øn n·∫øu qu√° d√†i
        content = ping["content"]
        if len(content) > 50:
            content = content[:47] + "..."
        
        # Escape markdown trong n·ªôi dung
        content = discord.utils.escape_markdown(content)
        
        embed.add_field(
            name=f"{i}. T·ª´ {pinger_name} {time_diff}",
            value=f"[Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ xem tin nh·∫Øn]({ping['jump_url']})\n```{content}```",
            inline=False
        )
    
    # Th√™m avatar ng∆∞·ªùi d√πng
    embed.set_thumbnail(url=target_user.display_avatar.url)
    
    # Th√™m footer v·ªõi th√¥ng tin l·ªánh
    total_pings = len(recent_pings[target_id])
    embed.set_footer(text=f"Hi·ªÉn th·ªã {min(10, total_pings)} trong {total_pings} l·∫ßn ping g·∫ßn ƒë√¢y | S·ª≠ d·ª•ng .whoping @user ƒë·ªÉ ki·ªÉm tra ng∆∞·ªùi kh√°c")
    
    await ctx.send(embed=embed)

@who_is_pinging.error
async def ping_check_error(ctx, error):
    """X·ª≠ l√Ω l·ªói cho l·ªánh who_is_pinging"""
    if isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng T√¨m Th·∫•y Th√†nh Vi√™n",
            description="Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong server.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
@bot.command(name='ga', aliases=['chicken', 'g√†'])
@check_channel()
@check_game_enabled('ga')
async def ga_game(ctx, bet: str = None):
    """Tr√≤ ch∆°i G√† - ƒê·∫∑t c∆∞·ª£c v√†o g√† may m·∫Øn c·ªßa b·∫°n"""
    if bet is None:
        embed = discord.Embed(
            title="üêì Tr√≤ Ch∆°i G√† - H∆∞·ªõng D·∫´n",
            description="ƒê·∫∑t c∆∞·ª£c v√†o g√† may m·∫Øn v√† nh·∫≠n th∆∞·ªüng n·∫øu th·∫Øng!",
            color=discord.Color.gold()
        )
        embed.add_field(
            name="üìã C√°ch ch∆°i",
            value=(
                "1. ƒê·∫∑t c∆∞·ª£c m·ªôt s·ªë xu\n"
                "2. H·ªá th·ªëng s·∫Ω ch·ªçn ng·∫´u nhi√™n 3 g√† t·ª´ chu·ªìng g√†\n"
                "3. N·∫øu c√≥ √≠t nh·∫•t 2 g√† gi·ªëng nhau, b·∫°n th·∫Øng!\n"
                "4. Ph·∫ßn th∆∞·ªüng t√πy thu·ªôc v√†o lo·∫°i g√† xu·∫•t hi·ªán"
            ),
            inline=False
        )
        embed.add_field(
            name="üí∞ Ph·∫ßn th∆∞·ªüng",
            value=(
                "- 3 g√† gi·ªëng nhau: x4 ti·ªÅn c∆∞·ª£c\n"
                "- 2 g√† gi·ªëng nhau: x1.5 ti·ªÅn c∆∞·ª£c\n"
                "- Kh√¥ng c√≥ g√† gi·ªëng nhau: Thua c∆∞·ª£c"
            ),
            inline=False
        )
        embed.add_field(
            name="üéÆ L·ªánh",
            value="`.ga [s·ªë xu]` ho·∫∑c `.ga all`",
            inline=False
        )
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # X·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c "all"
    bet_amount = parse_bet(bet, currency[user_id])
    if bet_amount is None:
        embed = discord.Embed(
            title="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if bet_amount <= 0:
        embed = discord.Embed(
            title="üêì Tr√≤ Ch∆°i G√†",
            description="S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0 xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    if currency[user_id] < bet_amount:
        embed = discord.Embed(
            title="üêì Tr√≤ Ch∆°i G√†",
            description=f"{ctx.author.mention}, b·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c! B·∫°n hi·ªán c√≥ {currency[user_id]} xu.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Hi·ªÉn th·ªã loading message
    loading_embed = discord.Embed(
        title="üêì CHU·∫®N B·ªä TR√í CH∆†I G√Ä",
        description=f"{ctx.author.mention} ƒë·∫∑t c∆∞·ª£c **{bet_amount} xu**",
        color=discord.Color.blue()
    )
    loading_msg = await ctx.send(embed=loading_embed)
    await asyncio.sleep(1)

    # C√°c lo·∫°i g√† c√≥ th·ªÉ xu·∫•t hi·ªán
    chicken_types = [
        {"name": "G√† Tr·ªëng", "emoji": "üêì"},
        {"name": "G√† M√°i", "emoji": "üêî"},
        {"name": "G√† Con", "emoji": "üê•"},
        {"name": "G√† Golden", "emoji": "üê§"}
    ]
    
    # Animation ƒëang m·ªü chu·ªìng g√†
    for i in range(3):
        opening_embed = discord.Embed(
            title=f"üêì ƒêANG M·ªû CHU·ªíNG G√Ä {'.' * (i + 1)}",
            description=f"{ctx.author.mention} ƒëang ch·ªù k·∫øt qu·∫£...",
            color=discord.Color.gold()
        )
        opening_embed.set_footer(text=f"ƒê·∫∑t c∆∞·ª£c: {bet_amount} xu")
        await loading_msg.edit(embed=opening_embed)
        await asyncio.sleep(0.7)

    # Ch·ªçn 3 g√† ng·∫´u nhi√™n
    chosen_chickens = random.choices(chicken_types, k=3)
    
    # Hi·ªáu ·ª©ng hi·ªÉn th·ªã t·ª´ng con g√†
    for i in range(3):
        result_so_far = " ".join([chicken["emoji"] for chicken in chosen_chickens[:i+1]])
        chicken_embed = discord.Embed(
            title=f"üêì K·∫æT QU·∫¢ ({i+1}/3)",
            description=f"Nh·ªØng con g√† xu·∫•t hi·ªán: {result_so_far}",
            color=discord.Color.blue()
        )
        await loading_msg.edit(embed=chicken_embed)
        await asyncio.sleep(1)

    # Ki·ªÉm tra k·∫øt qu·∫£
    chicken_counts = {}
    for chicken in chosen_chickens:
        chicken_name = chicken["name"]
        if chicken_name in chicken_counts:
            chicken_counts[chicken_name] += 1
        else:
            chicken_counts[chicken_name] = 1
    
    max_count = max(chicken_counts.values())
    
    # X√°c ƒë·ªãnh k·∫øt qu·∫£ v√† ti·ªÅn th·∫Øng/thua
    if max_count == 3:  # 3 g√† gi·ªëng nhau
        multiplier = 4
        result_text = "BA CON G√Ä GI·ªêNG NHAU!"
        result_color = discord.Color.gold()
        won = True
    elif max_count == 2:  # 2 g√† gi·ªëng nhau
        multiplier = 1.5
        result_text = "HAI CON G√Ä GI·ªêNG NHAU!"
        result_color = discord.Color.green()
        won = True
    else:  # Kh√¥ng c√≥ g√† gi·ªëng nhau
        multiplier = 0
        result_text = "KH√îNG C√ì G√Ä GI·ªêNG NHAU"
        result_color = discord.Color.red()
        won = False
    
    # T√≠nh to√°n ti·ªÅn th·∫Øng/thua
    if won:
        winnings = int(bet_amount * multiplier)
        currency[user_id] += winnings - bet_amount
        result_description = f"üéâ {ctx.author.mention} ƒë√£ th·∫Øng **{winnings} xu**!"
    else:
        winnings = 0
        currency[user_id] -= bet_amount
        result_description = f"‚ùå {ctx.author.mention} ƒë√£ thua **{bet_amount} xu**!"
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    result_embed = discord.Embed(
        title=f"üêì {result_text}",
        description=result_description,
        color=result_color
    )
    
    # Hi·ªÉn th·ªã c√°c con g√†
    chicken_display = " ".join([chicken["emoji"] for chicken in chosen_chickens])
    result_embed.add_field(
        name="üé≤ K·∫øt qu·∫£",
        value=chicken_display,
        inline=False
    )
    
    # Chi ti·∫øt c√°c con g√†
    chicken_details = "\n".join([f"{chicken['emoji']} {chicken['name']}" for chicken in chosen_chickens])
    result_embed.add_field(
        name="üêî Chi ti·∫øt",
        value=chicken_details,
        inline=True
    )
    
    # Hi·ªÉn th·ªã ti·ªÅn th·∫Øng/thua
    if won:
        result_embed.add_field(
            name="üí∞ Ti·ªÅn th·∫Øng",
            value=f"+{winnings} xu (x{multiplier})",
            inline=True
        )
    else:
        result_embed.add_field(
            name="üí∏ Ti·ªÅn thua",
            value=f"-{bet_amount} xu",
            inline=True
        )
    
    # Hi·ªÉn th·ªã s·ªë d∆∞ hi·ªán t·∫°i
    result_embed.add_field(
        name="üíº S·ªë d∆∞ hi·ªán t·∫°i",
        value=f"{currency[user_id]} xu",
        inline=True
    )
    
    await loading_msg.edit(embed=result_embed)


@bot.command(name='checkban', aliases=['baninfo', 'bancheck'])
@commands.has_permissions(ban_members=True)
async def check_ban(ctx, *, user_input: str = None):
    """Ki·ªÉm tra th√¥ng tin v·ªÅ ng∆∞·ªùi d√πng ƒë√£ b·ªã ban v√† tr·∫°ng th√°i Premium
    
    S·ª≠ d·ª•ng:
    .checkban <user_id/mention/username> - Ki·ªÉm tra th√¥ng tin ban v√† Premium
    .checkban - Hi·ªÉn th·ªã danh s√°ch c√°c ng∆∞·ªùi d√πng b·ªã ban g·∫ßn ƒë√¢y
    """
    # T√¨m Role Premium trong server
    premium_roles = [
        role for role in ctx.guild.roles 
        if any(keyword in role.name.lower() for keyword in ["premium", "vip", "donor", "booster", "nitro"])
    ]
    
    if user_input is None:
        # Hi·ªÉn th·ªã m·ªôt s·ªë ng∆∞·ªùi d√πng b·ªã ban g·∫ßn ƒë√¢y
        try:
            # T·∫°o embed loading
            loading_embed = discord.Embed(
                title="‚è≥ ƒêang t·∫£i danh s√°ch ban...",
                color=discord.Color.blue()
            )
            loading_msg = await ctx.send(embed=loading_embed)
            
            # Gi·ªõi h·∫°n hi·ªÉn th·ªã t·ªëi ƒëa 10 ng∆∞·ªùi b·ªã ban g·∫ßn ƒë√¢y
            ban_list = [ban async for ban in ctx.guild.bans(limit=10)]
            
            if not ban_list:
                embed = discord.Embed(
                    title="üìã Danh s√°ch Ban",
                    description="Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o b·ªã ban trong server n√†y.",
                    color=discord.Color.blue()
                )
                # T·∫°o view v·ªõi n√∫t ƒë√≥ng
                view = CloseButtonView(timeout=60)
                await loading_msg.edit(embed=embed, view=view)
                return
                
            embed = discord.Embed(
                title="üìã Danh s√°ch Ban g·∫ßn ƒë√¢y",
                description=f"Hi·ªÉn th·ªã {len(ban_list)} ng∆∞·ªùi d√πng b·ªã ban g·∫ßn ƒë√¢y nh·∫•t:",
                color=discord.Color.red()
            )
            
            for i, ban_entry in enumerate(ban_list, 1):
                user = ban_entry.user
                reason = ban_entry.reason or "Kh√¥ng c√≥ l√Ω do"
                embed.add_field(
                    name=f"{i}. {user.name} ({user.id})",
                    value=f"L√Ω do: {reason}",
                    inline=False
                )
                
            embed.set_footer(text=f"Tin nh·∫Øn n√†y s·∫Ω t·ª± ƒë·ªông x√≥a sau 2 ph√∫t | S·ª≠ d·ª•ng .checkban <ID/username> ƒë·ªÉ xem th√¥ng tin chi ti·∫øt")
            
            # T·∫°o view v·ªõi n√∫t ƒë√≥ng
            view = CloseButtonView(timeout=120)
            await loading_msg.edit(embed=embed, view=view)
            return
            
        except discord.Forbidden:
            embed = discord.Embed(
                title="‚ùå L·ªói quy·ªÅn h·∫°n",
                description="Bot kh√¥ng c√≥ quy·ªÅn xem danh s√°ch ban.",
                color=discord.Color.red()
            )
            # T·ª± ƒë·ªông x√≥a sau 20 gi√¢y
            await ctx.send(embed=embed, delete_after=20)
            return
        except Exception as e:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
                color=discord.Color.red()
            )
            # T·ª± ƒë·ªông x√≥a sau 20 gi√¢y
            await ctx.send(embed=embed, delete_after=20)
            return
    
    # T·∫°o loading message
    loading_embed = discord.Embed(
        title="üîç ƒêang t√¨m ki·∫øm ng∆∞·ªùi d√πng...",
        description=f"ƒêang t√¨m ki·∫øm: `{user_input}`",
        color=discord.Color.blue()
    )
    loading_msg = await ctx.send(embed=loading_embed)
    
    user = None
    user_id = None
    
    # TR∆Ø·ªúNG H·ª¢P 1: Ki·ªÉm tra n·∫øu l√† mention
    if user_input.startswith('<@') and user_input.endswith('>'):
        user_id = user_input[2:-1]
        if user_id.startswith('!'):
            user_id = user_id[1:]
        
        try:
            user_id = int(user_id)
            try:
                user = await bot.fetch_user(user_id)
            except discord.NotFound:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng t√¨m th·∫•y",
                    description=f"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: {user_id}",
                    color=discord.Color.red()
                )
                view = CloseButtonView(timeout=60)
                await loading_msg.edit(embed=embed, view=view)
                return
        except ValueError:
            embed = discord.Embed(
                title="‚ùå ID kh√¥ng h·ª£p l·ªá",
                description="ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá t·ª´ mention.",
                color=discord.Color.red()
            )
            view = CloseButtonView(timeout=60)
            await loading_msg.edit(embed=embed, view=view)
            return
    
    # TR∆Ø·ªúNG H·ª¢P 2: Ki·ªÉm tra n·∫øu l√† ID s·ªë
    elif user_input.isdigit():
        user_id = int(user_input)
        try:
            user = await bot.fetch_user(user_id)
        except discord.NotFound:
            embed = discord.Embed(
                title="‚ùå Kh√¥ng t√¨m th·∫•y",
                description=f"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: {user_id}",
                color=discord.Color.red()
            )
            view = CloseButtonView(timeout=60)
            await loading_msg.edit(embed=embed, view=view)
            return
    
    # TR∆Ø·ªúNG H·ª¢P 3: T√¨m ki·∫øm theo t√™n ng∆∞·ªùi d√πng
    else:
        # C·∫≠p nh·∫≠t loading message
        await loading_msg.edit(embed=discord.Embed(
            title="üîç ƒêang t√¨m ki·∫øm ng∆∞·ªùi d√πng theo t√™n...",
            description=f"ƒêang t√¨m ki·∫øm: `{user_input}`",
            color=discord.Color.blue()
        ))
        
        # T√¨m trong server tr∆∞·ªõc
        matching_members = []
        for member in ctx.guild.members:
            if user_input.lower() in member.name.lower() or (member.nick and user_input.lower() in member.nick.lower()):
                matching_members.append(member)
                
        # Ki·ªÉm tra trong ban list
        ban_matches = []
        try:
            ban_list = [ban async for ban in ctx.guild.bans()]
            for ban_entry in ban_list:
                banned_user = ban_entry.user
                if user_input.lower() in banned_user.name.lower():
                    ban_matches.append(banned_user)
        except:
            # X·ª≠ l√Ω n·∫øu kh√¥ng th·ªÉ l·∫•y ban list
            pass
        
        # N·∫øu c√≥ nhi·ªÅu k·∫øt qu·∫£
        if len(matching_members) + len(ban_matches) > 1:
            # ∆Øu ti√™n k·∫øt qu·∫£ kh·ªõp ch√≠nh x√°c
            exact_match = None
            for member in matching_members:
                if member.name.lower() == user_input.lower() or (member.nick and member.nick.lower() == user_input.lower()):
                    exact_match = member
                    break
            
            if not exact_match:
                for banned_user in ban_matches:
                    if banned_user.name.lower() == user_input.lower():
                        exact_match = banned_user
                        break
            
            # N·∫øu c√≥ k·∫øt qu·∫£ kh·ªõp ch√≠nh x√°c
            if exact_match:
                user = exact_match
                user_id = user.id
            else:
                # Hi·ªÉn th·ªã danh s√°ch k·∫øt qu·∫£ t√¨m ki·∫øm
                options_embed = discord.Embed(
                    title="üîç Nhi·ªÅu k·∫øt qu·∫£ t√¨m th·∫•y",
                    description=f"C√≥ {len(matching_members) + len(ban_matches)} ng∆∞·ªùi d√πng ph√π h·ª£p v·ªõi `{user_input}`.",
                    color=discord.Color.gold()
                )
                
                # Hi·ªÉn th·ªã c√°c th√†nh vi√™n trong server
                if matching_members:
                    member_list = "\n".join([f"{i+1}. {member.name} (ID: `{member.id}`) {member.mention}" 
                                        for i, member in enumerate(matching_members[:5])])
                    options_embed.add_field(
                        name="üü¢ Ng∆∞·ªùi d√πng trong server:",
                        value=member_list + (f"\n...v√† {len(matching_members) - 5} ng∆∞·ªùi kh√°c" if len(matching_members) > 5 else ""),
                        inline=False
                    )
                
                # Hi·ªÉn th·ªã ng∆∞·ªùi d√πng b·ªã ban
                if ban_matches:
                    ban_list = "\n".join([f"{len(matching_members) + i + 1}. {user.name} (ID: `{user.id}`) üö´ ƒê√£ b·ªã ban" 
                                    for i, user in enumerate(ban_matches[:5])])
                    options_embed.add_field(
                        name="üî¥ Ng∆∞·ªùi d√πng ƒë√£ b·ªã ban:",
                        value=ban_list + (f"\n...v√† {len(ban_matches) - 5} ng∆∞·ªùi kh√°c" if len(ban_matches) > 5 else ""),
                        inline=False
                    )
                
                options_embed.set_footer(text="Vui l√≤ng s·ª≠ d·ª•ng .checkban v·ªõi ID c·ª• th·ªÉ ƒë·ªÉ xem chi ti·∫øt m·ªôt ng∆∞·ªùi d√πng")
                await loading_msg.edit(embed=options_embed, view=CloseButtonView(timeout=60))
                return
        
        # N·∫øu kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£
        elif not matching_members and not ban_matches:
            embed = discord.Embed(
                title="‚ùå Kh√¥ng t√¨m th·∫•y",
                description=f"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o c√≥ t√™n: `{user_input}`",
                color=discord.Color.red()
            )
            view = CloseButtonView(timeout=60)
            await loading_msg.edit(embed=embed, view=view)
            return
        
        # N·∫øu ch·ªâ c√≥ m·ªôt k·∫øt qu·∫£ duy nh·∫•t
        else:
            user = matching_members[0] if matching_members else ban_matches[0]
            user_id = user.id
    
    # T·ª´ ƒë√¢y l√† code x·ª≠ l√Ω sau khi ƒë√£ c√≥ user v√† user_id
    try:
        # C·∫≠p nh·∫≠t embed loading
        loading_embed = discord.Embed(
            title="‚è≥ ƒêang ki·ªÉm tra th√¥ng tin ban...",
            description=f"ƒêang ki·ªÉm tra ng∆∞·ªùi d√πng: {user.mention} (ID: {user_id})",
            color=discord.Color.blue()
        )
        await loading_msg.edit(embed=loading_embed)
        
        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã ban kh√¥ng
        try:
            ban_entry = await ctx.guild.fetch_ban(user)
            # Ng∆∞·ªùi d√πng b·ªã ban
            embed = discord.Embed(
                title=f"üö´ Th√¥ng tin Ban: {user.name}",
                color=discord.Color.red()
            )
            
            embed.set_thumbnail(url=user.display_avatar.url)
            
            embed.add_field(name="T√™n ng∆∞·ªùi d√πng", value=f"{user.name}", inline=True)
            embed.add_field(name="ID", value=f"`{user.id}`", inline=True)
            embed.add_field(name="Th·ªùi gian t·∫°o t√†i kho·∫£n", value=discord.utils.format_dt(user.created_at, "F"), inline=False)
            
            reason = ban_entry.reason or "Kh√¥ng c√≥ l√Ω do ƒë∆∞·ª£c ghi nh·∫≠n"
            embed.add_field(name="L√Ω do ban", value=reason, inline=False)
            
            # Ki·ªÉm tra n·∫øu user t·ª´ng l√† th√†nh vi√™n c·ªßa server (th√¥ng qua role Premium)
            member = ctx.guild.get_member(user_id)
            if member:
                # Ki·ªÉm tra role Premium
                has_premium = any(role in premium_roles for role in member.roles)
                premium_status = "‚úÖ C√≥" if has_premium else "‚ùå Kh√¥ng"
                embed.add_field(name="üåü Role Premium", value=premium_status, inline=True)
            
            embed.set_footer(text="Tin nh·∫Øn n√†y s·∫Ω t·ª± ƒë·ªông ƒë√≥ng sau 2 ph√∫t")
            
            # Hi·ªÉn th·ªã n√∫t gi·∫£i ban v√† ƒë√≥ng
            view = BanInfoView(ctx.author, user, timeout=120)
            await loading_msg.edit(embed=embed, view=view)
            
        except discord.NotFound:
            # Ng∆∞·ªùi d√πng kh√¥ng b·ªã ban
            embed = discord.Embed(
                title=f"‚úÖ Ki·ªÉm tra Ban: {user.name}",
                description=f"Ng∆∞·ªùi d√πng n√†y kh√¥ng b·ªã ban trong server.",
                color=discord.Color.green()
            )
            
            embed.set_thumbnail(url=user.display_avatar.url)
            embed.add_field(name="T√™n ng∆∞·ªùi d√πng", value=f"{user.name}", inline=True)
            embed.add_field(name="ID", value=f"`{user.id}`", inline=True)
            
            # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ trong server kh√¥ng
            member = ctx.guild.get_member(user_id)
            if member:
                embed.add_field(name="Tr·∫°ng th√°i", value="ƒêang ·ªü trong server", inline=False)
                embed.add_field(name="Tham gia server t·ª´", value=discord.utils.format_dt(member.joined_at, "F"), inline=False)
                
                # Ki·ªÉm tra role Premium
                has_premium = False
                premium_role_names = []
                
                for role in member.roles:
                    if role in premium_roles:
                        has_premium = True
                        premium_role_names.append(role.name)
                
                if has_premium:
                    embed.add_field(
                        name="üåü Premium Status", 
                        value=f"‚úÖ Ng∆∞·ªùi d√πng c√≥ role Premium: {', '.join(premium_role_names)}", 
                        inline=False
                    )
                else:
                    embed.add_field(
                        name="üåü Premium Status", 
                        value="‚ùå Ng∆∞·ªùi d√πng kh√¥ng c√≥ role Premium", 
                        inline=False
                    )
            else:
                embed.add_field(name="Tr·∫°ng th√°i", value="Kh√¥ng ·ªü trong server", inline=False)
                embed.add_field(name="üåü Premium Status", value="‚ùì Kh√¥ng x√°c ƒë·ªãnh (kh√¥ng ·ªü trong server)", inline=False)
            
            embed.set_footer(text="Tin nh·∫Øn n√†y s·∫Ω t·ª± ƒë·ªông ƒë√≥ng sau 1 ph√∫t")
            
            # T·∫°o view v·ªõi n√∫t ƒë√≥ng
            view = CloseButtonView(timeout=60)
            await loading_msg.edit(embed=embed, view=view)
            
    except discord.Forbidden:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu quy·ªÅn",
            description="Bot kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin ban.",
            color=discord.Color.red()
        )
        await loading_msg.edit(embed=embed)
        # T·ª± ƒë·ªông x√≥a sau 20 gi√¢y
        await asyncio.sleep(20)
        await loading_msg.delete()
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            color=discord.Color.red()
        )
        await loading_msg.edit(embed=embed)
        # T·ª± ƒë·ªông x√≥a sau 20 gi√¢y
        await asyncio.sleep(20)
        await loading_msg.delete()

# View v·ªõi n√∫t ƒë√≥ng c∆° b·∫£n
class CloseButtonView(discord.ui.View):
    def __init__(self, timeout=60):
        super().__init__(timeout=timeout)
    
    @discord.ui.button(label="ƒê√≥ng", style=discord.ButtonStyle.gray, emoji="‚ùå")
    async def close_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.message.delete()
    
    # Khi view h·∫øt h·∫°n
    async def on_timeout(self):
        message = self.message
        if message:
            try:
                # Th·ª≠ x√≥a tin nh·∫Øn khi h·∫øt th·ªùi gian
                await message.delete()
            except:
                # N·∫øu kh√¥ng x√≥a ƒë∆∞·ª£c, th·ª≠ c·∫≠p nh·∫≠t ƒë·ªÉ v√¥ hi·ªáu h√≥a c√°c n√∫t
                try:
                    for item in self.children:
                        item.disabled = True
                    await message.edit(view=self)
                except:
                    pass

# View v·ªõi n√∫t unban v√† ƒë√≥ng cho ng∆∞·ªùi d√πng b·ªã ban
class BanInfoView(discord.ui.View):
    def __init__(self, author, user, timeout=120):
        super().__init__(timeout=timeout)
        self.author = author
        self.user = user
    
    @discord.ui.button(label="Unban", style=discord.ButtonStyle.danger)
    async def unban_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.author:
            await interaction.response.send_message("B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi th·ª±c hi·ªán l·ªánh n√†y!", ephemeral=True)
            return
            
        if not interaction.user.guild_permissions.ban_members:
            await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn unban!", ephemeral=True)
            return
            
        try:
            await interaction.guild.unban(self.user, reason=f"Unban b·ªüi {interaction.user}")
            unban_embed = discord.Embed(
                title="‚úÖ ƒê√£ gi·∫£i ban",
                description=f"ƒê√£ gi·∫£i ban cho {self.user.name} (`{self.user.id}`)",
                color=discord.Color.green()
            )
            
            # V√¥ hi·ªáu h√≥a t·∫•t c·∫£ c√°c n√∫t
            for item in self.children:
                item.disabled = True
                
            await interaction.response.edit_message(embed=unban_embed, view=self)
            
            # T·ª± ƒë·ªông x√≥a sau 10 gi√¢y sau khi unban
            await asyncio.sleep(10)
            try:
                await interaction.message.delete()
            except:
                pass
                
        except Exception as e:
            await interaction.response.send_message(f"L·ªói khi gi·∫£i ban: {e}", ephemeral=True)
    
    @discord.ui.button(label="ƒê√≥ng", style=discord.ButtonStyle.gray, emoji="‚ùå")
    async def close_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.author and not interaction.user.guild_permissions.ban_members:
            await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë√≥ng th√¥ng tin n√†y!", ephemeral=True)
            return
            
        await interaction.message.delete()
    
    # Khi view h·∫øt h·∫°n
    async def on_timeout(self):
        message = self.message
        if message:
            try:
                # Th·ª≠ x√≥a tin nh·∫Øn khi h·∫øt th·ªùi gian
                await message.delete()
            except:
                # N·∫øu kh√¥ng x√≥a ƒë∆∞·ª£c, th·ª≠ c·∫≠p nh·∫≠t ƒë·ªÉ v√¥ hi·ªáu h√≥a c√°c n√∫t
                try:
                    for item in self.children:
                        item.disabled = True
                    await message.edit(view=self)
                except:
                    pass

@check_ban.error
async def check_ban_error(ctx, error):
    """X·ª≠ l√Ω l·ªói cho l·ªánh check_ban"""
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå Thi·∫øu quy·ªÅn",
            description="B·∫°n c·∫ßn c√≥ quy·ªÅn `Ban Members` ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    elif isinstance(error, commands.BadArgument):
        embed = discord.Embed(
            title="‚ùå ƒê·ªëi s·ªë kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng cung c·∫•p ID ng∆∞·ªùi d√πng h·ª£p l·ªá.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='giveaway', aliases=['gw'])
@commands.has_permissions(manage_messages=True)
async def giveaway(ctx, duration: str = None, winners: int = 1, *, prize: str = None):
    """T·∫°o m·ªôt giveaway v·ªõi th·ªùi gian, s·ªë ng∆∞·ªùi th·∫Øng v√† gi·∫£i th∆∞·ªüng
    
    V√≠ d·ª•: .giveaway 1h 1 100 xu
    Th·ªùi gian h·ªó tr·ª£: s (gi√¢y), m (ph√∫t), h (gi·ªù), d (ng√†y)
    """
    if duration is None or prize is None:
        embed = discord.Embed(
            title="üéÅ Giveaway - H∆∞·ªõng D·∫´n",
            description="T·∫°o giveaway cho server.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.giveaway <th·ªùi_gian> <s·ªë_ng∆∞·ªùi_th·∫Øng> <gi·∫£i_th∆∞·ªüng>`",
            inline=False
        )
        embed.add_field(
            name="V√≠ d·ª•",
            value="`.giveaway 1h 1 100 xu` - T·∫°o giveaway 100 xu trong 1 gi·ªù v·ªõi 1 ng∆∞·ªùi th·∫Øng\n"
                  "`.giveaway 10m 3 Nitro Classic` - T·∫°o giveaway Nitro cho 3 ng∆∞·ªùi th·∫Øng trong 10 ph√∫t",
            inline=False
        )
        embed.add_field(
            name="ƒê∆°n v·ªã th·ªùi gian",
            value="s - Gi√¢y | m - Ph√∫t | h - Gi·ªù | d - Ng√†y",
            inline=False
        )
        embed.add_field(
            name="L·ªánh li√™n quan",
            value="`.gend <message_id>` - K·∫øt th√∫c giveaway s·ªõm\n"
                  "`.greroll <message_id>` - Ch·ªçn l·∫°i ng∆∞·ªùi th·∫Øng",
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    # Ph√¢n t√≠ch th·ªùi gian
    total_seconds = 0
    if duration.endswith("s"):
        total_seconds = int(duration[:-1])
    elif duration.endswith("m"):
        total_seconds = int(duration[:-1]) * 60
    elif duration.endswith("h"):
        total_seconds = int(duration[:-1]) * 3600
    elif duration.endswith("d"):
        total_seconds = int(duration[:-1]) * 86400
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng s (gi√¢y), m (ph√∫t), h (gi·ªù), d (ng√†y).",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # Gi·ªõi h·∫°n th·ªùi gian h·ª£p l√Ω
    if total_seconds < 10:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Th·ªùi gian giveaway ph·∫£i √≠t nh·∫•t 10 gi√¢y.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    if total_seconds > 2592000:  # 30 ng√†y
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Th·ªùi gian giveaway kh√¥ng th·ªÉ qu√° 30 ng√†y.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # Gi·ªõi h·∫°n s·ªë ng∆∞·ªùi th·∫Øng
    if winners < 1:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="S·ªë ng∆∞·ªùi th·∫Øng ph·∫£i √≠t nh·∫•t l√† 1.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    if winners > 20:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="S·ªë ng∆∞·ªùi th·∫Øng kh√¥ng th·ªÉ qu√° 20.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # T√≠nh th·ªùi gian k·∫øt th√∫c
    end_time = datetime.now() + timedelta(seconds=total_seconds)
    
    # T·∫°o embed giveaway
    embed = discord.Embed(
        title="üéÅ GIVEAWAY",
        description=f"**{prize}**",
        color=discord.Color.gold()
    )
    
    # Th√™m th√¥ng tin giveaway
    embed.add_field(
        name="K·∫øt th√∫c",
        value=f"<t:{int(end_time.timestamp())}:R>",
        inline=True
    )
    
    embed.add_field(
        name="S·ªë ng∆∞·ªùi th·∫Øng",
        value=f"{winners}",
        inline=True
    )
    
    embed.add_field(
        name="T·ªï ch·ª©c b·ªüi",
        value=ctx.author.mention,
        inline=True
    )
    
    embed.set_footer(text=f"K·∫øt th√∫c v√†o: {end_time.strftime('%d/%m/%Y %H:%M:%S')} | Nh·∫•n üéâ ƒë·ªÉ tham gia")
    
    # G·ª≠i th√¥ng b√°o giveaway
    giveaway_msg = await ctx.send(embed=embed)
    await giveaway_msg.add_reaction("üéâ")
    
    # L∆∞u th√¥ng tin giveaway
    active_giveaways[giveaway_msg.id] = {
        "prize": prize,
        "end_time": end_time,
        "host": ctx.author.id,
        "channel_id": ctx.channel.id,
        "winners": winners
    }
    
    # G·ª≠i x√°c nh·∫≠n cho ng∆∞·ªùi t·∫°o
    confirm_embed = discord.Embed(
        title="‚úÖ Giveaway ƒë√£ t·∫°o",
        description=f"Giveaway **{prize}** ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!",
        color=discord.Color.green()
    )
    confirm_embed.add_field(
        name="Th√¥ng tin",
        value=f"ID: `{giveaway_msg.id}`\nK·∫øt th√∫c: <t:{int(end_time.timestamp())}:R>",
        inline=False
    )
    confirm_embed.add_field(
        name="Qu·∫£n l√Ω giveaway",
        value=f"K·∫øt th√∫c s·ªõm: `.gend {giveaway_msg.id}`\nCh·ªçn l·∫°i ng∆∞·ªùi th·∫Øng: `.greroll {giveaway_msg.id}`",
        inline=False
    )
    
    await ctx.author.send(embed=confirm_embed)
    
    # Thi·∫øt l·∫≠p t√°c v·ª• ch·ªù k·∫øt th√∫c giveaway
    await asyncio.sleep(total_seconds)
    await end_giveaway(giveaway_msg.id)

async def end_giveaway(message_id):
    """K·∫øt th√∫c giveaway v√† ch·ªçn ng∆∞·ªùi th·∫Øng"""
    if message_id not in active_giveaways:
        return
    
    # L·∫•y th√¥ng tin giveaway
    giveaway_info = active_giveaways[message_id]
    prize = giveaway_info["prize"]
    channel_id = giveaway_info["channel_id"]
    winners_count = giveaway_info["winners"]
    
    # L·∫•y channel v√† message
    channel = bot.get_channel(channel_id)
    if not channel:
        del active_giveaways[message_id]
        return
    
    try:
        message = await channel.fetch_message(message_id)
    except:
        del active_giveaways[message_id]
        return
    
    # T√¨m t·∫•t c·∫£ ng∆∞·ªùi tham gia (lo·∫°i b·ªè bot v√† ng∆∞·ªùi t·∫°o giveaway)
    reaction = discord.utils.get(message.reactions, emoji="üéâ")
    if not reaction:
        # Kh√¥ng c√≥ ai tham gia
        embed = message.embeds[0]
        embed.title = "üéÅ GIVEAWAY K·∫æT TH√öC"
        embed.description = f"**{prize}**\n\n‚ùå Kh√¥ng c√≥ ng∆∞·ªùi tham gia h·ª£p l·ªá."
        embed.color = discord.Color.red()
        
        await message.edit(embed=embed)
        await channel.send(f"‚ùå Giveaway **{prize}** ƒë√£ k·∫øt th√∫c nh∆∞ng kh√¥ng c√≥ ng∆∞·ªùi tham gia n√†o!")
        
        del active_giveaways[message_id]
        return
    
    # L·∫•y danh s√°ch ng∆∞·ªùi tham gia
    users = []
    async for user in reaction.users():
        if not user.bot:  # Lo·∫°i b·ªè bot
            users.append(user)
    
    # Ki·ªÉm tra s·ªë ng∆∞·ªùi tham gia
    if not users:
        # Kh√¥ng c√≥ ai tham gia
        embed = message.embeds[0]
        embed.title = "üéÅ GIVEAWAY K·∫æT TH√öC"
        embed.description = f"**{prize}**\n\n‚ùå Kh√¥ng c√≥ ng∆∞·ªùi tham gia h·ª£p l·ªá."
        embed.color = discord.Color.red()
        
        await message.edit(embed=embed)
        await channel.send(f"‚ùå Giveaway **{prize}** ƒë√£ k·∫øt th√∫c nh∆∞ng kh√¥ng c√≥ ng∆∞·ªùi tham gia n√†o!")
        
        del active_giveaways[message_id]
        return
    
    # Ch·ªçn ng∆∞·ªùi th·∫Øng
    winners_needed = min(winners_count, len(users))
    winners = random.sample(users, winners_needed)
    
    # C·∫≠p nh·∫≠t embed giveaway
    embed = message.embeds[0]
    embed.title = "üéÅ GIVEAWAY K·∫æT TH√öC"
    
    # Hi·ªÉn th·ªã ng∆∞·ªùi th·∫Øng
    winners_text = ", ".join([winner.mention for winner in winners])
    embed.description = f"**{prize}**\n\nüèÜ Ng∆∞·ªùi th·∫Øng: {winners_text}"
    embed.color = discord.Color.green()
    
    # C·∫≠p nh·∫≠t footer
    embed.set_footer(text=f"Giveaway ƒë√£ k·∫øt th√∫c | ID: {message_id}")
    
    await message.edit(embed=embed)
    
    # G·ª≠i th√¥ng b√°o k·∫øt qu·∫£
    await channel.send(f"üéâ Ch√∫c m·ª´ng {winners_text}! B·∫°n ƒë√£ th·∫Øng **{prize}**!")
    
    # X√≥a kh·ªèi danh s√°ch giveaway ƒëang ho·∫°t ƒë·ªông
    del active_giveaways[message_id]

@bot.command(name='gend', aliases=['giveawayend', 'endgiveaway'])
@commands.has_permissions(manage_messages=True)
async def end_giveaway_command(ctx, message_id: int = None):
    """K·∫øt th√∫c giveaway s·ªõm v·ªõi message ID c·ªßa giveaway"""
    if message_id is None:
        embed = discord.Embed(
            title="‚ùì K·∫øt th√∫c Giveaway - H∆∞·ªõng D·∫´n",
            description="K·∫øt th√∫c giveaway s·ªõm v√† ch·ªçn ng∆∞·ªùi th·∫Øng.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.gend <message_id>`",
            inline=False
        )
        embed.add_field(
            name="L∆∞u √Ω",
            value="Message ID l√† ID c·ªßa tin nh·∫Øn giveaway.\nB·∫°n c√≥ th·ªÉ l·∫•y ID n√†y b·∫±ng c√°ch nh·∫•p ph·∫£i v√†o tin nh·∫Øn giveaway v√† ch·ªçn 'Copy ID'.",
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra xem giveaway c√≥ t·ªìn t·∫°i kh√¥ng
    if message_id not in active_giveaways:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng t√¨m th·∫•y giveaway v·ªõi ID n√†y ho·∫∑c giveaway ƒë√£ k·∫øt th√∫c.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† host ho·∫∑c admin kh√¥ng
    giveaway_info = active_giveaways[message_id]
    if ctx.author.id != giveaway_info["host"] and not ctx.author.guild_permissions.administrator:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu quy·ªÅn",
            description="B·∫°n kh√¥ng ph·∫£i l√† ng∆∞·ªùi t·∫°o giveaway n√†y v√† kh√¥ng c√≥ quy·ªÅn qu·∫£n tr·ªã vi√™n.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # G·ª≠i th√¥ng b√°o ƒëang k·∫øt th√∫c
    embed = discord.Embed(
        title="‚è≥ ƒêang k·∫øt th√∫c giveaway...",
        description=f"ƒêang k·∫øt th√∫c giveaway v·ªõi ID: `{message_id}`",
        color=discord.Color.orange()
    )
    message = await ctx.send(embed=embed)
    
    # K·∫øt th√∫c giveaway
    await end_giveaway(message_id)
    
    # C·∫≠p nh·∫≠t th√¥ng b√°o
    embed = discord.Embed(
        title="‚úÖ ƒê√£ k·∫øt th√∫c giveaway",
        description=f"Giveaway v·ªõi ID: `{message_id}` ƒë√£ ƒë∆∞·ª£c k·∫øt th√∫c th√†nh c√¥ng.",
        color=discord.Color.green()
    )
    await message.edit(embed=embed)

@bot.command(name='greroll', aliases=['giveawayreroll', 'reroll'])
@commands.has_permissions(manage_messages=True)
async def reroll_giveaway(ctx, message_id: int = None):
    """Ch·ªçn l·∫°i ng∆∞·ªùi th·∫Øng cho giveaway ƒë√£ k·∫øt th√∫c"""
    if message_id is None:
        embed = discord.Embed(
            title="‚ùì Reroll Giveaway - H∆∞·ªõng D·∫´n",
            description="Ch·ªçn l·∫°i ng∆∞·ªùi th·∫Øng cho giveaway ƒë√£ k·∫øt th√∫c.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.greroll <message_id>`",
            inline=False
        )
        embed.add_field(
            name="L∆∞u √Ω",
            value="Message ID l√† ID c·ªßa tin nh·∫Øn giveaway.\nB·∫°n c√≥ th·ªÉ l·∫•y ID n√†y b·∫±ng c√°ch nh·∫•p ph·∫£i v√†o tin nh·∫Øn giveaway v√† ch·ªçn 'Copy ID'.",
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra xem giveaway ƒë√£ k·∫øt th√∫c ch∆∞a (kh√¥ng c√≤n trong active_giveaways)
    if message_id in active_giveaways:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Giveaway n√†y v·∫´n ƒëang di·ªÖn ra. B·∫°n ch·ªâ c√≥ th·ªÉ reroll giveaway ƒë√£ k·∫øt th√∫c.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # L·∫•y tin nh·∫Øn giveaway
    try:
        message = await ctx.channel.fetch_message(message_id)
    except:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng t√¨m th·∫•y tin nh·∫Øn giveaway v·ªõi ID n√†y trong k√™nh hi·ªán t·∫°i.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra xem c√≥ ph·∫£i l√† tin nh·∫Øn giveaway kh√¥ng
    if not message.embeds or "GIVEAWAY" not in message.embeds[0].title:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Tin nh·∫Øn n√†y kh√¥ng ph·∫£i l√† m·ªôt giveaway.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # L·∫•y th√¥ng tin gi·∫£i th∆∞·ªüng t·ª´ embed
    giveaway_embed = message.embeds[0]
    prize = giveaway_embed.description
    if "**" in prize:
        prize = prize.split("**")[1]
    
    # L·∫•y reaction t·ª´ tin nh·∫Øn
    reaction = discord.utils.get(message.reactions, emoji="üéâ")
    if not reaction:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng c√≥ ng∆∞·ªùi tham gia n√†o trong giveaway n√†y.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # L·∫•y danh s√°ch ng∆∞·ªùi tham gia
    users = []
    async for user in reaction.users():
        if not user.bot:  # Lo·∫°i b·ªè bot
            users.append(user)
    
    # Ki·ªÉm tra s·ªë ng∆∞·ªùi tham gia
    if not users:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng c√≥ ng∆∞·ªùi tham gia h·ª£p l·ªá trong giveaway n√†y.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # Ch·ªçn m·ªôt ng∆∞·ªùi th·∫Øng m·ªõi
    winner = random.choice(users)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ reroll
    embed = discord.Embed(
        title="üéâ Reroll Giveaway",
        description=f"Ng∆∞·ªùi th·∫Øng m·ªõi cho **{prize}** l√†: {winner.mention}",
        color=discord.Color.gold()
    )
    
    embed.set_footer(text=f"Giveaway ID: {message_id}")
    
    await ctx.send(embed=embed)
    await ctx.send(f"üéâ Ch√∫c m·ª´ng {winner.mention}! B·∫°n ƒë√£ th·∫Øng **{prize}** t·ª´ reroll!")

@bot.command(name='glist', aliases=['giveawaylist', 'giveaways'])
@commands.has_permissions(manage_messages=True)
async def list_giveaways(ctx):
    """Hi·ªÉn th·ªã danh s√°ch c√°c giveaway ƒëang ho·∫°t ƒë·ªông"""
    if not active_giveaways:
        embed = discord.Embed(
            title="üìã Danh s√°ch Giveaway",
            description="Kh√¥ng c√≥ giveaway n√†o ƒëang di·ªÖn ra.",
            color=discord.Color.blue()
        )
        await ctx.send(embed=embed)
        return
    
    embed = discord.Embed(
        title="üìã Danh s√°ch Giveaway ƒêang Di·ªÖn Ra",
        description=f"C√≥ **{len(active_giveaways)}** giveaway ƒëang di·ªÖn ra:",
        color=discord.Color.gold()
    )
    
    for msg_id, gw_info in active_giveaways.items():
        prize = gw_info["prize"]
        end_time = gw_info["end_time"]
        host_id = gw_info["host"]
        winners = gw_info["winners"]
        
        # L·∫•y th√¥ng tin ng∆∞·ªùi t·∫°o giveaway
        try:
            host = await bot.fetch_user(host_id)
            host_name = host.name
        except:
            host_name = f"User ID: {host_id}"
        
        # T·∫°o field cho m·ªói giveaway
        time_remaining = int((end_time - datetime.now()).total_seconds())
        if time_remaining > 0:
            time_text = f"<t:{int(end_time.timestamp())}:R>"
        else:
            time_text = "ƒêang k·∫øt th√∫c..."
        
        embed.add_field(
            name=f"üéÅ {prize}",
            value=(
                f"**ID:** `{msg_id}`\n"
                f"**K·∫øt th√∫c:** {time_text}\n"
                f"**S·ªë ng∆∞·ªùi th·∫Øng:** {winners}\n"
                f"**T·ªï ch·ª©c b·ªüi:** {host_name}"
            ),
            inline=False
        )
    
    embed.set_footer(text="S·ª≠ d·ª•ng .gend <ID> ƒë·ªÉ k·∫øt th√∫c giveaway")
    await ctx.send(embed=embed)

# C·∫ßn th√™m task ƒë·ªÉ t·ª± ƒë·ªông k·∫øt th√∫c giveaway khi ƒë·∫øn th·ªùi gian
@tasks.loop(minutes=1.0)
async def check_giveaways():
    """Ki·ªÉm tra v√† k·∫øt th√∫c giveaway ƒë√£ h·∫øt th·ªùi gian"""
    current_time = datetime.now()
    
    # T·∫°o danh s√°ch c√°c giveaway c·∫ßn k·∫øt th√∫c ƒë·ªÉ tr√°nh RuntimeError khi s·ª≠a ƒë·ªïi dict trong v√≤ng l·∫∑p
    to_end = []
    
    for msg_id, gw_info in active_giveaways.items():
        end_time = gw_info["end_time"]
        if current_time >= end_time:
            to_end.append(msg_id)
    
    # K·∫øt th√∫c c√°c giveaway
    for msg_id in to_end:
        await end_giveaway(msg_id)

# B·∫Øt ƒë·∫ßu task ki·ªÉm tra giveaway khi bot kh·ªüi ƒë·ªông
@bot.event
async def on_ready():
    check_giveaways.start()


@bot.command(name='tkey')
@admin_only()
async def create_key(ctx, key_type: str = None, input_value: str = None, time_input: str = None, count: int = 1, target: discord.Member = None, *, additional_info: str = None):
    """Admin command ƒë·ªÉ t·∫°o nhi·ªÅu key ƒë·ªïi xu ho·∫∑c role c√πng l√∫c v√† g·ª≠i cho ng∆∞·ªùi d√πng ch·ªâ ƒë·ªãnh
    
    S·ª≠ d·ª•ng:
    .tkey xu [s·ªë xu] [s·ªë l∆∞·ª£t d√πng] [s·ªë l∆∞·ª£ng key] [@ng∆∞·ªùi_nh·∫≠n (t√πy ch·ªçn)] - T·∫°o key ƒë·ªïi xu
    .tkey role [role_id/role_name] [th·ªùi h·∫°n] [s·ªë l∆∞·ª£ng key] [@ng∆∞·ªùi_nh·∫≠n (t√πy ch·ªçn)] - T·∫°o key ƒë·ªïi role
    
    Th·ªùi h·∫°n c√≥ th·ªÉ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh b·∫±ng: 
    - S·ªë gi√¢y: 3600
    - Ho·∫∑c ƒë·ªãnh d·∫°ng: 1d2h3m4s (1 ng√†y 2 gi·ªù 3 ph√∫t 4 gi√¢y)
    - S·ª≠ d·ª•ng 0 cho role vƒ©nh vi·ªÖn
    """
    if key_type is None or key_type.lower() not in ["xu", "role"]:
        embed = discord.Embed(
            title="üîë T·∫°o Key - H∆∞·ªõng D·∫´n",
            description="T·∫°o key ƒë·ªÉ ng∆∞·ªùi d√πng ƒë·ªïi xu ho·∫∑c ƒë·ªïi role.",
            color=discord.Color.blue())
        embed.add_field(
            name="T·∫°o key ƒë·ªïi xu", 
            value="`.tkey xu [s·ªë xu] [s·ªë l∆∞·ª£t d√πng (m·∫∑c ƒë·ªãnh: 1)] [s·ªë l∆∞·ª£ng key (m·∫∑c ƒë·ªãnh: 1)] [@ng∆∞·ªùi_nh·∫≠n (t√πy ch·ªçn)]`\n" + 
                  "V√≠ d·ª•: `.tkey xu 1000 1 5` ƒë·ªÉ t·∫°o 5 key ƒë·ªïi xu", 
            inline=False)
        embed.add_field(
            name="T·∫°o key ƒë·ªïi role", 
            value="`.tkey role [role_id/role_name] [th·ªùi h·∫°n] [s·ªë l∆∞·ª£ng key (m·∫∑c ƒë·ªãnh: 1)] [@ng∆∞·ªùi_nh·∫≠n (t√πy ch·ªçn)]`\n" + 
                  "V√≠ d·ª•: `.tkey role VIP 1d 5` ƒë·ªÉ t·∫°o 5 key cho role VIP v·ªõi th·ªùi h·∫°n 1 ng√†y\n" +
                  "V√≠ d·ª•: `.tkey role 1234567890 12h30m 1` ƒë·ªÉ t·∫°o 1 key th·ªùi h·∫°n 12 gi·ªù 30 ph√∫t\n" +
                  "V√≠ d·ª•: `.tkey role \"Admin Role\" 0 1` ƒë·ªÉ t·∫°o 1 key cho role t√™n 'Admin Role' vƒ©nh vi·ªÖn", 
            inline=False)
        embed.add_field(
            name="ƒê·ªãnh d·∫°ng th·ªùi h·∫°n",
            value="- S·ªë gi√¢y: `3600`\n" +
                  "- ƒê·ªãnh d·∫°ng: `1d2h3m4s` = 1 ng√†y 2 gi·ªù 3 ph√∫t 4 gi√¢y\n" +
                  "- S·ª≠ d·ª•ng `0` cho role vƒ©nh vi·ªÖn",
            inline=False
        )
        await ctx.send(embed=embed)
        return

    # X√≥a l·ªánh g·ªëc ngay l·∫≠p t·ª©c
    try:
        await ctx.message.delete()
    except:
        pass

    # X·ª≠ l√Ω d·ª±a v√†o lo·∫°i key
    key_type = key_type.lower()
    
    if key_type == "xu":
        # Validate amount
        try:
            amount = int(input_value)
            if amount <= 0:
                embed = discord.Embed(
                    title="‚ùå L·ªói",
                    description="S·ªë xu ph·∫£i l·ªõn h∆°n 0.",
                    color=discord.Color.red())
                await ctx.send(embed=embed, delete_after=5)
                return
        except (ValueError, TypeError):
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="S·ªë xu kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p m·ªôt s·ªë nguy√™n d∆∞∆°ng.",
                color=discord.Color.red())
            await ctx.send(embed=embed, delete_after=5)
            return
        
        # Validate uses
        try:
            uses = int(time_input) if time_input is not None else 1
            if uses <= 0:
                embed = discord.Embed(
                    title="‚ùå L·ªói",
                    description="S·ªë l∆∞·ª£t s·ª≠ d·ª•ng ph·∫£i l·ªõn h∆°n 0.",
                    color=discord.Color.red())
                await ctx.send(embed=embed, delete_after=5)
                return
        except (ValueError, TypeError):
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="S·ªë l∆∞·ª£t s·ª≠ d·ª•ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p m·ªôt s·ªë nguy√™n d∆∞∆°ng.",
                color=discord.Color.red())
            await ctx.send(embed=embed, delete_after=5)
            return

        # T·∫°o key ƒë·ªïi xu
        await create_currency_keys(ctx, amount, uses, count, target)
    
    elif key_type == "role":
        # T√¨m role d·ª±a tr√™n ID ho·∫∑c t√™n
        role = None
        
        # Tr∆∞·ªùng h·ª£p 1: input_value l√† ID role
        if input_value and input_value.isdigit():
            role_id = int(input_value)
            role = ctx.guild.get_role(role_id)
            
        # Tr∆∞·ªùng h·ª£p 2: input_value l√† t√™n role
        if role is None and input_value:
            # T√¨m ki·∫øm c√≥ ph√¢n bi·ªát t√™n role ch√≠nh x√°c
            if input_value.startswith('"') and input_value.endswith('"'):
                # T√¨m ki·∫øm role v·ªõi t√™n ch√≠nh x√°c trong d·∫•u ngo·∫∑c k√©p
                role_name = input_value[1:-1]  # Lo·∫°i b·ªè d·∫•u ngo·∫∑c k√©p
                role = discord.utils.get(ctx.guild.roles, name=role_name)
            else:
                # T√¨m ki·∫øm g·∫ßn ƒë√∫ng v·ªõi t√™n role
                input_lower = input_value.lower()
                for guild_role in ctx.guild.roles:
                    if input_lower == guild_role.name.lower() or input_lower in guild_role.name.lower():
                        role = guild_role
                        break
        
        if role is None:
            embed = discord.Embed(
                title="‚ùå Role kh√¥ng t·ªìn t·∫°i",
                description=f"Kh√¥ng th·ªÉ t√¨m th·∫•y role v·ªõi ID ho·∫∑c t√™n '{input_value}'.\n" +
                            "N·∫øu t√™n role c√≥ d·∫•u c√°ch, h√£y ƒë·∫∑t trong d·∫•u ngo·∫∑c k√©p, v√≠ d·ª•: `.tkey role \"Admin Role\" 1d 1`",
                color=discord.Color.red())
            await ctx.send(embed=embed, delete_after=5)
            return
            
        # Ph√¢n t√≠ch time_input th√†nh s·ªë gi√¢y
        duration = 0
        if time_input is None or time_input == "0":
            # Vƒ©nh vi·ªÖn
            duration = 0
        elif time_input.isdigit():
            # Ch·ªâ l√† s·ªë gi√¢y
            duration = int(time_input)
        else:
            # Ph√¢n t√≠ch c√∫ ph√°p nh∆∞ 1d2h3m4s
            duration = parse_time_format(time_input)
            if duration is None:
                embed = discord.Embed(
                    title="‚ùå ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá",
                    description="Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng nh∆∞ `1d2h3m4s` ho·∫∑c s·ªë gi√¢y ho·∫∑c 0 cho vƒ©nh vi·ªÖn.",
                    color=discord.Color.red())
                await ctx.send(embed=embed, delete_after=5)
                return

        # T·∫°o key ƒë·ªïi role
        await create_role_keys(ctx, role, duration, count, target)

def parse_time_format(time_str):
    """Ph√¢n t√≠ch chu·ªói ƒë·ªãnh d·∫°ng th·ªùi gian nh∆∞ 1d2h3m4s th√†nh s·ªë gi√¢y"""
    total_seconds = 0
    current_number = ""
    
    for char in time_str:
        if char.isdigit():
            current_number += char
        elif char.lower() in ['d', 'h', 'm', 's']:
            if current_number:
                value = int(current_number)
                if char.lower() == 'd':
                    total_seconds += value * 86400  # 1 ng√†y = 86400 gi√¢y
                elif char.lower() == 'h':
                    total_seconds += value * 3600   # 1 gi·ªù = 3600 gi√¢y
                elif char.lower() == 'm':
                    total_seconds += value * 60     # 1 ph√∫t = 60 gi√¢y
                elif char.lower() == 's':
                    total_seconds += value          # gi√¢y
                current_number = ""
        else:
            # K√Ω t·ª± kh√¥ng h·ª£p l·ªá
            return None
    
    # N·∫øu c√≤n s·ªë d∆∞ m√† kh√¥ng c√≥ k√Ω t·ª± ƒë∆°n v·ªã, coi nh∆∞ gi√¢y
    if current_number:
        try:
            total_seconds += int(current_number)
        except ValueError:
            return None
    
    return total_seconds

async def create_role_keys(ctx, role, duration, count, target):
    """H√†m ph·ª• gi√∫p t·∫°o key ƒë·ªïi role"""
    # Validate count
    if count <= 0:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="S·ªë l∆∞·ª£ng key ph·∫£i l·ªõn h∆°n 0.",
            color=discord.Color.red())
        await ctx.send(embed=embed, delete_after=5)
        return
    
    # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng key c√≥ th·ªÉ t·∫°o m·ªôt l√∫c ƒë·ªÉ tr√°nh spam
    if count > 100:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng th·ªÉ t·∫°o qu√° 100 key c√πng l√∫c.",
            color=discord.Color.red())
        await ctx.send(embed=embed, delete_after=5)
        return

    # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫°o cho l∆∞·ª£ng key l·ªõn
    if count > 10:
        creating_embed = discord.Embed(
            title="‚è≥ ƒêang t·∫°o key...",
            description=f"ƒêang t·∫°o {count} key ƒë·ªïi role v·ªõi role {role.name}.",
            color=discord.Color.blue())
        creating_msg = await ctx.send(embed=creating_embed)

    # Danh s√°ch l∆∞u c√°c key ƒë√£ t·∫°o
    created_keys = []
    
    # Generate multiple random keys
    key_length = 12
    for _ in range(count):
        key_code = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=key_length))
        
        # Create role key
        active_keys[key_code] = {
            "uses": 1,  # Role keys typically have only one use
            "created_by": ctx.author.id,
            "redeemed_by": [],
            "creation_time": datetime.now(),
            "type": "role",  # ƒê√°nh d·∫•u lo·∫°i key l√† ƒë·ªïi role
            "role_info": {
                "role_id": role.id,
                "role_name": role.name,
                "duration": duration if duration > 0 else None  # None = permanent
            }
        }
        created_keys.append(key_code)

    # ƒê·ªãnh d·∫°ng th·ªùi h·∫°n role ƒë·ªÉ hi·ªÉn th·ªã
    if duration <= 0:
        duration_text = "vƒ©nh vi·ªÖn"
    else:
        days, remainder = divmod(duration, 86400)
        hours, remainder = divmod(remainder, 3600)
        minutes, remainder = divmod(remainder, 60)
        seconds = remainder
        
        duration_parts = []
        if days > 0:
            duration_parts.append(f"{days} ng√†y")
        if hours > 0:
            duration_parts.append(f"{hours} gi·ªù")
        if minutes > 0:
            duration_parts.append(f"{minutes} ph√∫t")
        if seconds > 0:
            duration_parts.append(f"{seconds} gi√¢y")
            
        duration_text = " ".join(duration_parts) if duration_parts else "0 gi√¢y"

    # Send success embed to channel
    embed = discord.Embed(
        title="‚úÖ T·∫°o Key ƒê·ªïi Role Th√†nh C√¥ng",
        description=f"ƒê√£ t·∫°o **{count}** key ƒë·ªïi role **{role.name}** (ID: {role.id}).",
        color=discord.Color.green())
    embed.add_field(name="‚è±Ô∏è Th·ªùi h·∫°n role", value=duration_text, inline=True)
    embed.add_field(name="üë§ T·∫°o b·ªüi", value=f"{ctx.author.mention}", inline=False)
    
    # X√°c ƒë·ªãnh ng∆∞·ªùi nh·∫≠n key
    recipient = target if target else ctx.author
    if target:
        embed.add_field(name="üì© G·ª≠i ƒë·∫øn", value=f"{target.mention}", inline=False)
    
    embed.add_field(name="üóÇÔ∏è Qu·∫£n l√Ω", value="C√°c key ƒë∆∞·ª£c t·ª± ƒë·ªông x√≥a sau khi s·ª≠ d·ª•ng", inline=False)
    embed.set_footer(text=f"Key ƒë∆∞·ª£c g·ª≠i qua DM cho {recipient.name}")
    
    # C·∫≠p nh·∫≠t th√¥ng b√°o n·∫øu ƒë√£ hi·ªÉn th·ªã
    if count > 10:
        await creating_msg.edit(embed=embed)
    else:
        await ctx.send(embed=embed, delete_after=10)
    
    # Send keys privately to recipient
    await send_keys_to_user(ctx, recipient, created_keys, f"Role {role.name} ({duration_text})", 1, "ƒë·ªïi role", target)

async def create_currency_keys(ctx, amount, uses, count, target):
    """H√†m ph·ª• gi√∫p t·∫°o key ƒë·ªïi xu"""
    # Validate count
    if count <= 0:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="S·ªë l∆∞·ª£ng key ph·∫£i l·ªõn h∆°n 0.",
            color=discord.Color.red())
        await ctx.send(embed=embed, delete_after=5)
        return
    
    # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng key c√≥ th·ªÉ t·∫°o m·ªôt l√∫c ƒë·ªÉ tr√°nh spam
    if count > 100:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng th·ªÉ t·∫°o qu√° 100 key c√πng l√∫c.",
            color=discord.Color.red())
        await ctx.send(embed=embed, delete_after=5)
        return
    
    # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫°o cho l∆∞·ª£ng key l·ªõn
    if count > 10:
        creating_embed = discord.Embed(
            title="‚è≥ ƒêang t·∫°o key...",
            description=f"ƒêang t·∫°o {count} key ƒë·ªïi {amount} xu v·ªõi {uses} l∆∞·ª£t s·ª≠ d·ª•ng m·ªói key.",
            color=discord.Color.blue())
        creating_msg = await ctx.send(embed=creating_embed)
    
    # Danh s√°ch l∆∞u c√°c key ƒë√£ t·∫°o
    created_keys = []
    
    # Generate multiple random keys
    key_length = 12
    for _ in range(count):
        key_code = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=key_length))
        
        # Create currency key
        active_keys[key_code] = {
            "amount": amount,
            "uses": uses,
            "created_by": ctx.author.id,
            "redeemed_by": [],
            "creation_time": datetime.now(),
            "type": "currency"  # ƒê√°nh d·∫•u lo·∫°i key l√† ƒë·ªïi xu
        }
        created_keys.append(key_code)
    
    # Send success embed to channel
    embed = discord.Embed(
        title="‚úÖ T·∫°o Key ƒê·ªïi Xu Th√†nh C√¥ng",
        description=f"ƒê√£ t·∫°o **{count}** key v·ªõi m·ªánh gi√° **{amount}** xu.",
        color=discord.Color.green())
    embed.add_field(name="üîÑ S·ªë l·∫ßn s·ª≠ d·ª•ng m·ªói key", value=str(uses), inline=True)
    embed.add_field(name="üë§ T·∫°o b·ªüi", value=f"{ctx.author.mention}", inline=False)
    
    # X√°c ƒë·ªãnh ng∆∞·ªùi nh·∫≠n key
    recipient = target if target else ctx.author
    if target:
        embed.add_field(name="üì© G·ª≠i ƒë·∫øn", value=f"{target.mention}", inline=False)
    
    embed.set_footer(text=f"Key ƒë∆∞·ª£c g·ª≠i qua DM cho {recipient.name}")
    
    # C·∫≠p nh·∫≠t th√¥ng b√°o n·∫øu ƒë√£ hi·ªÉn th·ªã
    if count > 10:
        await creating_msg.edit(embed=embed)
    else:
        await ctx.send(embed=embed, delete_after=10)
    
    # Send keys privately to recipient
    await send_keys_to_user(ctx, recipient, created_keys, f"{amount} xu", uses, "ƒë·ªïi xu", target)

async def send_keys_to_user(ctx, recipient, created_keys, value, uses, key_type_text, target=None):
    """H√†m ph·ª• tr·ª£ g·ª≠i key ƒë·∫øn ng∆∞·ªùi d√πng"""
    success = False
    try:
        dm_embed = discord.Embed(
            title=f"üîë Key {key_type_text.title()} M·ªõi",
            description=f"B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c {len(created_keys)} key {key_type_text} t·ª´ {ctx.author.name}:",
            color=discord.Color.gold()
        )
        
        # T√πy v√†o s·ªë l∆∞·ª£ng key, ch·ªçn c√°ch hi·ªÉn th·ªã ph√π h·ª£p
        if len(created_keys) <= 15:
            # N·∫øu √≠t key, hi·ªÉn th·ªã m·ªói key tr√™n m·ªôt d√≤ng
            keys_text = "\n".join(f"`{key}`" for key in created_keys)
            dm_embed.add_field(name="üîë Danh s√°ch key", value=keys_text, inline=False)
        else:
            # N·∫øu qu√° nhi·ªÅu key, chia th√†nh nhi·ªÅu field
            for i in range(0, min(len(created_keys), 30), 10):
                chunk = created_keys[i:i+10]
                keys_text = "\n".join(f"`{key}`" for key in chunk)
                dm_embed.add_field(name=f"üîë Danh s√°ch key {i+1}-{i+len(chunk)}", value=keys_text, inline=False)
        
        dm_embed.add_field(name="üí∞ Gi√° tr·ªã m·ªói key", value=value, inline=True)
        dm_embed.add_field(name="üîÑ S·ªë l·∫ßn s·ª≠ d·ª•ng m·ªói key", value=f"{uses} l·∫ßn", inline=True)
        dm_embed.set_footer(text=f"S·ª≠ d·ª•ng l·ªánh .key [m√£ key] trong server ƒë·ªÉ {key_type_text}")
        
        await recipient.send(embed=dm_embed)
        
        # Lu√¥n t·∫°o file text cho vi·ªác copy d·ªÖ d√†ng
        keys_content = "\n".join(created_keys)
        with open("keys.txt", "w") as file:
            file.write(f"Keys created on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            file.write(f"Value: {value} | Uses: {uses} | Total keys: {len(created_keys)}\n\n")
            file.write(keys_content)
        
        await recipient.send("üìé ƒê√≠nh k√®m file danh s√°ch key ƒë·ªÉ thu·∫≠n ti·ªán sao ch√©p:", file=discord.File("keys_temp.txt"))
        success = True
        
        # X√≥a file t·∫°m sau khi g·ª≠i
        try:
            os.remove("keys_temp.txt")
        except:
            pass
        
        # N·∫øu g·ª≠i cho ng∆∞·ªùi d√πng kh√°c, th√¥ng b√°o cho admin bi·∫øt ƒë√£ g·ª≠i th√†nh c√¥ng
        if target and target.id != ctx.author.id:
            confirm_embed = discord.Embed(
                title="‚úÖ ƒê√£ G·ª≠i Key",
                description=f"ƒê√£ g·ª≠i {len(created_keys)} key ƒë·∫øn {target.mention} th√†nh c√¥ng!",
                color=discord.Color.green()
            )
            await ctx.author.send(embed=confirm_embed)
            
    except Exception as e:
        success = False
    
    # Notify if DM failed
    if not success:
        error_embed = discord.Embed(
            title="‚ùå Kh√¥ng th·ªÉ g·ª≠i key",
            description=f"Kh√¥ng th·ªÉ g·ª≠i key qua DM cho {recipient.mention}. C√≥ th·ªÉ h·ªç ƒë√£ t·∫Øt DM.",
            color=discord.Color.red()
        )
        await ctx.send(embed=error_embed, delete_after=10)
        
        # G·ª≠i key cho ng∆∞·ªùi t·∫°o n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c cho ng∆∞·ªùi d√πng ch·ªâ ƒë·ªãnh
        if target and target.id != ctx.author.id:
            fallback_embed = discord.Embed(
                title="üîë Key Kh√¥ng G·ª≠i ƒê∆∞·ª£c - Backup",
                description=f"Kh√¥ng th·ªÉ g·ª≠i key cho {target.mention}. D∆∞·ªõi ƒë√¢y l√† key ƒë·ªÉ b·∫°n g·ª≠i th·ªß c√¥ng:",
                color=discord.Color.orange()
            )
            
            if len(created_keys) <= 15:
                keys_text = "\n".join(f"`{key}`" for key in created_keys)
                fallback_embed.add_field(name="üîë Danh s√°ch key", value=keys_text, inline=False)
            else:
                for i in range(0, min(len(created_keys), 30), 10):
                    chunk = created_keys[i:i+10]
                    keys_text = "\n".join(f"`{key}`" for key in chunk)
                    fallback_embed.add_field(name=f"üîë Danh s√°ch key {i+1}-{i+len(chunk)}", value=keys_text, inline=False)
            
            fallback_embed.add_field(name="üí∞ Gi√° tr·ªã m·ªói key", value=value, inline=True)
            fallback_embed.add_field(name="üîÑ S·ªë l·∫ßn s·ª≠ d·ª•ng m·ªói key", value=f"{uses} l·∫ßn", inline=True)
            
            try:
                await ctx.author.send(embed=fallback_embed)
                
                # G·ª≠i c·∫£ file backup
                keys_content = "\n".join(created_keys)
                with open("keys_backup.txt", "w") as file:
                    file.write(f"Keys created on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                    file.write(f"Value: {value} | Uses: {uses} | Total keys: {len(created_keys)}\n\n")
                    file.write(keys_content)
                
                await ctx.author.send("üìé ƒê√≠nh k√®m file danh s√°ch key backup:", file=discord.File("keys_backup.txt"))
                
                try:
                    os.remove("keys_backup.txt")
                except:
                    pass
            except:
                pass

@bot.command(name='key')
async def redeem_key(ctx, key_code: str = None):
    """ƒê·ªïi key ƒë·ªÉ nh·∫≠n xu ho·∫∑c role"""
    if key_code is None:
        embed = discord.Embed(
            title="üîë ƒê·ªïi Key - H∆∞·ªõng D·∫´n",
            description="S·ª≠ d·ª•ng key ƒë·ªÉ ƒë·ªïi xu ho·∫∑c nh·∫≠n role ƒë·∫∑c bi·ªát.",
            color=discord.Color.blue())
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng", 
            value="`.key [m√£ key]`\nV√≠ d·ª•: `.key ABC123XYZ`", 
            inline=False)
        await ctx.send(embed=embed)
        return

    user_id = ctx.author.id

    # Check if key exists
    if key_code not in active_keys:
        embed = discord.Embed(
            title="‚ùå Key kh√¥ng h·ª£p l·ªá",
            description="Key n√†y kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Check if key has uses left
    if active_keys[key_code]["uses"] <= 0:
        embed = discord.Embed(
            title="‚ùå Key ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng",
            description="Key n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng h·∫øt s·ªë l·∫ßn cho ph√©p.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Check if user already used this key
    if user_id in active_keys[key_code]["redeemed_by"]:
        embed = discord.Embed(
            title="‚ùå ƒê√£ s·ª≠ d·ª•ng",
            description="B·∫°n ƒë√£ s·ª≠ d·ª•ng key n√†y r·ªìi.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Check if user has used too many keys recently (potential abuse)
    if user_id in key_log:
        # Count recent key usages (within last 24 hours)
        recent_keys = [
            log for log in key_log[user_id] 
            if (datetime.now() - log["time"]).total_seconds() < 86400
        ]
        if len(recent_keys) >= 10:  # TƒÉng l√™n t·ª´ 3 l√™n 10
            embed = discord.Embed(
                title="‚ö†Ô∏è C·∫£nh b√°o",
                description="B·∫°n ƒë√£ s·ª≠ d·ª•ng qu√° nhi·ªÅu key trong 24 gi·ªù qua. Vui l√≤ng th·ª≠ l·∫°i sau.",
                color=discord.Color.orange())
            await ctx.send(embed=embed)
            return

    # Determine key type and process accordingly
    key_type = active_keys[key_code].get("type", "currency")  # Default to currency for backward compatibility
    
    if key_type == "role":
        # Process role key
        await process_role_key(ctx, key_code)
    else:
        # Process currency key
        await process_currency_key(ctx, key_code)

    # Attempt to delete the command message for key security
    try:
        await ctx.message.delete()
    except:
        pass

async def process_currency_key(ctx, key_code):
    """Process a currency key redemption"""
    user_id = ctx.author.id
    key_info = active_keys[key_code]
    
    # Add xu to user
    amount = key_info["amount"]
    currency[user_id] += amount
    
    # Log key usage
    if user_id not in key_log:
        key_log[user_id] = []
    
    key_log[user_id].append({
        "key": key_code,
        "time": datetime.now(),
        "amount": amount,
        "type": "currency"
    })
    
    # Update key usage
    key_info["uses"] -= 1
    key_info["redeemed_by"].append(user_id)
    
    # Create success embed
    embed = discord.Embed(
        title="üéâ ƒê·ªïi Key Th√†nh C√¥ng",
        description=f"{ctx.author.mention} ƒë√£ nh·∫≠n ƒë∆∞·ª£c **{amount} xu**!",
        color=discord.Color.green())
    
    embed.add_field(
        name="üí∞ S·ªë xu hi·ªán t·∫°i", 
        value=f"{currency[user_id]} xu", 
        inline=False
    )
    
    # Remove key if no uses left
    if key_info["uses"] <= 0:
        del active_keys[key_code]
    
    await ctx.send(embed=embed)

async def process_role_key(ctx, key_code):
    """Process a role key redemption"""
    user_id = ctx.author.id
    key_info = active_keys[key_code]
    role_info = key_info.get("role_info")
    
    if not role_info:
        embed = discord.Embed(
            title="‚ùå Key kh√¥ng h·ª£p l·ªá",
            description="Key n√†y kh√¥ng ch·ª©a th√¥ng tin role.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # Get the role from the server
    role_id = role_info.get("role_id")
    role = ctx.guild.get_role(role_id)
    
    if not role:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng t√¨m th·∫•y role ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong key.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # Add the role to the user
    try:
        await ctx.author.add_roles(role)
        
        # Log key usage
        if user_id not in key_log:
            key_log[user_id] = []
        
        key_log[user_id].append({
            "key": key_code,
            "time": datetime.now(),
            "role_id": role_id,
            "role_name": role.name,
            "type": "role"
        })
        
        # Update key usage
        key_info["uses"] -= 1
        key_info["redeemed_by"].append(user_id)
        
        # Create success embed
        embed = discord.Embed(
            title="üéâ ƒê·ªïi Key Th√†nh C√¥ng",
            description=f"{ctx.author.mention} ƒë√£ nh·∫≠n ƒë∆∞·ª£c role **{role.name}**!",
            color=discord.Color.green())
        
        # Role duration information
        duration = role_info.get("duration")
        if duration:
            # Convert seconds to a readable format
            if duration < 3600:
                time_str = f"{duration // 60} ph√∫t"
            elif duration < 86400:
                time_str = f"{duration // 3600} gi·ªù"
            else:
                time_str = f"{duration // 86400} ng√†y"
            
            embed.add_field(
                name="‚è±Ô∏è Th·ªùi h·∫°n", 
                value=f"Role s·∫Ω h·∫øt h·∫°n sau {time_str}", 
                inline=False
            )
            
            # Schedule role removal after duration
            bot.loop.create_task(remove_role_after_duration(ctx.author.id, role_id, duration))
        else:
            embed.add_field(
                name="‚è±Ô∏è Th·ªùi h·∫°n", 
                value="Role vƒ©nh vi·ªÖn", 
                inline=False
            )
            
        # Remove key if no uses left
        if key_info["uses"] <= 0:
            del active_keys[key_code]
            
        # G·ª≠i th√¥ng b√°o th√†nh c√¥ng
        await ctx.send(embed=embed)
        
    except discord.Forbidden:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Bot kh√¥ng c√≥ quy·ªÅn th√™m role cho b·∫°n.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
            color=discord.Color.red())
        await ctx.send(embed=embed)


# Helper function to remove role after duration
async def remove_role_after_duration(user_id, role_id, duration):
    """Remove role from user after specified duration"""
    await asyncio.sleep(duration)
    
    # Find the guild and member
    for guild in bot.guilds:
        member = guild.get_member(user_id)
        if member:
            role = guild.get_role(role_id)
            if role and role in member.roles:
                try:
                    await member.remove_roles(role)
                    
                    # Try to notify user
                    try:
                        embed = discord.Embed(
                            title="‚è±Ô∏è Role ƒë√£ h·∫øt h·∫°n",
                            description=f"Role **{role.name}** c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n v√† ƒë√£ b·ªã g·ª° b·ªè.",
                            color=discord.Color.orange()
                        )
                        await member.send(embed=embed)
                    except:
                        pass  # Ignore if can't DM
                    
                except:
                    pass  # Ignore errors
                break


@bot.command(name='chkey', aliases=['checkhistorykey', 'keyhistory', 'khist'])
@admin_only()
async def check_key_history(ctx, key_code: str = None):
    """Ki·ªÉm tra l·ªãch s·ª≠ s·ª≠ d·ª•ng c·ªßa m·ªôt key c·ª• th·ªÉ"""
    if key_code is None:
        embed = discord.Embed(
            title="‚ÑπÔ∏è Ki·ªÉm Tra L·ªãch S·ª≠ Key - H∆∞·ªõng D·∫´n",
            description="Ki·ªÉm tra nh·ªØng ng∆∞·ªùi d√πng ƒë√£ s·ª≠ d·ª•ng m·ªôt key c·ª• th·ªÉ.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.chkey [m√£ key]`\nV√≠ d·ª•: `.chkey ABC123XYZ`", 
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra trong key ƒëang ho·∫°t ƒë·ªông
    key_exists = key_code in active_keys
    key_info = active_keys.get(key_code, None)
    
    # T√¨m ng∆∞·ªùi d√πng ƒë√£ ƒë·ªïi key n√†y trong l·ªãch s·ª≠
    users_redeemed = []
    for user_id, logs in key_log.items():
        for log in logs:
            if log.get("key") == key_code:
                # T√¨m th·∫•y ng∆∞·ªùi d√πng ƒë√£ s·ª≠ d·ª•ng key n√†y
                try:
                    user = await bot.fetch_user(user_id)
                    user_name = user.name
                except:
                    user_name = f"ID: {user_id}"
                
                # L·∫•y th√¥ng tin th·ªùi gian ƒë·ªïi key
                time_redeemed = log.get("time", datetime.now())
                time_str = discord.utils.format_dt(time_redeemed, style="R")
                
                # L·∫•y th√¥ng tin v·ªÅ lo·∫°i key v√† gi√° tr·ªã
                key_type = log.get("type", "currency")
                
                if key_type == "currency":
                    value_info = f"{log.get('amount', 'kh√¥ng r√µ')} xu"
                else:
                    role_name = log.get("role_name", "kh√¥ng r√µ")
                    role_id = log.get("role_id", "N/A")
                    value_info = f"Role {role_name} (ID: {role_id})"
                
                users_redeemed.append({
                    "user_id": user_id,
                    "user_name": user_name,
                    "time": time_redeemed,
                    "time_str": time_str,
                    "key_type": key_type,
                    "value_info": value_info
                })
    
    # S·∫Øp x·∫øp theo th·ªùi gian, m·ªõi nh·∫•t l√™n ƒë·∫ßu
    users_redeemed.sort(key=lambda x: x["time"], reverse=True)
    
    # T·∫°o embed hi·ªÉn th·ªã th√¥ng tin
    if key_exists:
        embed_title = f"üîë L·ªãch s·ª≠ key: {key_code} (C√≤n hi·ªáu l·ª±c)"
        embed_color = discord.Color.green()
    else:
        embed_title = f"üîë L·ªãch s·ª≠ key: {key_code} (ƒê√£ h·∫øt h·∫°n/ƒê√£ s·ª≠ d·ª•ng h·∫øt)"
        embed_color = discord.Color.orange()
    
    embed = discord.Embed(
        title=embed_title,
        description=f"C√≥ **{len(users_redeemed)}** ng∆∞·ªùi ƒë√£ s·ª≠ d·ª•ng key n√†y.",
        color=embed_color
    )
    
    # Th√™m th√¥ng tin v·ªÅ key n·∫øu key v·∫´n c√≤n ho·∫°t ƒë·ªông
    if key_info:
        key_type = key_info.get("type", "currency")
        
        if key_type == "currency":
            amount = key_info.get("amount", 0)
            embed.add_field(
                name="üí∞ Lo·∫°i key",
                value=f"Key Xu: **{amount} xu**",
                inline=True
            )
        else:
            role_info = key_info.get("role_info", {})
            role_name = role_info.get("role_name", "Kh√¥ng x√°c ƒë·ªãnh")
            role_id = role_info.get("role_id", "N/A")
            duration = role_info.get("duration")
            
            if duration:
                if duration < 3600:
                    duration_text = f"{duration // 60} ph√∫t"
                elif duration < 86400:
                    duration_text = f"{duration // 3600} gi·ªù"
                else:
                    duration_text = f"{duration // 86400} ng√†y"
            else:
                duration_text = "Vƒ©nh vi·ªÖn"
            
            embed.add_field(
                name="üé≠ Lo·∫°i key",
                value=f"Key Role: **{role_name}** (ID: `{role_id}`)\nTh·ªùi h·∫°n: **{duration_text}**",
                inline=True
            )
        
        embed.add_field(
            name="üîÑ L∆∞·ª£t d√πng c√≤n l·∫°i",
            value=f"**{key_info.get('uses', 0)}** l∆∞·ª£t",
            inline=True
        )
        
        # Hi·ªÉn th·ªã ng∆∞·ªùi t·∫°o key
        created_by_id = key_info.get("created_by")
        if created_by_id:
            try:
                creator = await bot.fetch_user(created_by_id)
                creator_text = f"{creator.name} (ID: `{creator.id}`)"
            except:
                creator_text = f"ID: `{created_by_id}`"
            
            embed.add_field(
                name="üë§ T·∫°o b·ªüi",
                value=creator_text,
                inline=True
            )
        
        # Hi·ªÉn th·ªã th·ªùi gian t·∫°o key
        creation_time = key_info.get("creation_time")
        if creation_time:
            time_str = discord.utils.format_dt(creation_time, style="F")
            embed.add_field(
                name="üìÜ T·∫°o l√∫c",
                value=f"{time_str}",
                inline=False
            )
    
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ s·ª≠ d·ª•ng
    if users_redeemed:
        users_info = ""
        for i, user_data in enumerate(users_redeemed[:10], 1):
            users_info += f"**{i}.** {user_data['user_name']} (ID: `{user_data['user_id']}`)\n"
            users_info += f"‚è∞ ƒê√£ ƒë·ªïi: {user_data['time_str']}\n"
            users_info += f"üè∑Ô∏è Nh·∫≠n: {user_data['value_info']}\n\n"
            
        # Th√™m th√¥ng b√°o n·∫øu c√≤n nhi·ªÅu ng∆∞·ªùi d√πng kh√°c
        if len(users_redeemed) > 10:
            remaining = len(users_redeemed) - 10
            users_info += f"*...v√† {remaining} ng∆∞·ªùi d√πng kh√°c*"
            
        embed.add_field(
            name="üë• Ng∆∞·ªùi d√πng ƒë√£ ƒë·ªïi key",
            value=users_info,
            inline=False
        )
    else:
        embed.add_field(
            name="üë• Ng∆∞·ªùi d√πng ƒë√£ ƒë·ªïi key",
            value="Kh√¥ng c√≥ ai s·ª≠ d·ª•ng key n√†y.",
            inline=False
        )
    
    embed.set_footer(text=f"ID: {key_code} | Ki·ªÉm tra b·ªüi {ctx.author.name}")
    await ctx.send(embed=embed)


@bot.command(name='dropkey', aliases=['dropcode', 'keycode'])
@commands.has_permissions(administrator=True)
async def drop_key(ctx, amount: str = None, uses: int = None, count: int = None, *, message: str = None):
    """T·∫°o key ƒë·ªïi xu v√† drop trong k√™nh"""
    # Ki·ªÉm tra ƒë·∫ßu v√†o h·ª£p l·ªá
    if amount is None or uses is None or count is None:
        embed = discord.Embed(
            title="üîë Drop Key - H∆∞·ªõng D·∫´n",
            description="T·∫°o key xu v√† drop trong k√™nh hi·ªán t·∫°i.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch d√πng",
            value="`.dropkey [s·ªë xu] [s·ªë l∆∞·ª£t] [s·ªë key] [tin nh·∫Øn]`",
            inline=False
        )
        embed.add_field(
            name="V√≠ d·ª•",
            value="`.dropkey 5000 3 5 Key m·ª´ng sinh nh·∫≠t server!`",
            inline=False
        )
        embed.add_field(
            name="L∆∞u √Ω",
            value="- S·ªë xu ph·∫£i l·ªõn h∆°n 0\n- S·ªë l∆∞·ª£t s·ª≠ d·ª•ng ph·∫£i t·ª´ 1-10\n- S·ªë key ph·∫£i t·ª´ 1-10",
            inline=False
        )
        await ctx.send(embed=embed)
        return

    # X√≥a tin nh·∫Øn g·ªëc
    try:
        await ctx.message.delete()
    except:
        pass
    
    # X·ª≠ l√Ω v√† ki·ªÉm tra c√°c tham s·ªë
    try:
        # X·ª≠ l√Ω s·ªë xu (h·ªó tr·ª£ ƒë·ªãnh d·∫°ng 5k, 1m, v.v.)
        parsed_amount = amount.lower()
        if parsed_amount.endswith('k'):
            xu_amount = int(float(parsed_amount[:-1]) * 1000)
        elif parsed_amount.endswith('m'):
            xu_amount = int(float(parsed_amount[:-1]) * 1000000)
        else:
            xu_amount = int(parsed_amount)
        
        # Ki·ªÉm tra gi√° tr·ªã
        if xu_amount <= 0:
            await ctx.send("‚ùå S·ªë xu ph·∫£i l·ªõn h∆°n 0!", delete_after=5)
            return
        
        if uses < 1 or uses > 10:
            await ctx.send("‚ùå S·ªë l∆∞·ª£t s·ª≠ d·ª•ng ph·∫£i t·ª´ 1 ƒë·∫øn 10!", delete_after=5)
            return
        
        if count < 1 or count > 10:
            await ctx.send("‚ùå S·ªë key ph·∫£i t·ª´ 1 ƒë·∫øn 10!", delete_after=5)
            return
            
    except ValueError:
        await ctx.send("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!", delete_after=5)
        return
    
    # T·∫°o tin nh·∫Øn m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
    if not message:
        message = "Ai nhanh tay ng∆∞·ªùi ƒë√≥ nh·∫≠n ƒë∆∞·ª£c key xu!"
    
    # T·∫°o c√°c key
    generated_keys = []
    for _ in range(count):
        # T·∫°o key ng·∫´u nhi√™n
        key_code = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=8))
        # L∆∞u key v√†o h·ªá th·ªëng
        active_keys[key_code] = {
            "amount": xu_amount,
            "uses": uses,
            "created_by": ctx.author.id,
            "redeemed_by": [],
            "creation_time": datetime.now()
        }
        generated_keys.append(key_code)
    
    # T·∫°o embed hi·ªÉn th·ªã key
    embed = discord.Embed(
        title="üéÅ XU KEY DROP üéÅ",
        description=message,
        color=discord.Color.gold()
    )
    
    embed.add_field(
        name="üí∞ Th√¥ng tin key",
        value=f"**Gi√° tr·ªã:** {xu_amount:,} xu/key\n**L∆∞·ª£t s·ª≠ d·ª•ng:** {uses} l∆∞·ª£t/key",
        inline=False
    )
    
    # Hi·ªÉn th·ªã c√°c key trong code block ƒë·ªÉ d·ªÖ sao ch√©p
    keys_display = "\n".join([f"`{key}`" for key in generated_keys])
    embed.add_field(
        name=f"üîë Key ({count} key):",
        value=keys_display,
        inline=False
    )
    
    embed.add_field(
        name="üìù H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng",
        value="S·ª≠ d·ª•ng l·ªánh `.key [m√£ key]` ƒë·ªÉ ƒë·ªïi key l·∫•y xu",
        inline=False
    )
    
    embed.set_footer(text=f"Key t·∫°o b·ªüi {ctx.author.name} ‚Ä¢ {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    
    # T·∫°o n√∫t sao ch√©p nhanh
    view = discord.ui.View(timeout=3600)  # 1 gi·ªù timeout
    
    # Th√™m n√∫t cho t·ª´ng key
    for i, key in enumerate(generated_keys):
        copy_button = discord.ui.Button(
            label=f"Copy Key {i+1}", 
            style=discord.ButtonStyle.primary,
            custom_id=f"copy_{key}")
        
        async def button_callback(interaction, key_to_copy=key):
            await interaction.response.send_message(
                f"**Key c·ªßa b·∫°n:** `{key_to_copy}`\nS·ª≠ d·ª•ng l·ªánh `.key {key_to_copy}` ƒë·ªÉ ƒë·ªïi l·∫•y xu!", 
                ephemeral=True)
        
        copy_button.callback = button_callback
        view.add_item(copy_button)
    
    # G·ª≠i tin nh·∫Øn drop key
    drop_message = await ctx.send(embed=embed, view=view)
    
    # Log admin action
    admin_log_embed = discord.Embed(
        title="üìù Admin Log: Drop Key",
        description=f"Admin {ctx.author.mention} ƒë√£ t·∫°o {count} key xu",
        color=discord.Color.blue()
    )
    admin_log_embed.add_field(
        name="Chi ti·∫øt",
        value=f"- S·ªë xu: {xu_amount:,}\n- L∆∞·ª£t d√πng: {uses}\n- S·ªë key: {count}"
    )
    
    # Sending log to admin or in DM
    try:
        await ctx.author.send(embed=admin_log_embed)
    except:
        pass


@bot.command(name='droprole', aliases=['roledrop'])
@commands.has_permissions(administrator=True)
async def drop_role(ctx, role: discord.Role = None, duration: str = None, count: int = None, *, message: str = None):
    """T·∫°o key ƒë·ªÉ nh·∫≠n role v√† drop trong k√™nh"""
    # Ki·ªÉm tra ƒë·∫ßu v√†o h·ª£p l·ªá
    if role is None or duration is None or count is None:
        embed = discord.Embed(
            title="üé≠ Drop Role - H∆∞·ªõng D·∫´n",
            description="T·∫°o key nh·∫≠n role v√† drop trong k√™nh hi·ªán t·∫°i.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch d√πng",
            value="`.droprole [@role] [th·ªùi h·∫°n] [s·ªë key] [tin nh·∫Øn]`",
            inline=False
        )
        embed.add_field(
            name="Th·ªùi h·∫°n",
            value="- `1h`, `2h`, `3h`... (gi·ªù)\n- `1d`, `2d`, `3d`... (ng√†y)\n- `perm` (vƒ©nh vi·ªÖn)",
            inline=False
        )
        embed.add_field(
            name="V√≠ d·ª•",
            value="`.droprole @VIP 1d 5 Key nh·∫≠n role VIP 1 ng√†y!`",
            inline=False
        )
        await ctx.send(embed=embed)
        return

    # X√≥a tin nh·∫Øn g·ªëc
    try:
        await ctx.message.delete()
    except:
        pass
    
    # X·ª≠ l√Ω v√† ki·ªÉm tra c√°c tham s·ªë
    try:
        # X·ª≠ l√Ω th·ªùi h·∫°n
        if duration.lower() == "perm":
            seconds_duration = None
            duration_text = "Vƒ©nh vi·ªÖn"
        else:
            time_value = int(duration[:-1])
            time_unit = duration[-1].lower()
            
            if time_unit == 'h':
                seconds_duration = time_value * 3600
                duration_text = f"{time_value} gi·ªù"
            elif time_unit == 'd':
                seconds_duration = time_value * 86400
                duration_text = f"{time_value} ng√†y"
            else:
                await ctx.send("‚ùå ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng `h` (gi·ªù), `d` (ng√†y) ho·∫∑c `perm`.", delete_after=5)
                return
        
        # Ki·ªÉm tra gi√° tr·ªã
        if count < 1 or count > 10:
            await ctx.send("‚ùå S·ªë key ph·∫£i t·ª´ 1 ƒë·∫øn 10!", delete_after=5)
            return
            
    except ValueError:
        await ctx.send("‚ùå Vui l√≤ng nh·∫≠p th√¥ng tin h·ª£p l·ªá!", delete_after=5)
        return
    
    # Ki·ªÉm tra quy·ªÅn v·ªõi role
    if role >= ctx.guild.me.top_role:
        await ctx.send("‚ùå Bot kh√¥ng ƒë·ªß quy·ªÅn ƒë·ªÉ trao role n√†y!", delete_after=5)
        return
    
    # T·∫°o tin nh·∫Øn m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
    if not message:
        message = "Ai nhanh tay ng∆∞·ªùi ƒë√≥ nh·∫≠n ƒë∆∞·ª£c role!"
    
    # T·∫°o c√°c key
    generated_keys = []
    for _ in range(count):
        # T·∫°o key ng·∫´u nhi√™n
        key_code = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=8))
        # L∆∞u key v√†o h·ªá th·ªëng
        active_keys[key_code] = {
            "role_id": role.id,
            "duration": seconds_duration,
            "created_by": ctx.author.id,
            "redeemed_by": [],
            "creation_time": datetime.now(),
            "type": "role"
        }
        generated_keys.append(key_code)
    
    # T·∫°o embed hi·ªÉn th·ªã key
    embed = discord.Embed(
        title="üé≠ ROLE KEY DROP üé≠",
        description=message,
        color=role.color if role.color != discord.Color.default() else discord.Color.purple()
    )
    
    embed.add_field(
        name="üèÜ Th√¥ng tin role",
        value=f"**Role:** {role.mention}\n**Th·ªùi h·∫°n:** {duration_text}",
        inline=False
    )
    
    # Hi·ªÉn th·ªã c√°c key trong code block ƒë·ªÉ d·ªÖ sao ch√©p
    keys_display = "\n".join([f"`{key}`" for key in generated_keys])
    embed.add_field(
        name=f"üîë Key ({count} key):",
        value=keys_display,
        inline=False
    )
    
    embed.add_field(
        name="üìù H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng",
        value="S·ª≠ d·ª•ng l·ªánh `.key [m√£ key]` ƒë·ªÉ ƒë·ªïi key l·∫•y role",
        inline=False
    )
    
    embed.set_footer(text=f"Key t·∫°o b·ªüi {ctx.author.name} ‚Ä¢ {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    
    # T·∫°o n√∫t sao ch√©p nhanh
    view = discord.ui.View(timeout=3600)  # 1 gi·ªù timeout
    
    # Th√™m n√∫t cho t·ª´ng key
    for i, key in enumerate(generated_keys):
        copy_button = discord.ui.Button(
            label=f"Copy Key {i+1}", 
            style=discord.ButtonStyle.primary,
            custom_id=f"copy_{key}")
        
        async def button_callback(interaction, key_to_copy=key):
            await interaction.response.send_message(
                f"**Key c·ªßa b·∫°n:** `{key_to_copy}`\nS·ª≠ d·ª•ng l·ªánh `.key {key_to_copy}` ƒë·ªÉ nh·∫≠n role!", 
                ephemeral=True)
        
        copy_button.callback = button_callback
        view.add_item(copy_button)
    
    # G·ª≠i tin nh·∫Øn drop key
    drop_message = await ctx.send(embed=embed, view=view)
    
    # Log admin action
    admin_log_embed = discord.Embed(
        title="üìù Admin Log: Drop Role Key",
        description=f"Admin {ctx.author.mention} ƒë√£ t·∫°o {count} key role",
        color=discord.Color.blue()
    )
    admin_log_embed.add_field(
        name="Chi ti·∫øt",
        value=f"- Role: {role.name}\n- Th·ªùi h·∫°n: {duration_text}\n- S·ªë key: {count}"
    )
    
    # Sending log to admin or in DM
    try:
        await ctx.author.send(embed=admin_log_embed)
    except:
        pass

@bot.command(name='lkey', aliases=['keylist', 'lskey'])
@admin_only()
async def list_keys(ctx):
    """Admin command to list all active keys"""
    if not active_keys:
        embed = discord.Embed(
            title="üîë Danh S√°ch Key",
            description="Kh√¥ng c√≥ key n√†o trong h·ªá th·ªëng.",
            color=discord.Color.blue())
        await ctx.send(embed=embed)
        return

    # Ph√¢n lo·∫°i key theo lo·∫°i
    currency_keys = {}
    role_keys = {}
    
    # Th·ªëng k√™ ng∆∞·ªùi s·ª≠ d·ª•ng key
    users_stats = {}
    total_used_keys = 0
    
    # Ph√¢n lo·∫°i c√°c key v√† th·ªëng k√™ ng∆∞·ªùi d√πng
    for key_code, key_info in active_keys.items():
        key_type = key_info.get("type", "currency")  # Default to currency for backward compatibility
        
        if key_type == "role":
            role_keys[key_code] = key_info
        else:
            currency_keys[key_code] = key_info
            
        # Th·ªëng k√™ ng∆∞·ªùi d√πng ƒë√£ s·ª≠ d·ª•ng key
        redeemed_by = key_info.get("redeemed_by", [])
        total_used_keys += len(redeemed_by)
        
        for user_id in redeemed_by:
            if user_id not in users_stats:
                users_stats[user_id] = 0
            users_stats[user_id] += 1

    # T·∫°o embed ch√≠nh
    embed = discord.Embed(
        title="üîë Danh S√°ch Key",
        description=f"C√≥ **{len(active_keys)}** key trong h·ªá th·ªëng:",
        color=discord.Color.blue())

    # Hi·ªÉn th·ªã th√¥ng tin t·ªïng quan
    embed.add_field(
        name="üìä T·ªïng quan",
        value=f"üí∞ Key ƒë·ªïi xu: **{len(currency_keys)}**\n"
              f"üé≠ Key ƒë·ªïi role: **{len(role_keys)}**\n"
              f"üë• S·ªë l·∫ßn s·ª≠ d·ª•ng key: **{total_used_keys}** l·∫ßn\n"
              f"üë§ S·ªë ng∆∞·ªùi d√πng s·ª≠ d·ª•ng key: **{len(users_stats)}** ng∆∞·ªùi",
        inline=False
    )

    # Hi·ªÉn th·ªã c√°c key ƒë·ªïi xu (t·ªëi ƒëa 10 key)
    if currency_keys:
        currency_keys_info = ""
        for idx, (key_code, key_info) in enumerate(list(currency_keys.items())[:10], 1):
            redeemed_count = len(key_info["redeemed_by"])
            try:
                creator = await bot.fetch_user(key_info["created_by"])
                creator_name = creator.name
            except:
                creator_name = f"ID: {key_info['created_by']}"

            # Format creation time
            creation_time = key_info.get("creation_time", datetime.now())
            time_str = discord.utils.format_dt(creation_time, style="R")

            currency_keys_info += f"**{idx}. {key_code}**\n"
            currency_keys_info += f"üí∞ **{key_info['amount']} xu** | "
            currency_keys_info += f"üîÑ **{key_info['uses']}/{redeemed_count + key_info['uses']}** l∆∞·ª£t | "
            currency_keys_info += f"üë§ {creator_name} | {time_str}\n\n"
            
            if idx >= 10:
                remaining = len(currency_keys) - 10
                if remaining > 0:
                    currency_keys_info += f"*...v√† {remaining} key kh√°c*"
                break

        embed.add_field(
            name=f"üí∞ Key ƒê·ªïi Xu ({len(currency_keys)})",
            value=currency_keys_info or "Kh√¥ng c√≥ key ƒë·ªïi xu n√†o",
            inline=False
        )

    # Hi·ªÉn th·ªã c√°c key ƒë·ªïi role (t·ªëi ƒëa 10 key)
    if role_keys:
        role_keys_info = ""
        for idx, (key_code, key_info) in enumerate(list(role_keys.items())[:10], 1):
            redeemed_count = len(key_info["redeemed_by"])
            try:
                creator = await bot.fetch_user(key_info["created_by"])
                creator_name = creator.name
            except:
                creator_name = f"ID: {key_info['created_by']}"

            # Format creation time
            creation_time = key_info.get("creation_time", datetime.now())
            time_str = discord.utils.format_dt(creation_time, style="R")

            # L·∫•y th√¥ng tin v·ªÅ role
            role_info = key_info.get("role_info", {})
            role_name = role_info.get("role_name", "Kh√¥ng x√°c ƒë·ªãnh")
            role_id = role_info.get("role_id", "N/A")
            
            # Hi·ªÉn th·ªã th·ªùi h·∫°n role
            duration = role_info.get("duration")
            if duration:
                if duration < 3600:
                    duration_text = f"{duration // 60} ph√∫t"
                elif duration < 86400:
                    duration_text = f"{duration // 3600} gi·ªù"
                else:
                    duration_text = f"{duration // 86400} ng√†y"
            else:
                duration_text = "Vƒ©nh vi·ªÖn"

            role_keys_info += f"**{idx}. {key_code}**\n"
            role_keys_info += f"üé≠ **{role_name}** (`{role_id}`) | "
            role_keys_info += f"‚è±Ô∏è {duration_text} | "
            role_keys_info += f"üîÑ **{key_info['uses']}/{redeemed_count + key_info['uses']}** l∆∞·ª£t | "
            role_keys_info += f"üë§ {creator_name} | {time_str}\n\n"
            
            if idx >= 10:
                remaining = len(role_keys) - 10
                if remaining > 0:
                    role_keys_info += f"*...v√† {remaining} key kh√°c*"
                break

        embed.add_field(
            name=f"üé≠ Key ƒê·ªïi Role ({len(role_keys)})",
            value=role_keys_info or "Kh√¥ng c√≥ key ƒë·ªïi role n√†o",
            inline=False
        )
    
    # Hi·ªÉn th·ªã th·ªëng k√™ ng∆∞·ªùi d√πng s·ª≠ d·ª•ng key nhi·ªÅu nh·∫•t (top 5)
    if users_stats:
        top_users = sorted(users_stats.items(), key=lambda x: x[1], reverse=True)[:5]
        users_info = ""
        
        for i, (user_id, count) in enumerate(top_users, 1):
            try:
                user = await bot.fetch_user(user_id)
                user_name = user.name
            except:
                user_name = f"Unknown (ID: {user_id})"
            
            users_info += f"**{i}. {user_name}**: {count} key\n"
        
        embed.add_field(
            name="üëë Top Ng∆∞·ªùi D√πng Key",
            value=users_info,
            inline=False
        )

    # Th√™m h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c√°c l·ªánh li√™n quan
    embed.add_field(
        name="‚å®Ô∏è C√°c l·ªánh li√™n quan",
        value="`.ckey [m√£ key]` - Ki·ªÉm tra chi ti·∫øt v·ªÅ m·ªôt key\n"
              "`.chkey [m√£ key]` - Ki·ªÉm tra l·ªãch s·ª≠ s·ª≠ d·ª•ng key\n"
              "`.checkgl @user` - Ki·ªÉm tra l·ªãch s·ª≠ d√πng key c·ªßa ng∆∞·ªùi d√πng\n"
              "`.xoakey [s·ªë l∆∞·ª£ng/all]` - X√≥a key kh·ªèi h·ªá th·ªëng",
        inline=False
    )

    embed.set_footer(text=f"S·ª≠ d·ª•ng .tkey ƒë·ªÉ t·∫°o th√™m key | ƒê∆∞·ª£c y√™u c·∫ßu b·ªüi {ctx.author.name}")
    await ctx.send(embed=embed)

@bot.command(name='delkey', aliases=['xoakey', 'keydelete', 'kd'])
@admin_only()
async def delete_key(ctx, key_or_amount: str = None, key_type: str = None):
    """X√≥a key kh·ªèi h·ªá th·ªëng
    
    S·ª≠ d·ª•ng:
    .delkey [m√£ key] - X√≥a m·ªôt key c·ª• th·ªÉ
    .delkey all - X√≥a t·∫•t c·∫£ key
    .delkey all xu - X√≥a t·∫•t c·∫£ key ƒë·ªïi xu
    .delkey all role - X√≥a t·∫•t c·∫£ key ƒë·ªïi role
    .delkey [s·ªë l∆∞·ª£ng] - X√≥a s·ªë l∆∞·ª£ng key ng·∫´u nhi√™n
    .delkey [s·ªë l∆∞·ª£ng] xu - X√≥a s·ªë l∆∞·ª£ng key ƒë·ªïi xu ng·∫´u nhi√™n
    .delkey [s·ªë l∆∞·ª£ng] role - X√≥a s·ªë l∆∞·ª£ng key ƒë·ªïi role ng·∫´u nhi√™n
    """
    if key_or_amount is None:
        embed = discord.Embed(
            title="üóëÔ∏è X√≥a Key - H∆∞·ªõng D·∫´n",
            description="X√≥a key kh·ªèi h·ªá th·ªëng",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="X√≥a m·ªôt key c·ª• th·ªÉ",
            value="`.delkey [m√£ key]`\nV√≠ d·ª•: `.delkey ABC123XYZ`",
            inline=False
        )
        embed.add_field(
            name="X√≥a t·∫•t c·∫£ key",
            value="`.delkey all` - X√≥a t·∫•t c·∫£ key\n"
                  "`.delkey all xu` - Ch·ªâ x√≥a key ƒë·ªïi xu\n"
                  "`.delkey all role` - Ch·ªâ x√≥a key ƒë·ªïi role",
            inline=False
        )
        embed.add_field(
            name="X√≥a nhi·ªÅu key",
            value="`.delkey [s·ªë l∆∞·ª£ng]` - X√≥a s·ªë l∆∞·ª£ng key ng·∫´u nhi√™n\n"
                  "`.delkey [s·ªë l∆∞·ª£ng] xu` - X√≥a s·ªë l∆∞·ª£ng key ƒë·ªïi xu ng·∫´u nhi√™n\n"
                  "`.delkey [s·ªë l∆∞·ª£ng] role` - X√≥a s·ªë l∆∞·ª£ng key ƒë·ªïi role ng·∫´u nhi√™n",
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    # X·ª≠ l√Ω x√≥a t·∫•t c·∫£ key
    if key_or_amount.lower() == "all":
        # X√°c ƒë·ªãnh lo·∫°i key c·∫ßn x√≥a
        if key_type is None:
            # X√≥a t·∫•t c·∫£ lo·∫°i key
            key_count = len(active_keys)
            active_keys.clear()
            
            embed = discord.Embed(
                title="‚úÖ ƒê√£ X√≥a Key",
                description=f"ƒê√£ x√≥a t·∫•t c·∫£ **{key_count}** key kh·ªèi h·ªá th·ªëng.",
                color=discord.Color.green()
            )
            await ctx.send(embed=embed)
            return
        
        elif key_type.lower() in ["xu", "currency", "money"]:
            # X√≥a key ƒë·ªïi xu
            keys_to_delete = [key for key, info in active_keys.items() if info.get("type", "currency") == "currency"]
            
            for key in keys_to_delete:
                del active_keys[key]
            
            embed = discord.Embed(
                title="‚úÖ ƒê√£ X√≥a Key",
                description=f"ƒê√£ x√≥a **{len(keys_to_delete)}** key ƒë·ªïi xu kh·ªèi h·ªá th·ªëng.",
                color=discord.Color.green()
            )
            await ctx.send(embed=embed)
            return
            
        elif key_type.lower() in ["role", "vai tr√≤", "roles"]:
            # X√≥a key ƒë·ªïi role
            keys_to_delete = [key for key, info in active_keys.items() if info.get("type") == "role"]
            
            for key in keys_to_delete:
                del active_keys[key]
            
            embed = discord.Embed(
                title="‚úÖ ƒê√£ X√≥a Key",
                description=f"ƒê√£ x√≥a **{len(keys_to_delete)}** key ƒë·ªïi role kh·ªèi h·ªá th·ªëng.",
                color=discord.Color.green()
            )
            await ctx.send(embed=embed)
            return
            
        else:
            # Lo·∫°i key kh√¥ng h·ª£p l·ªá
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Lo·∫°i key kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng `xu` ho·∫∑c `role`.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
    
    # Ki·ªÉm tra xem key_or_amount c√≥ ph·∫£i l√† s·ªë kh√¥ng
    if key_or_amount.isdigit():
        amount = int(key_or_amount)
        
        if amount <= 0:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
        
        # X√°c ƒë·ªãnh lo·∫°i key c·∫ßn x√≥a
        if key_type is None:
            # X√≥a ng·∫´u nhi√™n key t·ª´ t·∫•t c·∫£ lo·∫°i
            keys_list = list(active_keys.keys())
            
            if not keys_list:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ key",
                    description="Kh√¥ng c√≥ key n√†o trong h·ªá th·ªëng ƒë·ªÉ x√≥a.",
                    color=discord.Color.red()
                )
                await ctx.send(embed=embed)
                return
            
            # X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng key th·ª±c t·∫ø s·∫Ω x√≥a
            amount = min(amount, len(keys_list))
            
            # Ch·ªçn ng·∫´u nhi√™n key ƒë·ªÉ x√≥a
            keys_to_delete = random.sample(keys_list, amount)
            
            # X√≥a c√°c key ƒë√£ ch·ªçn
            for key in keys_to_delete:
                del active_keys[key]
            
            embed = discord.Embed(
                title="‚úÖ ƒê√£ X√≥a Key",
                description=f"ƒê√£ x√≥a **{amount}** key ng·∫´u nhi√™n kh·ªèi h·ªá th·ªëng.",
                color=discord.Color.green()
            )
            embed.add_field(
                name="Danh s√°ch key ƒë√£ x√≥a", 
                value="\n".join([f"`{key}`" for key in keys_to_delete]) if len(keys_to_delete) <= 20 else 
                      "\n".join([f"`{key}`" for key in keys_to_delete[:20]]) + f"\n*...v√† {len(keys_to_delete) - 20} key kh√°c*",
                inline=False
            )
            await ctx.send(embed=embed)
            return
            
        elif key_type.lower() in ["xu", "currency", "money"]:
            # X√≥a ng·∫´u nhi√™n key ƒë·ªïi xu
            keys_to_choose = [key for key, info in active_keys.items() if info.get("type", "currency") == "currency"]
            
            if not keys_to_choose:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ key",
                    description="Kh√¥ng c√≥ key ƒë·ªïi xu n√†o trong h·ªá th·ªëng ƒë·ªÉ x√≥a.",
                    color=discord.Color.red()
                )
                await ctx.send(embed=embed)
                return
                
            # X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng key th·ª±c t·∫ø s·∫Ω x√≥a
            amount = min(amount, len(keys_to_choose))
            
            # Ch·ªçn ng·∫´u nhi√™n key ƒë·ªÉ x√≥a
            keys_to_delete = random.sample(keys_to_choose, amount)
            
            # X√≥a c√°c key ƒë√£ ch·ªçn
            for key in keys_to_delete:
                del active_keys[key]
                
            embed = discord.Embed(
                title="‚úÖ ƒê√£ X√≥a Key",
                description=f"ƒê√£ x√≥a **{amount}** key ƒë·ªïi xu ng·∫´u nhi√™n kh·ªèi h·ªá th·ªëng.",
                color=discord.Color.green()
            )
            embed.add_field(
                name="Danh s√°ch key ƒë√£ x√≥a", 
                value="\n".join([f"`{key}`" for key in keys_to_delete]) if len(keys_to_delete) <= 20 else 
                      "\n".join([f"`{key}`" for key in keys_to_delete[:20]]) + f"\n*...v√† {len(keys_to_delete) - 20} key kh√°c*",
                inline=False
            )
            await ctx.send(embed=embed)
            return
            
        elif key_type.lower() in ["role", "vai tr√≤", "roles"]:
            # X√≥a ng·∫´u nhi√™n key ƒë·ªïi role
            keys_to_choose = [key for key, info in active_keys.items() if info.get("type") == "role"]
            
            if not keys_to_choose:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ key",
                    description="Kh√¥ng c√≥ key ƒë·ªïi role n√†o trong h·ªá th·ªëng ƒë·ªÉ x√≥a.",
                    color=discord.Color.red()
                )
                await ctx.send(embed=embed)
                return
                
            # X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng key th·ª±c t·∫ø s·∫Ω x√≥a
            amount = min(amount, len(keys_to_choose))
            
            # Ch·ªçn ng·∫´u nhi√™n key ƒë·ªÉ x√≥a
            keys_to_delete = random.sample(keys_to_choose, amount)
            
            # X√≥a c√°c key ƒë√£ ch·ªçn
            for key in keys_to_delete:
                del active_keys[key]
                
            embed = discord.Embed(
                title="‚úÖ ƒê√£ X√≥a Key",
                description=f"ƒê√£ x√≥a **{amount}** key ƒë·ªïi role ng·∫´u nhi√™n kh·ªèi h·ªá th·ªëng.",
                color=discord.Color.green()
            )
            embed.add_field(
                name="Danh s√°ch key ƒë√£ x√≥a", 
                value="\n".join([f"`{key}`" for key in keys_to_delete]) if len(keys_to_delete) <= 20 else 
                      "\n".join([f"`{key}`" for key in keys_to_delete[:20]]) + f"\n*...v√† {len(keys_to_delete) - 20} key kh√°c*",
                inline=False
            )
            await ctx.send(embed=embed)
            return
            
        else:
            # Lo·∫°i key kh√¥ng h·ª£p l·ªá
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Lo·∫°i key kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng `xu` ho·∫∑c `role`.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
    
    # Tr∆∞·ªùng h·ª£p c√≤n l·∫°i: x√≥a m·ªôt key c·ª• th·ªÉ
    key_code = key_or_amount
    
    # Ki·ªÉm tra xem key c√≥ t·ªìn t·∫°i kh√¥ng
    if key_code not in active_keys:
        embed = discord.Embed(
            title="‚ùå Key kh√¥ng t·ªìn t·∫°i",
            description=f"Key `{key_code}` kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # L·∫•y th√¥ng tin key tr∆∞·ªõc khi x√≥a
    key_info = active_keys[key_code]
    key_type = key_info.get("type", "currency")
    
    if key_type == "currency":
        # Key ƒë·ªïi xu
        key_value = f"{key_info['amount']} xu"
        key_uses = key_info["uses"]
    else:
        # Key ƒë·ªïi role
        role_info = key_info.get("role_info", {})
        role_name = role_info.get("role_name", "Kh√¥ng x√°c ƒë·ªãnh")
        key_value = f"Role {role_name}"
        key_uses = key_info["uses"]
    
    # X√≥a key
    del active_keys[key_code]
    
    # Th√¥ng b√°o ƒë√£ x√≥a th√†nh c√¥ng
    embed = discord.Embed(
        title="‚úÖ ƒê√£ X√≥a Key",
        description=f"ƒê√£ x√≥a key `{key_code}` kh·ªèi h·ªá th·ªëng.",
        color=discord.Color.green()
    )
    
    embed.add_field(name="Lo·∫°i key", value=f"{'ƒê·ªïi xu' if key_type == 'currency' else 'ƒê·ªïi role'}", inline=True)
    embed.add_field(name="Gi√° tr·ªã", value=key_value, inline=True)
    embed.add_field(name="L∆∞·ª£t s·ª≠ d·ª•ng c√≤n l·∫°i", value=str(key_uses), inline=True)
    
    await ctx.send(embed=embed)

@bot.command(name='ckey', aliases=['checkkey', 'keyinfo', 'ki'])
@admin_only()
async def check_key(ctx, key_code: str = None):
    """Ki·ªÉm tra th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt key"""
    if key_code is None:
        embed = discord.Embed(
            title="‚ÑπÔ∏è Ki·ªÉm Tra Key - H∆∞·ªõng D·∫´n",
            description="Ki·ªÉm tra th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt key.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.ckey [m√£ key]`\nV√≠ d·ª•: `.ckey ABC123XYZ`",
            inline=False
        )
        embed.add_field(
            name="L·ªánh li√™n quan",
            value="`.lkey` - Xem danh s√°ch t·∫•t c·∫£ key\n"
                  "`.delkey [m√£ key]` - X√≥a m·ªôt key c·ª• th·ªÉ",
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra xem key c√≥ t·ªìn t·∫°i kh√¥ng
    if key_code not in active_keys:
        embed = discord.Embed(
            title="‚ùå Key kh√¥ng t·ªìn t·∫°i",
            description=f"Key `{key_code}` kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # L·∫•y th√¥ng tin key
    key_info = active_keys[key_code]
    key_type = key_info.get("type", "currency")
    created_by_id = key_info.get("created_by")
    created_time = key_info.get("creation_time", datetime.now())
    redeemed_by = key_info.get("redeemed_by", [])
    uses_left = key_info.get("uses", 0)
    total_uses = len(redeemed_by) + uses_left
    
    # T·∫°o embed hi·ªÉn th·ªã th√¥ng tin
    embed = discord.Embed(
        title=f"üîë Th√¥ng tin Key: {key_code}",
        color=discord.Color.gold() if key_type == "currency" else discord.Color.purple()
    )
    
    # Th√¥ng tin c∆° b·∫£n
    embed.add_field(
        name="üìù Th√¥ng tin c∆° b·∫£n",
        value=f"**Lo·∫°i key:** {'ƒê·ªïi xu' if key_type == 'currency' else 'ƒê·ªïi role'}\n"
              f"**T·∫°o l√∫c:** {discord.utils.format_dt(created_time, style='R')}\n"
              f"**L∆∞·ª£t s·ª≠ d·ª•ng:** {uses_left}/{total_uses}",
        inline=False
    )
    
    # Ng∆∞·ªùi t·∫°o
    if created_by_id:
        try:
            creator = await bot.fetch_user(created_by_id)
            creator_text = f"{creator.mention} ({creator.name})"
        except:
            creator_text = f"ID: {created_by_id}"
    else:
        creator_text = "Kh√¥ng x√°c ƒë·ªãnh"
        
    embed.add_field(name="üë§ Ng∆∞·ªùi t·∫°o", value=creator_text, inline=True)
    
    # Th√¥ng tin ri√™ng theo lo·∫°i key
    if key_type == "currency":
        # Th√¥ng tin key ƒë·ªïi xu
        amount = key_info.get("amount", 0)
        
        embed.add_field(name="üí∞ Gi√° tr·ªã", value=f"{amount} xu", inline=True)
        
    else:
        # Th√¥ng tin key ƒë·ªïi role
        role_info = key_info.get("role_info", {})
        role_id = role_info.get("role_id")
        role_name = role_info.get("role_name", "Kh√¥ng x√°c ƒë·ªãnh")
        duration = role_info.get("duration")
        
        # ƒê·ªãnh d·∫°ng th·ªùi h·∫°n
        if duration:
            if duration < 3600:
                duration_text = f"{duration // 60} ph√∫t"
            elif duration < 86400:
                duration_text = f"{duration // 3600} gi·ªù"
            else:
                duration_text = f"{duration // 86400} ng√†y"
        else:
            duration_text = "Vƒ©nh vi·ªÖn"
            
        embed.add_field(name="üé≠ Role", value=f"{role_name} (ID: `{role_id}`)", inline=True)
        embed.add_field(name="‚è±Ô∏è Th·ªùi h·∫°n", value=duration_text, inline=True)
    
    # Danh s√°ch ng∆∞·ªùi ƒë√£ s·ª≠ d·ª•ng
    if redeemed_by:
        redeemed_list = []
        for i, user_id in enumerate(redeemed_by, 1):
            if i > 10:  # Gi·ªõi h·∫°n hi·ªÉn th·ªã 10 ng∆∞·ªùi
                redeemed_list.append(f"*...v√† {len(redeemed_by) - 10} ng∆∞·ªùi kh√°c*")
                break
                
            try:
                user = await bot.fetch_user(user_id)
                redeemed_list.append(f"{i}. {user.name} (ID: `{user_id}`)")
            except:
                redeemed_list.append(f"{i}. ID: `{user_id}`")
                
        embed.add_field(
            name=f"üìã ƒê√£ s·ª≠ d·ª•ng ({len(redeemed_by)})",
            value="\n".join(redeemed_list) if redeemed_list else "Kh√¥ng c√≥ ai",
            inline=False
        )
    else:
        embed.add_field(
            name="üìã ƒê√£ s·ª≠ d·ª•ng",
            value="Ch∆∞a c√≥ ai s·ª≠ d·ª•ng key n√†y",
            inline=False
        )
    
    # C√°c t√πy ch·ªçn qu·∫£n l√Ω
    embed.add_field(
        name="‚öôÔ∏è Qu·∫£n l√Ω",
        value=f"`.delkey {key_code}` - X√≥a key n√†y\n",
        inline=False
    )
    
    await ctx.send(embed=embed)

@bot.command(name='checkgl', aliases=['keylog', 'keyusage'])
@admin_only()
async def check_key_usage(ctx, member: discord.Member = None):
    """Ki·ªÉm tra l·ªãch s·ª≠ s·ª≠ d·ª•ng key c·ªßa m·ªôt ng∆∞·ªùi d√πng"""
    if member is None:
        embed = discord.Embed(
            title="‚ÑπÔ∏è Ki·ªÉm Tra L·ªãch S·ª≠ Key - H∆∞·ªõng D·∫´n",
            description="Ki·ªÉm tra l·ªãch s·ª≠ s·ª≠ d·ª•ng key c·ªßa m·ªôt ng∆∞·ªùi d√πng.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.checkgl @ng∆∞·ªùi_d√πng`\nV√≠ d·ª•: `.checkgl @username`",
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    user_id = member.id
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ l·ªãch s·ª≠ s·ª≠ d·ª•ng key kh√¥ng
    if user_id not in key_log or not key_log[user_id]:
        embed = discord.Embed(
            title="üìã L·ªãch S·ª≠ S·ª≠ D·ª•ng Key",
            description=f"{member.mention} ch∆∞a s·ª≠ d·ª•ng key n√†o.",
            color=discord.Color.blue()
        )
        await ctx.send(embed=embed)
        return
    
    # ƒê·∫øm s·ªë l∆∞·ª£ng key theo lo·∫°i
    user_logs = key_log[user_id]
    currency_keys = [log for log in user_logs if log.get("type", "currency") == "currency"]
    role_keys = [log for log in user_logs if log.get("type") == "role"]
    
    # T·∫°o embed hi·ªÉn th·ªã th√¥ng tin
    embed = discord.Embed(
        title=f"üìã L·ªãch S·ª≠ S·ª≠ D·ª•ng Key c·ªßa {member.name}",
        description=f"{member.mention} ƒë√£ s·ª≠ d·ª•ng **{len(user_logs)}** key.",
        color=discord.Color.gold()
    )
    
    embed.add_field(
        name="üìä T·ªïng quan",
        value=f"üí∞ Key ƒë·ªïi xu: **{len(currency_keys)}**\n"
              f"üé≠ Key ƒë·ªïi role: **{len(role_keys)}**",
        inline=False
    )
    
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ s·ª≠ d·ª•ng key ƒë·ªïi xu g·∫ßn ƒë√¢y nh·∫•t (t·ªëi ƒëa 5)
    if currency_keys:
        # S·∫Øp x·∫øp theo th·ªùi gian, m·ªõi nh·∫•t l√™n ƒë·∫ßu
        recent_currency_keys = sorted(currency_keys, key=lambda x: x.get("time", datetime.now()), reverse=True)[:5]
        
        currency_history = ""
        for i, log in enumerate(recent_currency_keys, 1):
            key = log.get("key", "N/A")
            amount = log.get("amount", 0)
            time = log.get("time", datetime.now())
            time_str = discord.utils.format_dt(time, style="R")
            
            currency_history += f"{i}. `{key[:8]}...` - **{amount} xu** - {time_str}\n"
            
        embed.add_field(
            name=f"üí∞ L·ªãch s·ª≠ key ƒë·ªïi xu g·∫ßn ƒë√¢y",
            value=currency_history,
            inline=False
        )
    
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ s·ª≠ d·ª•ng key ƒë·ªïi role g·∫ßn ƒë√¢y nh·∫•t (t·ªëi ƒëa 5)
    if role_keys:
        # S·∫Øp x·∫øp theo th·ªùi gian, m·ªõi nh·∫•t l√™n ƒë·∫ßu
        recent_role_keys = sorted(role_keys, key=lambda x: x.get("time", datetime.now()), reverse=True)[:5]
        
        role_history = ""
        for i, log in enumerate(recent_role_keys, 1):
            key = log.get("key", "N/A")
            role_name = log.get("role_name", "Kh√¥ng x√°c ƒë·ªãnh")
            time = log.get("time", datetime.now())
            time_str = discord.utils.format_dt(time, style="R")
            
            role_history += f"{i}. `{key[:8]}...` - **{role_name}** - {time_str}\n"
            
        embed.add_field(
            name=f"üé≠ L·ªãch s·ª≠ key ƒë·ªïi role g·∫ßn ƒë√¢y",
            value=role_history,
            inline=False
        )
    
    # Hi·ªÉn th·ªã s·ªë li·ªáu th·ªëng k√™ trong 24h v√† 7 ng√†y qua
    now = datetime.now()
    day_ago = now - timedelta(days=1)
    week_ago = now - timedelta(days=7)
    
    keys_last_24h = [log for log in user_logs if log.get("time", now) > day_ago]
    keys_last_week = [log for log in user_logs if log.get("time", now) > week_ago]
    
    embed.add_field(
        name="üìä Th·ªëng k√™ th·ªùi gian",
        value=f"‚è∞ **24 gi·ªù qua:** {len(keys_last_24h)} key\n"
              f"üìÖ **7 ng√†y qua:** {len(keys_last_week)} key\n"
              f"üóìÔ∏è **T·ªïng c·ªông:** {len(user_logs)} key",
        inline=False
    )
    
    embed.set_thumbnail(url=member.display_avatar.url)
    embed.set_footer(text=f"ID: {user_id} | Server: {ctx.guild.name}")
    
    await ctx.send(embed=embed)


@bot.command(name='serverinfo', aliases=['si', 'server'])
async def server_info(ctx):
    """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ server"""
    guild = ctx.guild
    
    # T·∫°o embed v·ªõi th√¥ng tin server
    embed = discord.Embed(
        title=f"üìä Th√¥ng tin server {guild.name}",
        description=f"{guild.description or 'Kh√¥ng c√≥ m√¥ t·∫£'}",
        color=discord.Color.blue()
    )
    
    # Th√™m banner n·∫øu c√≥
    if guild.banner:
        embed.set_image(url=guild.banner.url)
    
    # Th√™m icon server
    if guild.icon:
        embed.set_thumbnail(url=guild.icon.url)
    
    # Th√¥ng tin c∆° b·∫£n
    embed.add_field(
        name="üÜî ID Server", 
        value=f"`{guild.id}`", 
        inline=True
    )
    
    # Th·ªùi gian t·∫°o server (s·ª≠a ph·∫ßn n√†y ƒë·ªÉ kh√¥ng d√πng datetime.timezone)
    created_at = guild.created_at
    # S·ª≠ d·ª•ng h√†m format_dt c·ªßa Discord ƒë·ªÉ hi·ªÉn th·ªã th·ªùi gian
    created_at_str = discord.utils.format_dt(created_at, style='F')
    time_ago = discord.utils.format_dt(created_at, style='R')
    
    embed.add_field(
        name="üìÖ Ng√†y t·∫°o",
        value=f"{created_at_str}\n({time_ago})",
        inline=True
    )
    
    # Ch·ªß s·ªü h·ªØu
    embed.add_field(
        name="üëë Ch·ªß s·ªü h·ªØu",
        value=f"{guild.owner.mention if guild.owner else 'Kh√¥ng x√°c ƒë·ªãnh'}",
        inline=True
    )
    
    # Th·ªëng k√™ th√†nh vi√™n
    total_members = guild.member_count
    humans = len([m for m in guild.members if not m.bot])
    bots = total_members - humans
    
    embed.add_field(
        name="üë• Th√†nh vi√™n",
        value=f"T·ªïng: **{total_members}**\nNg∆∞·ªùi: **{humans}**\nBot: **{bots}**",
        inline=True
    )
    
    # K√™nh
    text_channels = len(guild.text_channels)
    voice_channels = len(guild.voice_channels)
    categories = len(guild.categories)
    
    embed.add_field(
        name="üìä K√™nh",
        value=f"VƒÉn b·∫£n: **{text_channels}**\nTho·∫°i: **{voice_channels}**\nDanh m·ª•c: **{categories}**",
        inline=True
    )
    
    # Role
    embed.add_field(
        name="üè∑Ô∏è Role",
        value=f"**{len(guild.roles)}** role",
        inline=True
    )
    
    # Emoji v√† sticker
    embed.add_field(
        name="üòÄ Emoji & Sticker",
        value=f"Emoji: **{len(guild.emojis)}**\nSticker: **{len(guild.stickers)}**",
        inline=True
    )
    
    # M·ª©c boost
    premium_tier = guild.premium_tier
    boost_status = f"C·∫•p {premium_tier}" if premium_tier > 0 else "Kh√¥ng c√≥"
    boosts = guild.premium_subscription_count
    
    embed.add_field(
        name="üöÄ Boost",
        value=f"Tr·∫°ng th√°i: **{boost_status}**\nS·ªë l∆∞·ª£ng: **{boosts}** boost",
        inline=True
    )
    
    # C√°c t√≠nh nƒÉng ƒë·∫∑c bi·ªát
    features = guild.features
    if features:
        formatted_features = ", ".join(f"`{feature.replace('_', ' ').title()}`" for feature in features)
    else:
        formatted_features = "Kh√¥ng c√≥ t√≠nh nƒÉng ƒë·∫∑c bi·ªát"
    
    embed.add_field(
        name="‚ú® T√≠nh nƒÉng ƒë·∫∑c bi·ªát",
        value=formatted_features,
        inline=False
    )
    
    # Footer
    embed.set_footer(text=f"Y√™u c·∫ßu b·ªüi: {ctx.author.name} ‚Ä¢ {ctx.guild.name}")
    
    await ctx.send(embed=embed)


# Helper functions
def get_emoji_limit(premium_tier):
    """L·∫•y gi·ªõi h·∫°n emoji d·ª±a tr√™n premium tier"""
    limits = {
        0: 50,
        1: 100,
        2: 150,
        3: 250
    }
    return limits.get(premium_tier, 50)

def get_sticker_limit(premium_tier):
    """L·∫•y gi·ªõi h·∫°n sticker d·ª±a tr√™n premium tier"""
    limits = {
        0: 0,
        1: 15,
        2: 30,
        3: 60
    }
    return limits.get(premium_tier, 0)

@server_info.error
async def server_info_error(ctx, error):
    """X·ª≠ l√Ω l·ªói cho l·ªánh server_info"""
    if isinstance(error, commands.NoPrivateMessage):
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong server.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='warn')
@commands.has_permissions(kick_members=True)
async def warn_member(ctx, member: discord.Member = None, *, reason: str = "Kh√¥ng c√≥ l√Ω do"):
    """C·∫£nh b√°o m·ªôt th√†nh vi√™n, ƒë·ªß 3 l·∫ßn s·∫Ω b·ªã kick kh·ªèi server"""
    if member is None:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu th√¥ng tin",
            description="Vui l√≤ng ch·ªâ ƒë·ªãnh th√†nh vi√™n c·∫ßn c·∫£nh b√°o.\nV√≠ d·ª•: `.warn @user L√Ω do c·∫£nh b√°o`",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra kh√¥ng th·ªÉ c·∫£nh b√°o ch√≠nh m√¨nh
    if member.id == ctx.author.id:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n kh√¥ng th·ªÉ c·∫£nh b√°o ch√≠nh m√¨nh!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra kh√¥ng th·ªÉ c·∫£nh b√°o bot
    if member.bot:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n kh√¥ng th·ªÉ c·∫£nh b√°o bot!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra kh√¥ng th·ªÉ c·∫£nh b√°o ng∆∞·ªùi c√≥ quy·ªÅn cao h∆°n
    if member.top_role >= ctx.author.top_role and ctx.author.id != ctx.guild.owner_id:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n kh√¥ng th·ªÉ c·∫£nh b√°o ng∆∞·ªùi c√≥ vai tr√≤ cao h∆°n ho·∫∑c ngang b·∫±ng b·∫°n!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # L∆∞u tr·ªØ c·∫£nh b√°o m·ªõi
    guild_id = ctx.guild.id
    user_id = member.id
    
    if guild_id not in warnings:
        warnings[guild_id] = {}
    
    if user_id not in warnings[guild_id]:
        warnings[guild_id][user_id] = []
    
    warning_data = {
        "reason": reason,
        "time": discord.utils.utcnow(),
        "warner_id": ctx.author.id
    }
    
    warnings[guild_id][user_id].append(warning_data)
    
    # ƒê·∫øm s·ªë c·∫£nh b√°o
    warn_count = len(warnings[guild_id][user_id])
    
    # T·∫°o embed th√¥ng b√°o c·∫£nh b√°o
    embed = discord.Embed(
        title=f"‚ö†Ô∏è C·∫£nh b√°o #{warn_count}",
        description=f"{member.mention} ƒë√£ b·ªã c·∫£nh b√°o!",
        color=discord.Color.orange()
    )
    
    embed.add_field(name="L√Ω do", value=reason, inline=False)
    embed.add_field(name="C·∫£nh b√°o b·ªüi", value=ctx.author.mention, inline=True)
    embed.add_field(name="S·ªë c·∫£nh b√°o hi·ªán t·∫°i", value=f"{warn_count}/3", inline=True)
    
    # N·∫øu ƒë·ªß 3 c·∫£nh b√°o, kick ng∆∞·ªùi d√πng
    if warn_count >= 3:
        embed.add_field(
            name="‚õî H√†nh ƒë·ªông t·ª± ƒë·ªông",
            value=f"{member.mention} ƒë√£ ƒë·∫°t ƒë·∫øn 3 c·∫£nh b√°o v√† s·∫Ω b·ªã kick kh·ªèi server.",
            inline=False
        )
        embed.color = discord.Color.red()
        
        # Th√™m chi ti·∫øt v·ªÅ c√°c l·∫ßn c·∫£nh b√°o tr∆∞·ªõc
        warning_details = ""
        for i, warn in enumerate(warnings[guild_id][user_id], 1):
            warner = ctx.guild.get_member(warn["warner_id"])
            warner_name = warner.name if warner else "Unknown"
            time_str = discord.utils.format_dt(warn["time"], "R")
            warning_details += f"**#{i}** - B·ªüi {warner_name} {time_str}: {warn['reason']}\n"
        
        embed.add_field(name="Chi ti·∫øt c·∫£nh b√°o", value=warning_details, inline=False)
        
        # G·ª≠i th√¥ng b√°o
        await ctx.send(embed=embed)
        
        # C·ªë g·∫Øng g·ª≠i DM cho ng∆∞·ªùi d√πng tr∆∞·ªõc khi kick
        try:
            kick_dm = discord.Embed(
                title="‚õî B·∫°n ƒë√£ b·ªã kick",
                description=f"B·∫°n ƒë√£ b·ªã kick kh·ªèi server **{ctx.guild.name}** sau khi nh·∫≠n ƒë·ªß 3 c·∫£nh b√°o.",
                color=discord.Color.red()
            )
            kick_dm.add_field(name="L√Ω do c·∫£nh b√°o cu·ªëi c√πng", value=reason, inline=False)
            
            await member.send(embed=kick_dm)
        except:
            # B·ªè qua n·∫øu kh√¥ng th·ªÉ g·ª≠i DM
            pass
        
        # Kick th√†nh vi√™n
        try:
            await member.kick(reason=f"ƒê√£ nh·∫≠n 3 c·∫£nh b√°o. C·∫£nh b√°o cu·ªëi: {reason}")
            
            # G·ª≠i x√°c nh·∫≠n kick
            kick_confirm = discord.Embed(
                title="‚úÖ ƒê√£ kick th√†nh c√¥ng",
                description=f"{member.name} ƒë√£ b·ªã kick kh·ªèi server sau khi nh·∫≠n ƒë·ªß 3 c·∫£nh b√°o.",
                color=discord.Color.green()
            )
            await ctx.send(embed=kick_confirm)
            
        except discord.Forbidden:
            # Kh√¥ng ƒë·ªß quy·ªÅn ƒë·ªÉ kick
            permission_error = discord.Embed(
                title="‚ùå L·ªói quy·ªÅn h·∫°n",
                description="Bot kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ kick th√†nh vi√™n n√†y.",
                color=discord.Color.red()
            )
            await ctx.send(embed=permission_error)
            
        except Exception as e:
            # L·ªói kh√°c
            error_embed = discord.Embed(
                title="‚ùå L·ªói",
                description=f"ƒê√£ x·∫£y ra l·ªói khi kick th√†nh vi√™n: {str(e)}",
                color=discord.Color.red()
            )
            await ctx.send(embed=error_embed)
    else:
        # Ch∆∞a ƒë·ªß 3 c·∫£nh b√°o
        embed.add_field(
            name="‚ÑπÔ∏è L∆∞u √Ω", 
            value=f"N·∫øu nh·∫≠n th√™m {3 - warn_count} c·∫£nh b√°o n·ªØa, {member.mention} s·∫Ω b·ªã kick kh·ªèi server.",
            inline=False
        )
        
        # G·ª≠i th√¥ng b√°o c√¥ng khai
        await ctx.send(embed=embed)
        
        # C·ªë g·∫Øng g·ª≠i DM th√¥ng b√°o cho ng∆∞·ªùi d√πng
        try:
            warn_dm = discord.Embed(
                title=f"‚ö†Ô∏è B·∫°n ƒë√£ b·ªã c·∫£nh b√°o trong {ctx.guild.name}",
                description=f"ƒê√¢y l√† c·∫£nh b√°o th·ª© {warn_count}/3.",
                color=discord.Color.orange()
            )
            warn_dm.add_field(name="L√Ω do", value=reason, inline=False)
            warn_dm.add_field(name="C·∫£nh b√°o b·ªüi", value=ctx.author.name, inline=True)
            warn_dm.add_field(
                name="L∆∞u √Ω", 
                value=f"N·∫øu b·∫°n nh·∫≠n th√™m {3 - warn_count} c·∫£nh b√°o n·ªØa, b·∫°n s·∫Ω b·ªã kick kh·ªèi server.",
                inline=False
            )
            
            await member.send(embed=warn_dm)
        except:
            # B·ªè qua n·∫øu kh√¥ng th·ªÉ g·ª≠i DM
            pass

@bot.command(name='warnings', aliases=['warns'])
@commands.has_permissions(kick_members=True)
async def list_warnings(ctx, member: discord.Member = None):
    """Xem c·∫£nh b√°o c·ªßa m·ªôt th√†nh vi√™n"""
    if member is None:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu th√¥ng tin",
            description="Vui l√≤ng ch·ªâ ƒë·ªãnh th√†nh vi√™n ƒë·ªÉ xem c·∫£nh b√°o.\nV√≠ d·ª•: `.warnings @user`",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    guild_id = ctx.guild.id
    user_id = member.id
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ c·∫£nh b√°o n√†o kh√¥ng
    if (guild_id not in warnings or 
        user_id not in warnings[guild_id] or 
        not warnings[guild_id][user_id]):
        embed = discord.Embed(
            title="‚úÖ Kh√¥ng c√≥ c·∫£nh b√°o",
            description=f"{member.mention} kh√¥ng c√≥ c·∫£nh b√°o n√†o.",
            color=discord.Color.green())
        await ctx.send(embed=embed)
        return
    
    # Hi·ªÉn th·ªã danh s√°ch c·∫£nh b√°o
    warn_list = warnings[guild_id][user_id]
    warn_count = len(warn_list)
    
    embed = discord.Embed(
        title=f"‚ö†Ô∏è C·∫£nh b√°o c·ªßa {member.name}",
        description=f"{member.mention} c√≥ **{warn_count}** c·∫£nh b√°o.",
        color=discord.Color.orange()
    )
    
    # Th√™m chi ti·∫øt v·ªÅ t·ª´ng c·∫£nh b√°o
    for i, warn in enumerate(warn_list, 1):
        warner = ctx.guild.get_member(warn["warner_id"])
        warner_name = warner.name if warner else "Unknown"
        time_str = discord.utils.format_dt(warn["time"], "F")
        
        embed.add_field(
            name=f"C·∫£nh b√°o #{i}",
            value=f"**L√Ω do:** {warn['reason']}\n**B·ªüi:** {warner_name}\n**Th·ªùi gian:** {time_str}",
            inline=False
        )
    
    # Th√™m c·∫£nh b√°o n·∫øu g·∫ßn ƒë·∫°t gi·ªõi h·∫°n
    if warn_count == 2:
        embed.add_field(
            name="‚ö†Ô∏è C·∫£nh b√°o",
            value="Th√™m 1 c·∫£nh b√°o n·ªØa s·∫Ω d·∫´n ƒë·∫øn vi·ªác b·ªã kick kh·ªèi server!",
            inline=False
        )
    
    await ctx.send(embed=embed)


@bot.command(name='delwarn', aliases=['removewarn'])
@commands.has_permissions(kick_members=True)
async def remove_warning(ctx, member: discord.Member = None, index: int = None):
    """X√≥a m·ªôt c·∫£nh b√°o c·ªßa th√†nh vi√™n d·ª±a tr√™n s·ªë th·ª© t·ª±"""
    if member is None or index is None:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu th√¥ng tin",
            description="Vui l√≤ng ch·ªâ ƒë·ªãnh th√†nh vi√™n v√† s·ªë th·ª© t·ª± c·∫£nh b√°o c·∫ßn x√≥a.\nV√≠ d·ª•: `.delwarn @user 1`",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    guild_id = ctx.guild.id
    user_id = member.id
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ c·∫£nh b√°o n√†o kh√¥ng
    if (guild_id not in warnings or 
        user_id not in warnings[guild_id] or 
        not warnings[guild_id][user_id]):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng c√≥ c·∫£nh b√°o",
            description=f"{member.mention} kh√¥ng c√≥ c·∫£nh b√°o n√†o ƒë·ªÉ x√≥a.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra index h·ª£p l·ªá
    warn_list = warnings[guild_id][user_id]
    if index <= 0 or index > len(warn_list):
        embed = discord.Embed(
            title="‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá",
            description=f"S·ªë th·ª© t·ª± ph·∫£i t·ª´ 1 ƒë·∫øn {len(warn_list)}.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # X√≥a c·∫£nh b√°o
    removed_warning = warn_list.pop(index-1)
    
    # X√≥a to√†n b·ªô entry n·∫øu kh√¥ng c√≤n c·∫£nh b√°o n√†o
    if not warn_list:
        del warnings[guild_id][user_id]
        if not warnings[guild_id]:
            del warnings[guild_id]
    
    # Th√¥ng b√°o ƒë√£ x√≥a c·∫£nh b√°o
    embed = discord.Embed(
        title="‚úÖ ƒê√£ x√≥a c·∫£nh b√°o",
        description=f"ƒê√£ x√≥a c·∫£nh b√°o #{index} c·ªßa {member.mention}.",
        color=discord.Color.green()
    )
    
    # Hi·ªÉn th·ªã s·ªë c·∫£nh b√°o c√≤n l·∫°i
    remaining_warns = 0
    if guild_id in warnings and user_id in warnings[guild_id]:
        remaining_warns = len(warnings[guild_id][user_id])
    
    embed.add_field(
        name="S·ªë c·∫£nh b√°o c√≤n l·∫°i",
        value=f"{remaining_warns}/3",
        inline=True
    )
    
    await ctx.send(embed=embed)

@bot.command(name='clearwarn', aliases=['resetwarns'])
@commands.has_permissions(administrator=True)
async def clear_all_warnings(ctx, member: discord.Member = None):
    """X√≥a t·∫•t c·∫£ c·∫£nh b√°o c·ªßa m·ªôt th√†nh vi√™n (ch·ªâ Admin)"""
    if member is None:
        embed = discord.Embed(
            title="‚ùå Thi·∫øu th√¥ng tin",
            description="Vui l√≤ng ch·ªâ ƒë·ªãnh th√†nh vi√™n ƒë·ªÉ x√≥a t·∫•t c·∫£ c·∫£nh b√°o.\nV√≠ d·ª•: `.clearwarns @user`",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    guild_id = ctx.guild.id
    user_id = member.id
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ c·∫£nh b√°o n√†o kh√¥ng
    if (guild_id not in warnings or 
        user_id not in warnings[guild_id] or 
        not warnings[guild_id][user_id]):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng c√≥ c·∫£nh b√°o",
            description=f"{member.mention} kh√¥ng c√≥ c·∫£nh b√°o n√†o ƒë·ªÉ x√≥a.",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return
    
    # ƒê·∫øm s·ªë c·∫£nh b√°o tr∆∞·ªõc khi x√≥a
    warn_count = len(warnings[guild_id][user_id])
    
    # X√≥a t·∫•t c·∫£ c·∫£nh b√°o
    del warnings[guild_id][user_id]
    if not warnings[guild_id]:
        del warnings[guild_id]
    
    # Th√¥ng b√°o th√†nh c√¥ng
    embed = discord.Embed(
        title="‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ c·∫£nh b√°o",
        description=f"ƒê√£ x√≥a th√†nh c√¥ng **{warn_count}** c·∫£nh b√°o c·ªßa {member.mention}.",
        color=discord.Color.green()
    )
    
    await ctx.send(embed=embed)


@bot.command(name='checktimeout', aliases=['checktime', 'timeoutinfo'])
async def checktimeout(ctx, member: discord.Member = None):
    """Check if a user is timed out and for how long"""
    if member is None:
        member = ctx.author
    
    try:
        is_timed_out, remaining_seconds, expiry_time = await check_timeout_status(member)
        
        if is_timed_out:
            # Convert seconds to a more readable format
            days, remainder = divmod(int(remaining_seconds), 86400)
            hours, remainder = divmod(remainder, 3600)
            minutes, seconds = divmod(remainder, 60)
            
            # Format the time string
            time_parts = []
            if days > 0:
                time_parts.append(f"{days} ng√†y")
            if hours > 0:
                time_parts.append(f"{hours} gi·ªù")
            if minutes > 0:
                time_parts.append(f"{minutes} ph√∫t")
            if seconds > 0 or not time_parts:
                time_parts.append(f"{seconds} gi√¢y")
                
            time_str = " ".join(time_parts)
            
            # Format the expiry time
            expiry_timestamp = int(expiry_time.timestamp()) if expiry_time else None
            
            embed = discord.Embed(
                title="üîá Tr·∫°ng th√°i Timeout",
                description=f"{member.mention} **ƒëang b·ªã timeout**",
                color=discord.Color.red()
            )
            embed.add_field(name="‚è±Ô∏è Th·ªùi gian c√≤n l·∫°i", value=time_str, inline=False)
            
            if expiry_timestamp:
                embed.add_field(
                    name="‚åõ H·∫øt h·∫°n l√∫c", 
                    value=f"<t:{expiry_timestamp}:F> (<t:{expiry_timestamp}:R>)", 
                    inline=False
                )
                
            moderator_info = await get_timeout_moderator(member)
            if moderator_info:
                embed.add_field(name="üëÆ Ng∆∞·ªùi timeout", value=moderator_info, inline=False)
        else:
            embed = discord.Embed(
                title="üîä Tr·∫°ng th√°i Timeout", 
                description=f"{member.mention} **kh√¥ng b·ªã timeout**",
                color=discord.Color.green()
            )
        
        embed.set_thumbnail(url=member.display_avatar.url)
        await ctx.send(embed=embed)
        
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra tr·∫°ng th√°i timeout: {str(e)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

async def get_timeout_moderator(member):
    """Try to get information about who timed out the member from audit logs"""
    try:
        if not member.guild.me.guild_permissions.view_audit_log:
            return None
            
        async for entry in member.guild.audit_logs(limit=10, action=discord.AuditLogAction.member_update):
            if entry.target.id == member.id:
                # Check if this audit log entry is about a timeout
                changes = [change for change in entry.changes.before if change.key == 'communication_disabled_until']
                if changes:
                    return f"{entry.user.mention} ({entry.user.name})"
        return None
    except:
        return None

@bot.command(name='checkmute', aliases=['mutecheck', 'mutelist', 'checkmuted'])
@commands.has_permissions(manage_roles=True)
async def check_mute(ctx, member: discord.Member = None):
    """Ki·ªÉm tra ng∆∞·ªùi d√πng b·ªã mute v√† th√¥ng tin chi ti·∫øt v·ªÅ l·ªánh mute ƒë√≥"""
    
    # T√¨m mute role trong server
    mute_role = None
    possible_mute_roles = ["muted", "mute", "silenced", "tempmute", "c·∫•m chat"]
    
    # T√¨m role ph√π h·ª£p d·ª±a tr√™n t√™n
    for role in ctx.guild.roles:
        role_name = role.name.lower()
        if any(mute_name in role_name for mute_name in possible_mute_roles):
            mute_role = role
            break
    
    if mute_role is None:
        embed = discord.Embed(
            title="‚ùå Kh√¥ng t√¨m th·∫•y Mute Role",
            description="Server n√†y kh√¥ng c√≥ role mute ƒë∆∞·ª£c c·∫•u h√¨nh. "
                      "H√£y t·∫°o m·ªôt role t√™n 'Muted' ho·∫∑c s·ª≠ d·ª•ng timeout thay th·∫ø.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    if member is not None:
        # Ki·ªÉm tra m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ
        if mute_role in member.roles:
            # T·∫°o embed ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin mute
            embed = discord.Embed(
                title="üîá Th√¥ng tin Mute",
                description=f"{member.mention} ƒëang b·ªã mute trong server.",
                color=discord.Color.orange()
            )
            
            embed.add_field(
                name="üîá Mute Role",
                value=f"{mute_role.mention}",
                inline=False
            )
            
            # Ki·ªÉm tra audit logs ƒë·ªÉ t√¨m th√¥ng tin v·ªÅ ng∆∞·ªùi mute v√† l√Ω do
            try:
                # T√¨m ki·∫øm trong audit log g·∫ßn ƒë√¢y
                audit_logs = [entry async for entry in ctx.guild.audit_logs(
                    limit=50, 
                    action=discord.AuditLogAction.member_role_update
                )]
                
                mute_entry = None
                for entry in audit_logs:
                    # Ki·ªÉm tra n·∫øu ƒë√¢y l√† entry g·∫Øn mute role cho th√†nh vi√™n n√†y
                    if (entry.target.id == member.id and 
                        hasattr(entry, 'changes') and
                        hasattr(entry.changes.after, 'roles') and
                        mute_role.id in [r.id for r in entry.changes.after.roles]):
                        mute_entry = entry
                        break
                
                if mute_entry:
                    # L·∫•y th√¥ng tin moderator
                    moderator = mute_entry.user
                    embed.add_field(
                        name="üëÆ‚Äç‚ôÇÔ∏è Mute b·ªüi",
                        value=f"{moderator.mention} ({moderator.name})",
                        inline=True
                    )
                    
                    # L·∫•y l√Ω do mute (n·∫øu c√≥)
                    reason = mute_entry.reason or "Kh√¥ng c√≥ l√Ω do"
                    embed.add_field(
                        name="üìù L√Ω do",
                        value=reason,
                        inline=True
                    )
                    
                    # Th·ªùi gian √°p d·ª•ng mute
                    embed.add_field(
                        name="üïí Th·ªùi gian √°p d·ª•ng",
                        value=f"<t:{int(mute_entry.created_at.timestamp())}:F>",
                        inline=False
                    )
                else:
                    embed.add_field(
                        name="‚ÑπÔ∏è Th√¥ng tin",
                        value="Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin chi ti·∫øt v·ªÅ mute n√†y trong audit log.",
                        inline=False
                    )
                    
            except discord.Forbidden:
                embed.add_field(
                    name="‚ùå L·ªói",
                    value="Bot kh√¥ng c√≥ quy·ªÅn xem audit logs ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt.",
                    inline=False
                )
            except Exception as e:
                embed.add_field(
                    name="‚ùå L·ªói",
                    value=f"ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra audit logs: {str(e)}",
                    inline=False
                )
            
            # Th√™m h∆∞·ªõng d·∫´n unmute
            embed.add_field(
                name="üîì C√°ch unmute",
                value=f"S·ª≠ d·ª•ng l·ªánh `.unmute {member.name}` ƒë·ªÉ g·ª° mute.",
                inline=False
            )
                
            await ctx.send(embed=embed)
        else:
            # Ng∆∞·ªùi d√πng kh√¥ng b·ªã mute
            embed = discord.Embed(
                title="‚úÖ Kh√¥ng b·ªã Mute",
                description=f"{member.mention} hi·ªán kh√¥ng b·ªã mute trong server.",
                color=discord.Color.green()
            )
            await ctx.send(embed=embed)
            
    else:
        # T√¨m t·∫•t c·∫£ ng∆∞·ªùi d√πng ƒëang b·ªã mute
        muted_members = [member for member in ctx.guild.members if mute_role in member.roles]
        
        if not muted_members:
            # Kh√¥ng c√≥ ai b·ªã mute
            embed = discord.Embed(
                title="‚úÖ Danh s√°ch Mute tr·ªëng",
                description=f"Kh√¥ng c√≥ th√†nh vi√™n n√†o ƒëang b·ªã mute ({mute_role.mention}) trong server.",
                color=discord.Color.green()
            )
            await ctx.send(embed=embed)
            return
        
        # T·∫°o danh s√°ch ng∆∞·ªùi d√πng b·ªã mute
        embed = discord.Embed(
            title="üîá Danh s√°ch Mute",
            description=f"C√≥ **{len(muted_members)}** th√†nh vi√™n ƒëang b·ªã mute ({mute_role.mention}):",
            color=discord.Color.orange()
        )
        
        # Hi·ªÉn th·ªã th√¥ng tin c·ªßa m·ªói ng∆∞·ªùi b·ªã mute
        for i, member in enumerate(muted_members[:15], 1):  # Gi·ªõi h·∫°n 15 ng∆∞·ªùi ƒë·ªÉ tr√°nh embed qu√° d√†i
            # T√¨m th·ªùi gian mute t·ª´ audit log
            mute_time_str = "Kh√¥ng x√°c ƒë·ªãnh"
            try:
                audit_logs = [entry async for entry in ctx.guild.audit_logs(
                    limit=100,
                    action=discord.AuditLogAction.member_role_update
                )]
                
                for entry in audit_logs:
                    if (entry.target.id == member.id and 
                        hasattr(entry, 'changes') and
                        hasattr(entry.changes.after, 'roles') and
                        mute_role.id in [r.id for r in entry.changes.after.roles]):
                        mute_time_str = f"<t:{int(entry.created_at.timestamp())}:R>"
                        break
            except:
                pass
            
            # Th√¥ng tin mute cho m·ªói ng∆∞·ªùi d√πng
            member_info = (
                f"{member.mention} ({member.name})\n"
                f"‚è≥ Th·ªùi gian mute: {mute_time_str}"
            )
            
            embed.add_field(
                name=f"#{i} {member.display_name}",
                value=member_info,
                inline=False
            )
        
        # Th√™m ghi ch√∫ n·∫øu danh s√°ch b·ªã c·∫Øt b·ªõt
        if len(muted_members) > 15:
            embed.add_field(
                name="üìã Ghi ch√∫",
                value=f"Ch·ªâ hi·ªÉn th·ªã 15/{len(muted_members)} ng∆∞·ªùi d√πng b·ªã mute.\nS·ª≠ d·ª•ng `.checkmute @user` ƒë·ªÉ xem chi ti·∫øt v·ªÅ m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ.",
                inline=False
            )
        
        embed.set_footer(text=f"S·ª≠ d·ª•ng .checkmute @user ƒë·ªÉ xem chi ti·∫øt | Server: {ctx.guild.name}")
        await ctx.send(embed=embed)

@check_mute.error
async def check_mute_error(ctx, error):
    """X·ª≠ l√Ω l·ªói cho l·ªánh check_mute"""
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå Thi·∫øu quy·ªÅn h·∫°n",
            description="B·∫°n c·∫ßn c√≥ quy·ªÅn `Manage Roles` ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MemberNotFound):
        embed = discord.Embed(
            title="‚ùå Kh√¥ng t√¨m th·∫•y th√†nh vi√™n",
            description="Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='roleinfo', aliases=['rinfo', 'rolef'])
async def role_info(ctx, *, role: discord.Role = None):
    """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ role trong server"""
    if role is None:
        embed = discord.Embed(
            title="‚ùì Th√¥ng Tin Role - H∆∞·ªõng D·∫´n",
            description="Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt role trong server.",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.roleinfo @role` ho·∫∑c `.roleinfo t√™n role` ho·∫∑c `.roleinfo ID role`",
            inline=False
        )
        embed.add_field(
            name="V√≠ d·ª•",
            value="`.roleinfo @Admin`\n`.roleinfo VIP`\n`.roleinfo 123456789012345678`",
            inline=False
        )
        await ctx.send(embed=embed)
        return

    # T·∫°o embed hi·ªÉn th·ªã th√¥ng tin role
    color = role.color if role.color.value else discord.Color.light_grey()
    embed = discord.Embed(
        title=f"üè∑Ô∏è Th√¥ng Tin Role: {role.name}",
        description=f"Chi ti·∫øt v·ªÅ role {role.mention}",
        color=color
    )
    
    # Th√¥ng tin c∆° b·∫£n
    created_time = int(role.created_at.timestamp())
    embed.add_field(name="üÜî ID", value=f"`{role.id}`", inline=True)
    embed.add_field(name="üìÜ Ng√†y t·∫°o", value=f"<t:{created_time}:F>\n(<t:{created_time}:R>)", inline=True)
    embed.add_field(name="üé® M√†u s·∫Øc", value=f"`{str(role.color).upper()}`", inline=True)
    
    # V·ªã tr√≠ v√† s·ªë th√†nh vi√™n
    member_count = len(role.members)
    embed.add_field(name="üìä V·ªã tr√≠", value=f"{role.position}/{len(ctx.guild.roles)-1}", inline=True)
    embed.add_field(name="üë• S·ªë th√†nh vi√™n", value=f"{member_count} th√†nh vi√™n", inline=True)
    
    # C√°c thu·ªôc t√≠nh
    attributes = []
    if role.hoist:
        attributes.append("‚úì Hi·ªÉn th·ªã ri√™ng")
    else:
        attributes.append("‚úó Hi·ªÉn th·ªã ri√™ng")
        
    if role.mentionable:
        attributes.append("‚úì Cho ph√©p mention")
    else:
        attributes.append("‚úó Cho ph√©p mention")
        
    if role.managed:
        attributes.append("‚úì Qu·∫£n l√Ω b·ªüi t√≠ch h·ª£p")
    else:
        attributes.append("‚úó Qu·∫£n l√Ω b·ªüi t√≠ch h·ª£p")
        
    if role.is_default():
        attributes.append("‚úì Role m·∫∑c ƒë·ªãnh (@everyone)")
    else:
        attributes.append("‚úó Role m·∫∑c ƒë·ªãnh")
    
    embed.add_field(name="‚öôÔ∏è Thu·ªôc t√≠nh", value="\n".join(attributes), inline=False)
    
    # T·∫°o c√°c n√∫t ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt
    view = discord.ui.View(timeout=120)
    
    # N√∫t xem quy·ªÅn h·∫°n
    permissions_button = discord.ui.Button(
        style=discord.ButtonStyle.primary,
        label="Xem Quy·ªÅn H·∫°n", 
        custom_id="permissions",
        emoji="üîí"
    )
    
    # N√∫t xem danh s√°ch th√†nh vi√™n
    members_button = discord.ui.Button(
        style=discord.ButtonStyle.primary,
        label=f"Xem Th√†nh Vi√™n ({member_count})",
        custom_id="members",
        emoji="üë•"
    )
    
    # N√∫t xem c√†i ƒë·∫∑t hi·ªÉn th·ªã
    display_button = discord.ui.Button(
        style=discord.ButtonStyle.secondary,
        label="Xem Hi·ªÉn Th·ªã",
        custom_id="display",
        emoji="üé®"
    )
    
    # ƒê√≥ng/H·ªßy
    close_button = discord.ui.Button(
        style=discord.ButtonStyle.danger,
        label="ƒê√≥ng",
        custom_id="close",
        emoji="‚ùå"
    )

    async def button_callback(interaction):
        if interaction.user != ctx.author:
            await interaction.response.send_message("B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi d√πng l·ªánh n√†y!", ephemeral=True)
            return
            
        button_id = interaction.data["custom_id"]
        
        if button_id == "permissions":
            # T·∫°o embed quy·ªÅn h·∫°n
            perms_embed = discord.Embed(
                title=f"üîí Quy·ªÅn H·∫°n c·ªßa {role.name}",
                color=color
            )
            
            # L·∫•y t·∫•t c·∫£ c√°c quy·ªÅn c·ªßa role
            all_perms = []
            for perm, value in role.permissions:
                emoji = "‚úÖ" if value else "‚ùå"
                formatted_perm = perm.replace("_", " ").title()
                all_perms.append(f"{emoji} {formatted_perm}")
            
            # Chia quy·ªÅn th√†nh c√°c c·ªôt
            perms_columns = []
            col_size = (len(all_perms) + 2) // 3  # Chia th√†nh 3 c·ªôt
            
            for i in range(0, len(all_perms), col_size):
                perms_columns.append("\n".join(all_perms[i:i+col_size]))
            
            # Th√™m c√°c c·ªôt v√†o embed
            for i, column in enumerate(perms_columns, 1):
                perms_embed.add_field(name=f"C·ªôt {i}", value=column, inline=True)
                
            await interaction.response.edit_message(embed=perms_embed, view=view)
            
        elif button_id == "members":
            # T·∫°o embed danh s√°ch th√†nh vi√™n
            members_embed = discord.Embed(
                title=f"üë• Th√†nh Vi√™n c√≥ Role {role.name}",
                description=f"C√≥ {member_count} th√†nh vi√™n v·ªõi role n√†y",
                color=color
            )
            
            if member_count == 0:
                members_embed.description = "Kh√¥ng c√≥ th√†nh vi√™n n√†o c√≥ role n√†y."
            elif member_count > 30:
                members_list = [f"{i+1}. {member.mention} (`{member.id}`)" for i, member in enumerate(role.members[:30])]
                members_embed.description = f"Hi·ªÉn th·ªã 30/{member_count} th√†nh vi√™n c√≥ role n√†y:\n\n" + "\n".join(members_list)
                members_embed.set_footer(text=f"Hi·ªÉn th·ªã t·ªëi ƒëa 30 th√†nh vi√™n | T·ªïng s·ªë: {member_count}")
            else:
                members_list = [f"{i+1}. {member.mention} (`{member.id}`)" for i, member in enumerate(role.members)]
                members_embed.description = "\n".join(members_list)
            
            await interaction.response.edit_message(embed=members_embed, view=view)
            
        elif button_id == "display":
            # T·∫°o embed hi·ªÉn th·ªã
            display_embed = discord.Embed(
                title=f"üé® Th√¥ng Tin Hi·ªÉn Th·ªã c·ªßa {role.name}",
                color=color
            )
            
            # Hi·ªÉn th·ªã m√†u d∆∞·ªõi d·∫°ng h√¨nh ·∫£nh
            color_hex = f"{role.color.value:0>6x}"
            color_image_url = f"https://singlecolorimage.com/get/{color_hex}/200x50"
            display_embed.set_thumbnail(url=color_image_url)
            
            # Th√™m th√¥ng tin hi·ªÉn th·ªã
            display_embed.add_field(
                name="üé® M√£ m√†u HEX",
                value=f"`#{color_hex.upper()}`",
                inline=True
            )
            display_embed.add_field(
                name="üî¢ M√£ m√†u s·ªë",
                value=f"`{role.color.value}`",
                inline=True
            )
            
            # Hi·ªÉn th·ªã trong danh s√°ch th√†nh vi√™n
            display_embed.add_field(
                name="üìã Hi·ªÉn th·ªã ri√™ng trong danh s√°ch",
                value="‚úÖ C√≥" if role.hoist else "‚ùå Kh√¥ng",
                inline=False
            )
            
            # Icon n·∫øu c√≥
            if role.icon:
                display_embed.set_image(url=role.icon.url)
                display_embed.add_field(
                    name="üñºÔ∏è Icon",
                    value="Role c√≥ icon t√πy ch·ªânh (hi·ªÉn th·ªã b√™n d∆∞·ªõi)",
                    inline=False
                )
            else:
                display_embed.add_field(
                    name="üñºÔ∏è Icon",
                    value="Role kh√¥ng c√≥ icon",
                    inline=False
                )
                
            await interaction.response.edit_message(embed=display_embed, view=view)
            
        elif button_id == "close":
            await interaction.message.delete()

    # G√°n callback cho t·ª´ng n√∫t
    permissions_button.callback = button_callback
    members_button.callback = button_callback
    display_button.callback = button_callback
    close_button.callback = button_callback
    
    # Th√™m c√°c n√∫t v√†o view
    view.add_item(permissions_button)
    view.add_item(members_button)
    view.add_item(display_button)
    view.add_item(close_button)
    
    # H√†m x·ª≠ l√Ω khi timeout
    async def on_timeout():
        # V√¥ hi·ªáu h√≥a t·∫•t c·∫£ c√°c n√∫t
        for button in view.children:
            button.disabled = True
        
        try:
            await message.edit(view=view)
        except:
            pass
    
    view.on_timeout = on_timeout
    
    # G·ª≠i embed
    message = await ctx.send(embed=embed, view=view)

@role_info.error
async def role_info_error(ctx, error):
    if isinstance(error, commands.RoleNotFound):
        embed = discord.Embed(
            title="‚ùå Role kh√¥ng t·ªìn t·∫°i",
            description="Kh√¥ng th·ªÉ t√¨m th·∫•y role v·ªõi t√™n ho·∫∑c ID ƒë√£ cung c·∫•p.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    elif isinstance(error, commands.MissingRequiredArgument):
        embed = discord.Embed(
            title="‚ùì Thi·∫øu th√¥ng tin",
            description="Vui l√≤ng nh·∫≠p t√™n ho·∫∑c ID c·ªßa role. V√≠ d·ª•: `.roleinfo Admin`",
            color=discord.Color.gold()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='steal', aliases=['stealemoji', 'stealer', 'snatch'])
@commands.has_permissions(manage_emojis=True)
async def steal_emoji(ctx, *args):
    """Sao ch√©p emoji ho·∫∑c icon t·ª´ ngu·ªìn kh√°c v√†o server
    
    S·ª≠ d·ª•ng:
    .steal [emoji] - Sao ch√©p emoji t·ª´ tin nh·∫Øn
    .steal [url] [t√™n] - Sao ch√©p t·ª´ URL
    .steal server [ID server] - Sao ch√©p icon server kh√°c
    """
    if not args:
        # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        embed = discord.Embed(
            title="üîÑ Steal Emoji - H∆∞·ªõng D·∫´n",
            description="Sao ch√©p emoji ho·∫∑c icon server v√†o server c·ªßa b·∫°n",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="üìã C√°ch s·ª≠ d·ª•ng",
            value=(
                "**`.steal [emoji]`** - Sao ch√©p emoji ƒë∆∞·ª£c s·ª≠ d·ª•ng trong tin nh·∫Øn\n"
                "**`.steal [url] [t√™n]`** - Sao ch√©p t·ª´ URL ·∫£nh\n"
                "**`.steal server [ID server]`** - Sao ch√©p icon server kh√°c\n"
                "**`.steal getserver [ID server]`** - L·∫•y th√¥ng tin c·ªßa server"
            ),
            inline=False
        )
        embed.add_field(
            name="üìù V√≠ d·ª•",
            value=(
                "**`.steal üòÄ`** - Sao ch√©p emoji m·∫∑c ƒë·ªãnh\n"
                "**`.steal <:thinking:123456789>`** - Sao ch√©p emoji t√πy ch·ªânh\n"
                "**`.steal https://example.com/emoji.png cool_emoji`** - Sao ch√©p t·ª´ URL\n"
                "**`.steal server 123456789`** - Sao ch√©p icon c·ªßa server c√≥ ID 123456789"
            ),
            inline=False
        )
        embed.add_field(
            name="‚ö†Ô∏è Y√™u c·∫ßu",
            value="B·∫°n c·∫ßn c√≥ quy·ªÅn `Manage Emojis` ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
            inline=False
        )
        await ctx.send(embed=embed)
        return
    
    # B√°o ng∆∞·ªùi d√πng ch·ªù trong khi x·ª≠ l√Ω
    processing_msg = await ctx.send("üîÑ **ƒêang x·ª≠ l√Ω...**")
    
    # X√°c ƒë·ªãnh lo·∫°i l·ªánh
    arg_first = args[0].lower()
    
    # Tr∆∞·ªùng h·ª£p 1: Sao ch√©p icon server
    if arg_first == "server" and len(args) > 1:
        try:
            server_id = int(args[1])
            server = bot.get_guild(server_id)
            
            if not server:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng t√¨m th·∫•y server",
                    description=f"Bot kh√¥ng th·ªÉ t√¨m th·∫•y server v·ªõi ID `{server_id}`.\nBot c·∫ßn ph·∫£i ·ªü trong server ƒë√≥ ƒë·ªÉ l·∫•y ƒë∆∞·ª£c icon.",
                    color=discord.Color.red()
                )
                await processing_msg.edit(content=None, embed=embed)
                return
            
            if not server.icon:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng c√≥ icon",
                    description=f"Server **{server.name}** kh√¥ng c√≥ icon.",
                    color=discord.Color.red()
                )
                await processing_msg.edit(content=None, embed=embed)
                return
            
            # T·∫°o t√™n cho icon server
            icon_name = f"{server.name}_icon".replace(" ", "_").lower()[:32]
            
            # T·∫£i icon server
            icon_url = server.icon.url
            icon_bytes = await download_asset(icon_url)
            
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc
            if len(icon_bytes) > 256000:  # 256KB l√† gi·ªõi h·∫°n cho emoji Discord
                embed = discord.Embed(
                    title="‚ùå Icon qu√° l·ªõn",
                    description=f"Icon server v∆∞·ª£t qu√° gi·ªõi h·∫°n k√≠ch th∆∞·ªõc emoji Discord (256KB).",
                    color=discord.Color.red()
                )
                embed.add_field(
                    name="üí° Gi·∫£i ph√°p",
                    value="H√£y t·∫£i icon v·ªÅ, gi·∫£m k√≠ch th∆∞·ªõc v√† t·∫£i l√™n l·∫°i.",
                    inline=False
                )
                embed.add_field(
                    name="üîó URL Icon",
                    value=f"[T·∫£i xu·ªëng t·∫°i ƒë√¢y]({icon_url})",
                    inline=False
                )
                await processing_msg.edit(content=None, embed=embed)
                return
            
            # T·∫°o emoji m·ªõi
            try:
                new_emoji = await ctx.guild.create_custom_emoji(name=icon_name, image=icon_bytes, reason=f"Icon server stolen by {ctx.author}")
                embed = discord.Embed(
                    title="‚úÖ ƒê√£ sao ch√©p icon server",
                    description=f"ƒê√£ t·∫°o emoji {new_emoji} t·ª´ icon c·ªßa server **{server.name}**",
                    color=discord.Color.green()
                )
                embed.add_field(name="üè∑Ô∏è T√™n", value=f"`{icon_name}`", inline=True)
                embed.add_field(name="üë§ ƒê∆∞·ª£c t·∫°o b·ªüi", value=ctx.author.mention, inline=True)
                embed.set_thumbnail(url=icon_url)
                await processing_msg.edit(content=None, embed=embed)
            except discord.Forbidden:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng ƒë·ªß quy·ªÅn",
                    description="Bot kh√¥ng c√≥ quy·ªÅn th√™m emoji v√†o server.",
                    color=discord.Color.red()
                )
                await processing_msg.edit(content=None, embed=embed)
            except Exception as e:
                embed = discord.Embed(
                    title="‚ùå L·ªói",
                    description=f"ƒê√£ x·∫£y ra l·ªói khi t·∫°o emoji: {str(e)}",
                    color=discord.Color.red()
                )
                await processing_msg.edit(content=None, embed=embed)
            return
        except ValueError:
            embed = discord.Embed(
                title="‚ùå ID kh√¥ng h·ª£p l·ªá",
                description="ID server ph·∫£i l√† m·ªôt s·ªë nguy√™n.",
                color=discord.Color.red()
            )
            await processing_msg.edit(content=None, embed=embed)
            return
    
    # Tr∆∞·ªùng h·ª£p 2: L·∫•y th√¥ng tin server (ƒë·ªÉ debug)
    elif arg_first == "getserver" and len(args) > 1:
        try:
            server_id = int(args[1])
            server = bot.get_guild(server_id)
            
            if not server:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng t√¨m th·∫•y server",
                    description=f"Bot kh√¥ng th·ªÉ t√¨m th·∫•y server v·ªõi ID `{server_id}`.\nBot c·∫ßn ph·∫£i ·ªü trong server ƒë√≥ ƒë·ªÉ l·∫•y ƒë∆∞·ª£c th√¥ng tin.",
                    color=discord.Color.red()
                )
                await processing_msg.edit(content=None, embed=embed)
                return
            
            # Hi·ªÉn th·ªã th√¥ng tin server
            embed = discord.Embed(
                title=f"‚ÑπÔ∏è Th√¥ng tin Server: {server.name}",
                description=f"ID: `{server.id}`",
                color=discord.Color.blue()
            )
            
            if server.icon:
                embed.set_thumbnail(url=server.icon.url)
                embed.add_field(name="üîó Icon URL", value=f"[Xem t·∫°i ƒë√¢y]({server.icon.url})", inline=False)
            else:
                embed.add_field(name="üñºÔ∏è Icon", value="Server kh√¥ng c√≥ icon", inline=False)
            
            embed.add_field(name="üë• S·ªë th√†nh vi√™n", value=str(server.member_count), inline=True)
            embed.add_field(name="üìÖ Ng√†y t·∫°o", value=discord.utils.format_dt(server.created_at, 'F'), inline=True)
            
            await processing_msg.edit(content=None, embed=embed)
            return
        except ValueError:
            embed = discord.Embed(
                title="‚ùå ID kh√¥ng h·ª£p l·ªá",
                description="ID server ph·∫£i l√† m·ªôt s·ªë nguy√™n.",
                color=discord.Color.red()
            )
            await processing_msg.edit(content=None, embed=embed)
            return
    
    # Tr∆∞·ªùng h·ª£p 3: Sao ch√©p t·ª´ URL
    elif arg_first.startswith(('http://', 'https://')) and len(args) > 1:
        url = args[0]
        emoji_name = ''.join(c for c in args[1] if c.isalnum() or c == '_').lower()
        
        if not emoji_name:
            emoji_name = "stolen_emoji"
        
        # Gi·ªõi h·∫°n ƒë·ªô d√†i t√™n emoji
        emoji_name = emoji_name[:32]
        
        try:
            # T·∫£i ·∫£nh t·ª´ URL
            emoji_bytes = await download_asset(url)
            
            if not emoji_bytes:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng th·ªÉ t·∫£i ·∫£nh",
                    description=f"Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ URL: `{url}`",
                    color=discord.Color.red()
                )
                await processing_msg.edit(content=None, embed=embed)
                return
            
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc
            if len(emoji_bytes) > 256000:  # 256KB l√† gi·ªõi h·∫°n cho emoji Discord
                embed = discord.Embed(
                    title="‚ùå ·∫¢nh qu√° l·ªõn",
                    description=f"·∫¢nh v∆∞·ª£t qu√° gi·ªõi h·∫°n k√≠ch th∆∞·ªõc emoji Discord (256KB).",
                    color=discord.Color.red()
                )
                await processing_msg.edit(content=None, embed=embed)
                return
            
            # T·∫°o emoji m·ªõi
            try:
                new_emoji = await ctx.guild.create_custom_emoji(name=emoji_name, image=emoji_bytes, reason=f"Emoji from URL stolen by {ctx.author}")
                embed = discord.Embed(
                    title="‚úÖ ƒê√£ sao ch√©p emoji t·ª´ URL",
                    description=f"ƒê√£ t·∫°o emoji {new_emoji} t·ª´ URL",
                    color=discord.Color.green()
                )
                embed.add_field(name="üè∑Ô∏è T√™n", value=f"`{emoji_name}`", inline=True)
                embed.add_field(name="üë§ ƒê∆∞·ª£c t·∫°o b·ªüi", value=ctx.author.mention, inline=True)
                embed.set_thumbnail(url=url)
                await processing_msg.edit(content=None, embed=embed)
            except discord.Forbidden:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng ƒë·ªß quy·ªÅn",
                    description="Bot kh√¥ng c√≥ quy·ªÅn th√™m emoji v√†o server.",
                    color=discord.Color.red()
                )
                await processing_msg.edit(content=None, embed=embed)
            except Exception as e:
                embed = discord.Embed(
                    title="‚ùå L·ªói",
                    description=f"ƒê√£ x·∫£y ra l·ªói khi t·∫°o emoji: {str(e)}",
                    color=discord.Color.red()
                )
                await processing_msg.edit(content=None, embed=embed)
            return
        except Exception as e:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description=f"ƒê√£ x·∫£y ra l·ªói: {str(e)}",
                color=discord.Color.red()
            )
            await processing_msg.edit(content=None, embed=embed)
            return
    
    # Tr∆∞·ªùng h·ª£p 4: Sao ch√©p emoji t·ª´ tin nh·∫Øn
    else:
        # Ki·ªÉm tra xem c√≥ ph·∫£i emoji t√πy ch·ªânh kh√¥ng
        emoji_regex = r'<a?:[a-zA-Z0-9_]+:([0-9]+)>'
        match = re.search(emoji_regex, args[0])
        
        if match:
            # ƒê√¢y l√† emoji t√πy ch·ªânh
            emoji_id = match.group(1)
            is_animated = 'a:' in args[0]
            
            # X√°c ƒë·ªãnh t√™n emoji
            if len(args) > 1:
                emoji_name = ''.join(c for c in args[1] if c.isalnum() or c == '_').lower()[:32]
            else:
                # L·∫•y t√™n t·ª´ emoji g·ªëc
                emoji_name_match = re.search(r'<a?:([a-zA-Z0-9_]+):[0-9]+>', args[0])
                if emoji_name_match:
                    emoji_name = emoji_name_match.group(1)
                else:
                    emoji_name = "stolen_emoji"
            
            # T·∫°o URL cho emoji
            if is_animated:
                emoji_url = f"https://cdn.discordapp.com/emojis/{emoji_id}.gif"
            else:
                emoji_url = f"https://cdn.discordapp.com/emojis/{emoji_id}.png"
            
            try:
                # T·∫£i emoji
                emoji_bytes = await download_asset(emoji_url)
                
                # T·∫°o emoji m·ªõi
                new_emoji = await ctx.guild.create_custom_emoji(name=emoji_name, image=emoji_bytes, reason=f"Emoji stolen by {ctx.author}")
                
                embed = discord.Embed(
                    title="‚úÖ ƒê√£ sao ch√©p emoji",
                    description=f"ƒê√£ t·∫°o emoji {new_emoji}",
                    color=discord.Color.green()
                )
                embed.add_field(name="üè∑Ô∏è T√™n", value=f"`{emoji_name}`", inline=True)
                embed.add_field(name="üé≠ Lo·∫°i", value="ƒê·ªông" if is_animated else "Tƒ©nh", inline=True)
                embed.add_field(name="üë§ ƒê∆∞·ª£c t·∫°o b·ªüi", value=ctx.author.mention, inline=True)
                embed.set_thumbnail(url=emoji_url)
                await processing_msg.edit(content=None, embed=embed)
            except discord.Forbidden:
                embed = discord.Embed(
                    title="‚ùå Kh√¥ng ƒë·ªß quy·ªÅn",
                    description="Bot kh√¥ng c√≥ quy·ªÅn th√™m emoji v√†o server.",
                    color=discord.Color.red()
                )
                await processing_msg.edit(content=None, embed=embed)
            except Exception as e:
                embed = discord.Embed(
                    title="‚ùå L·ªói",
                    description=f"ƒê√£ x·∫£y ra l·ªói khi t·∫°o emoji: {str(e)}",
                    color=discord.Color.red()
                )
                await processing_msg.edit(content=None, embed=embed)
        else:
            # C√≥ th·ªÉ l√† emoji Unicode
            embed = discord.Embed(
                title="‚ùì Kh√¥ng ph·∫£i emoji t√πy ch·ªânh",
                description="Kh√¥ng th·ªÉ sao ch√©p emoji m·∫∑c ƒë·ªãnh c·ªßa Discord.",
                color=discord.Color.orange()
            )
            embed.add_field(
                name="üí° G·ª£i √Ω", 
                value="H√£y s·ª≠ d·ª•ng emoji t√πy ch·ªânh ho·∫∑c URL h√¨nh ·∫£nh.", 
                inline=False
            )
            await processing_msg.edit(content=None, embed=embed)

async def download_asset(url):
    """T·∫£i t√†i nguy√™n t·ª´ URL v√† tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng bytes"""
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                return await response.read()
            return None

@steal_emoji.error
async def steal_emoji_error(ctx, error):
    """X·ª≠ l√Ω l·ªói cho l·ªánh steal_emoji"""
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="‚ùå Thi·∫øu quy·ªÅn h·∫°n",
            description="B·∫°n c·∫ßn c√≥ quy·ªÅn `Manage Emojis` ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    elif isinstance(error, commands.CommandInvokeError):
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh: {str(error.original)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"ƒê√£ x·∫£y ra l·ªói: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)

@bot.command(name='spotify', aliases=['sp'])
async def spotify_play(ctx, *, url=None):
    """Ph√°t nh·∫°c t·ª´ Spotify - h·ªó tr·ª£ tracks, albums v√† playlists"""
    if url is None:
        embed = discord.Embed(
            title="üéµ Spotify Player - H∆∞·ªõng d·∫´n",
            description="Ph√°t nh·∫°c t·ª´ Spotify",
            color=discord.Color.green()
        )
        embed.add_field(
            name="C√°ch s·ª≠ d·ª•ng",
            value="`.spotify [Spotify URL]`\nV√≠ d·ª•: `.spotify https://open.spotify.com/track/4eeflgjzTF8xN8U2E0dech`",
            inline=False
        )
        embed.add_field(
            name="üîó H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng",
            value="‚Ä¢ Spotify Track: `https://open.spotify.com/track/...`\n‚Ä¢ Spotify Album: `https://open.spotify.com/album/...`\n‚Ä¢ Spotify Playlist: `https://open.spotify.com/playlist/...`",
            inline=False
        )
        embed.set_thumbnail(url="https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_Green.png")
        await ctx.send(embed=embed)
        return
    
    # Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ v√†o k√™nh voice ch∆∞a
    if not ctx.author.voice:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n c·∫ßn v√†o k√™nh voice tr∆∞·ªõc khi ph√°t nh·∫°c.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    voice_channel = ctx.author.voice.channel
    
    # Ki·ªÉm tra voice client hi·ªán t·∫°i
    voice_client = discord.utils.get(bot.voice_clients, guild=ctx.guild)
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang ·ªü trong k√™nh voice c·ªßa bot kh√¥ng (n·∫øu bot ƒë√£ k·∫øt n·ªëi s·∫µn)
    if voice_client and voice_client.is_connected() and ctx.author.voice.channel != voice_client.channel:
        embed = discord.Embed(
            title="‚ùå L·ªói",
            description="B·∫°n ph·∫£i ·ªü c√πng k√™nh voice v·ªõi bot ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!",
            color=discord.Color.red())
        await ctx.send(embed=embed)
        return

    # Ki·ªÉm tra n·∫øu URL l√† Spotify
    spotify_pattern = r"(open\.spotify\.com\/(track|album|playlist)\/([a-zA-Z0-9]+))"
    match = re.search(spotify_pattern, url, re.IGNORECASE)
    
    if not match:
        embed = discord.Embed(
            title="‚ùå Link kh√¥ng h·ª£p l·ªá",
            description="Vui l√≤ng cung c·∫•p m·ªôt URL Spotify h·ª£p l·ªá.\nV√≠ d·ª•: `https://open.spotify.com/track/4eeflgjzTF8xN8U2E0dech`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # L·∫•y th√¥ng tin t·ª´ URL
    spotify_type = match.group(2)  # track, album, ho·∫∑c playlist
    spotify_id = match.group(3)
    
    # G·ª≠i th√¥ng b√°o ƒëang x·ª≠ l√Ω
    processing_embed = discord.Embed(
        title="üîç ƒêang x·ª≠ l√Ω Spotify...",
        description=f"ƒêang t√¨m th√¥ng tin cho {spotify_type} Spotify: `{spotify_id}`",
        color=discord.Color.green()
    )
    
    processing_embed.set_thumbnail(url="https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_Green.png")
    processing_embed.add_field(
        name="‚è≥ Tr·∫°ng th√°i", 
        value="ƒêang l·∫•y th√¥ng tin... Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t.",
        inline=False
    )
    
    processing_msg = await ctx.send(embed=processing_embed)
    
    try:
        # K·∫øt n·ªëi t·ªõi k√™nh voice n·∫øu ch∆∞a k·∫øt n·ªëi
        if not voice_client or not voice_client.is_connected():
            voice_client = await voice_channel.connect()
        
        # X·ª≠ l√Ω theo lo·∫°i Spotify URL
        if spotify_type == "track":
            await process_spotify_track(ctx, voice_client, processing_msg, spotify_id)
        elif spotify_type == "album":
            await process_spotify_album(ctx, voice_client, processing_msg, spotify_id)
        elif spotify_type == "playlist":
            await process_spotify_playlist(ctx, voice_client, processing_msg, spotify_id)
    
    except Exception as e:
        error_embed = discord.Embed(
            title="‚ùå L·ªói",
            description="Kh√¥ng th·ªÉ x·ª≠ l√Ω link Spotify n√†y!",
            color=discord.Color.red()
        )
        
        # Th√™m th√¥ng tin chi ti·∫øt v·ªÅ l·ªói
        error_message = str(e)
        error_embed.add_field(
            name="Chi ti·∫øt l·ªói",
            value=error_message[:1000] if error_message else "Kh√¥ng c√≥ th√¥ng tin l·ªói",
            inline=False
        )
        
        error_embed.add_field(
            name="üîß Kh·∫Øc ph·ª•c",
            value="- Ki·ªÉm tra xem link Spotify c√≥ ch√≠nh x√°c kh√¥ng\n- ƒê·∫£m b·∫£o b√†i h√°t kh√¥ng b·ªã gi·ªõi h·∫°n khu v·ª±c\n- Th·ª≠ s·ª≠ d·ª•ng l·ªánh `.stvp` thay th·∫ø",
            inline=False
        )
        
        await processing_msg.edit(embed=error_embed)
        print(f"Spotify error: {str(e)}")

async def process_spotify_track(ctx, voice_client, processing_msg, track_id):
    """X·ª≠ l√Ω track Spotify"""
    # C·∫≠p nh·∫≠t th√¥ng b√°o ƒëang x·ª≠ l√Ω
    update_embed = discord.Embed(
        title="üéµ ƒêang x·ª≠ l√Ω Spotify Track",
        description=f"ƒêang l·∫•y th√¥ng tin cho track ID: `{track_id}`",
        color=discord.Color.green()
    )
    update_embed.set_thumbnail(url="https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_Green.png")
    await processing_msg.edit(embed=update_embed)
    
    try:
        # Tr√≠ch xu·∫•t th√¥ng tin track t·ª´ Spotify
        track_info = await extract_spotify_info(track_id)
        
        # Hi·ªÉn th·ªã th√¥ng tin ƒëang x·ª≠ l√Ω
        info_embed = discord.Embed(
            title="üéµ ƒê√£ t√¨m th·∫•y b√†i h√°t Spotify",
            description=f"**{track_info['title']}** b·ªüi **{track_info['artist']}**\n‚è≥ ƒêang t√¨m tr√™n YouTube...",
            color=discord.Color.green()
        )
        info_embed.set_thumbnail(url=track_info.get('image', "https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_Green.png"))
        await processing_msg.edit(embed=info_embed)
        
        # Chuy·ªÉn ƒë·ªïi th√†nh YouTube search
        search_query = f"{track_info['artist']} - {track_info['title']}"
        query = f"ytsearch:{search_query}"
        
        # Chu·∫©n b·ªã options ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin v√† ch∆°i nh·∫°c
        ydl_opts = {
            'format': 'bestaudio/best',
            'extractaudio': True,
            'audioformat': 'mp3',
            'noplaylist': True,
            'nocheckcertificate': True,
            'quiet': True,
            'no_warnings': True,
            'default_search': 'auto',
            'source_address': '0.0.0.0'
        }
        
        # Tr√≠ch xu·∫•t th√¥ng tin b√†i h√°t t·ª´ YouTube
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(query, download=False)
            if 'entries' in info:
                info = info['entries'][0]
            
            url = info['url']
            title = info['title']
            duration = info.get('duration', 0)
            thumbnail = info.get('thumbnail', '')
        
        # T·∫°o ƒë·ªëi t∆∞·ª£ng b√†i h√°t
        song = SongInfo(title, url, duration, thumbnail, requester=ctx.author)
        
        # Kh·ªüi t·∫°o h√†ng ƒë·ª£i n·∫øu ch∆∞a t·ªìn t·∫°i cho guild n√†y
        guild_id = ctx.guild.id
        if guild_id not in music_queues:
            music_queues[guild_id] = []
        
        # Th√™m b√†i h√°t v√†o h√†ng ƒë·ª£i
        music_queues[guild_id].append(song)
        
        # Ph√°t nh·∫°c n·∫øu kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t
        is_playing = voice_client.is_playing()
        if not is_playing:
            await play_next(ctx, voice_client, song)
            
            success_embed = discord.Embed(
                title="üéµ ƒêang ph√°t t·ª´ Spotify",
                description=f"**{track_info['title']}**",
                color=discord.Color.green()
            )
            
            # ƒê·ªãnh d·∫°ng th·ªùi l∆∞·ª£ng th√†nh mm:ss
            minutes = int(duration // 60)
            seconds = int(duration % 60)
            duration_str = f"{minutes}:{seconds:02d}" if duration else "Kh√¥ng x√°c ƒë·ªãnh"
            
            success_embed.add_field(
                name="üé§ Ngh·ªá sƒ©", 
                value=track_info['artist'], 
                inline=True
            )
            
            success_embed.add_field(
                name="‚è±Ô∏è Th·ªùi l∆∞·ª£ng", 
                value=duration_str, 
                inline=True
            )
            
            success_embed.add_field(
                name="üë§ Y√™u c·∫ßu b·ªüi", 
                value=ctx.author.mention, 
                inline=True
            )
            
            success_embed.set_thumbnail(url=track_info.get('image', thumbnail))
            success_embed.set_footer(text="Powered by Spotify")
            
            await processing_msg.edit(embed=success_embed)
        else:
            # Th√¥ng b√°o ƒë√£ th√™m v√†o h√†ng ƒë·ª£i
            queue_position = len(music_queues[guild_id]) - 1
            
            queue_embed = discord.Embed(
                title="üéµ ƒê√£ th√™m v√†o h√†ng ƒë·ª£i t·ª´ Spotify",
                description=f"**{track_info['title']}**",
                color=discord.Color.green()
            )
            
            # ƒê·ªãnh d·∫°ng th·ªùi l∆∞·ª£ng th√†nh mm:ss
            minutes = int(duration // 60)
            seconds = int(duration % 60)
            duration_str = f"{minutes}:{seconds:02d}" if duration else "Kh√¥ng x√°c ƒë·ªãnh"
            
            queue_embed.add_field(
                name="üé§ Ngh·ªá sƒ©", 
                value=track_info['artist'], 
                inline=True
            )
            
            queue_embed.add_field(
                name="‚è±Ô∏è Th·ªùi l∆∞·ª£ng", 
                value=duration_str, 
                inline=True
            )
            
            queue_embed.add_field(
                name="üî¢ V·ªã tr√≠", 
                value=f"#{queue_position + 1}", 
                inline=True
            )
            
            queue_embed.set_thumbnail(url=track_info.get('image', thumbnail))
            queue_embed.set_footer(text="S·ª≠ d·ª•ng .stvq ƒë·ªÉ xem to√†n b·ªô h√†ng ƒë·ª£i")
            
            await processing_msg.edit(embed=queue_embed)
    
    except Exception as e:
        error_embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"Kh√¥ng th·ªÉ x·ª≠ l√Ω Spotify track: {str(e)}",
            color=discord.Color.red()
        )
        await processing_msg.edit(embed=error_embed)
        raise

async def process_spotify_album(ctx, voice_client, processing_msg, album_id):
    """X·ª≠ l√Ω album Spotify"""
    # C·∫≠p nh·∫≠t embed th√¥ng b√°o ƒëang x·ª≠ l√Ω album
    album_embed = discord.Embed(
        title="üíø ƒêang x·ª≠ l√Ω Spotify Album",
        description=f"ƒêang l·∫•y th√¥ng tin cho album ID: `{album_id}`",
        color=discord.Color.green()
    )
    album_embed.set_thumbnail(url="https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_Green.png")
    await processing_msg.edit(embed=album_embed)
    
    try:
        # Tr√≠ch xu·∫•t th√¥ng tin album t·ª´ Spotify
        album_info = await extract_spotify_album_info(album_id)
        
        # Hi·ªÉn th·ªã th√¥ng tin album ƒëang x·ª≠ l√Ω
        album_embed = discord.Embed(
            title="üíø ƒêang x·ª≠ l√Ω Spotify Album",
            description=f"**{album_info['title']}** b·ªüi **{album_info['artist']}**",
            color=discord.Color.green()
        )
        album_embed.add_field(
            name="üî¢ S·ªë b√†i h√°t", 
            value=f"{len(album_info['tracks'])} b√†i h√°t", 
            inline=True
        )
        album_embed.add_field(
            name="‚è≥ Tr·∫°ng th√°i", 
            value="ƒêang th√™m v√†o h√†ng ƒë·ª£i...", 
            inline=True
        )
        album_embed.set_thumbnail(url=album_info.get('image', "https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_Green.png"))
        await processing_msg.edit(embed=album_embed)
        
        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng b√†i h√°t ƒë·ªÉ tr√°nh spam
        max_tracks = min(20, len(album_info['tracks']))
        if len(album_info['tracks']) > 20:
            album_embed.add_field(
                name="‚ö†Ô∏è Gi·ªõi h·∫°n", 
                value=f"Ch·ªâ th√™m {max_tracks} b√†i ƒë·∫ßu ti√™n ƒë·ªÉ tr√°nh qu√° t·∫£i", 
                inline=False
            )
            await processing_msg.edit(embed=album_embed)
        
        # Kh·ªüi t·∫°o h√†ng ƒë·ª£i n·∫øu ch∆∞a t·ªìn t·∫°i
        guild_id = ctx.guild.id
        if guild_id not in music_queues:
            music_queues[guild_id] = []
        
        # X·ª≠ l√Ω t·ª´ng b√†i h√°t trong album
        success_tracks = 0
        first_song = None
        
        for i, track in enumerate(album_info['tracks'][:max_tracks]):
            try:
                # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
                if i % 5 == 0:
                    progress_embed = discord.Embed(
                        title="üíø ƒêang x·ª≠ l√Ω Spotify Album",
                        description=f"**{album_info['title']}** b·ªüi **{album_info['artist']}**",
                        color=discord.Color.green()
                    )
                    progress_embed.add_field(
                        name="üîÑ Ti·∫øn tr√¨nh", 
                        value=f"ƒêang th√™m b√†i {i+1}/{max_tracks}...", 
                        inline=True
                    )
                    progress_embed.set_thumbnail(url=album_info.get('image', "https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_Green.png"))
                    await processing_msg.edit(embed=progress_embed)
                
                # T√¨m ki·∫øm b√†i h√°t tr√™n YouTube
                search_query = f"{track['artist']} - {track['title']}"
                query = f"ytsearch:{search_query}"
                
                # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ YouTube
                ydl_opts = {
                    'format': 'bestaudio/best',
                    'extractaudio': True,
                    'audioformat': 'mp3',
                    'noplaylist': True,
                    'nocheckcertificate': True,
                    'quiet': True,
                    'no_warnings': True,
                    'default_search': 'auto',
                    'source_address': '0.0.0.0'
                }
                
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    info = ydl.extract_info(query, download=False)
                    if 'entries' in info:
                        info = info['entries'][0]
                    
                    url = info['url']
                    title = info['title']
                    duration = info.get('duration', 0)
                    thumbnail = info.get('thumbnail', '')
                
                # T·∫°o ƒë·ªëi t∆∞·ª£ng b√†i h√°t v√† th√™m v√†o h√†ng ƒë·ª£i
                song = SongInfo(title, url, duration, thumbnail, requester=ctx.author)
                
                # L∆∞u b√†i h√°t ƒë·∫ßu ti√™n ƒë·ªÉ ph√°t n·∫øu hi·ªán t·∫°i kh√¥ng c√≥ g√¨ ƒëang ph√°t
                if i == 0:
                    first_song = song
                
                music_queues[guild_id].append(song)
                success_tracks += 1
                
            except Exception as e:
                print(f"L·ªói khi th√™m b√†i {track['title']}: {str(e)}")
                continue
        
        # Ph√°t b√†i h√°t ƒë·∫ßu ti√™n n·∫øu kh√¥ng c√≥ g√¨ ƒëang ph√°t
        is_playing = voice_client.is_playing()
        if not is_playing and first_song:
            await play_next(ctx, voice_client, first_song)
        
        # Th√¥ng b√°o k·∫øt qu·∫£ cu·ªëi c√πng
        final_embed = discord.Embed(
            title="üíø ƒê√£ th√™m Album Spotify v√†o h√†ng ƒë·ª£i",
            description=f"**{album_info['title']}** b·ªüi **{album_info['artist']}**",
            color=discord.Color.green()
        )
        
        final_embed.add_field(
            name="‚úÖ ƒê√£ th√™m", 
            value=f"{success_tracks}/{max_tracks} b√†i h√°t", 
            inline=True
        )
        
        final_embed.add_field(
            name="üë§ Y√™u c·∫ßu b·ªüi", 
            value=ctx.author.mention, 
            inline=True
        )
        
        final_embed.add_field(
            name="üéµ B√†i ƒë·∫ßu ti√™n", 
            value=first_song.title if first_song else "Kh√¥ng c√≥ b√†i n√†o ƒë∆∞·ª£c th√™m", 
            inline=False
        )
        
        final_embed.set_thumbnail(url=album_info.get('image', "https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_Green.png"))
        final_embed.set_footer(text="S·ª≠ d·ª•ng .stvq ƒë·ªÉ xem to√†n b·ªô h√†ng ƒë·ª£i")
        
        await processing_msg.edit(embed=final_embed)
    
    except Exception as e:
        error_embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"Kh√¥ng th·ªÉ x·ª≠ l√Ω Spotify album: {str(e)}",
            color=discord.Color.red()
        )
        await processing_msg.edit(embed=error_embed)
        raise

async def process_spotify_playlist(ctx, voice_client, processing_msg, playlist_id):
    """X·ª≠ l√Ω playlist Spotify"""
    # C·∫≠p nh·∫≠t embed th√¥ng b√°o ƒëang x·ª≠ l√Ω playlist
    playlist_embed = discord.Embed(
        title="üìã ƒêang x·ª≠ l√Ω Spotify Playlist",
        description=f"ƒêang l·∫•y th√¥ng tin cho playlist ID: `{playlist_id}`",
        color=discord.Color.green()
    )
    playlist_embed.set_thumbnail(url="https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_Green.png")
    await processing_msg.edit(embed=playlist_embed)
    
    try:
        # Tr√≠ch xu·∫•t th√¥ng tin playlist t·ª´ Spotify
        playlist_info = await extract_spotify_playlist_info(playlist_id)
        
        # Ki·ªÉm tra xem c√≥ b√†i h√°t n√†o ƒë∆∞·ª£c t√¨m th·∫•y kh√¥ng
        if not playlist_info.get('tracks') or len(playlist_info['tracks']) == 0:
            raise Exception("Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o trong playlist")
        
        # Hi·ªÉn th·ªã th√¥ng tin playlist ƒëang x·ª≠ l√Ω
        playlist_embed = discord.Embed(
            title="üìã ƒêang x·ª≠ l√Ω Spotify Playlist",
            description=f"**{playlist_info.get('title', 'Unknown Playlist')}** ({playlist_info.get('owner', 'Unknown User')})",
            color=discord.Color.green()
        )
        playlist_embed.add_field(
            name="üî¢ S·ªë b√†i h√°t", 
            value=f"{len(playlist_info['tracks'])} b√†i h√°t", 
            inline=True
        )
        playlist_embed.add_field(
            name="‚è≥ Tr·∫°ng th√°i", 
            value="ƒêang th√™m v√†o h√†ng ƒë·ª£i...", 
            inline=True
        )
        playlist_embed.set_thumbnail(url=playlist_info.get('image', "https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_Green.png"))
        await processing_msg.edit(embed=playlist_embed)
        
        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng b√†i h√°t ƒë·ªÉ tr√°nh qu√° t·∫£i
        max_tracks = min(20, len(playlist_info['tracks']))
        if len(playlist_info['tracks']) > 20:
            playlist_embed.add_field(
                name="‚ö†Ô∏è Gi·ªõi h·∫°n", 
                value=f"Ch·ªâ th√™m {max_tracks} b√†i ƒë·∫ßu ti√™n ƒë·ªÉ tr√°nh qu√° t·∫£i", 
                inline=False
            )
            await processing_msg.edit(embed=playlist_embed)
        
        # Kh·ªüi t·∫°o h√†ng ƒë·ª£i n·∫øu ch∆∞a t·ªìn t·∫°i
        guild_id = ctx.guild.id
        if guild_id not in music_queues:
            music_queues[guild_id] = []
        
        # X·ª≠ l√Ω t·ª´ng b√†i h√°t trong playlist
        success_tracks = 0
        first_song = None
        
        # ƒê·∫£m b·∫£o r·∫±ng playlist_info['tracks'] l√† m·ªôt list
        if not isinstance(playlist_info['tracks'], list):
            playlist_info['tracks'] = []
        
        for i, track in enumerate(playlist_info['tracks'][:max_tracks]):
            try:
                # Ki·ªÉm tra c√°c kh√≥a c·∫ßn thi·∫øt c√≥ t·ªìn t·∫°i kh√¥ng
                if not isinstance(track, dict) or 'title' not in track or 'artist' not in track:
                    continue
                    
                # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
                if i % 5 == 0:
                    progress_embed = discord.Embed(
                        title="üìã ƒêang x·ª≠ l√Ω Spotify Playlist",
                        description=f"**{playlist_info.get('title', 'Unknown Playlist')}** ({playlist_info.get('owner', 'Unknown User')})",
                        color=discord.Color.green()
                    )
                    progress_embed.add_field(
                        name="üîÑ Ti·∫øn tr√¨nh", 
                        value=f"ƒêang th√™m b√†i {i+1}/{max_tracks}...", 
                        inline=True
                    )
                    progress_embed.set_thumbnail(url=playlist_info.get('image', "https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_Green.png"))
                    await processing_msg.edit(embed=progress_embed)
                
                # T√¨m ki·∫øm b√†i h√°t tr√™n YouTube
                search_query = f"{track['artist']} - {track['title']}"
                query = f"ytsearch:{search_query}"
                
                # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ YouTube
                ydl_opts = {
                    'format': 'bestaudio/best',
                    'extractaudio': True,
                    'audioformat': 'mp3',
                    'noplaylist': True,
                    'nocheckcertificate': True,
                    'quiet': True,
                    'no_warnings': True,
                    'default_search': 'auto',
                    'source_address': '0.0.0.0'
                }
                
                try:
                    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                        info = ydl.extract_info(query, download=False)
                        
                        # Ki·ªÉm tra entries tr∆∞·ªõc khi truy c·∫≠p
                        if 'entries' not in info or not info['entries']:
                            # N·∫øu kh√¥ng c√≥ entries, b·ªè qua b√†i n√†y
                            continue
                        
                        entry = info['entries'][0]  # L·∫•y k·∫øt qu·∫£ ƒë·∫ßu ti√™n
                        
                        # Ki·ªÉm tra c√°c tr∆∞·ªùng th√¥ng tin c·∫ßn thi·∫øt
                        if 'url' not in entry:
                            continue
                            
                        url = entry['url']
                        title = entry.get('title', f"{track['artist']} - {track['title']}")
                        duration = entry.get('duration', 0)
                        thumbnail = entry.get('thumbnail', '')
                        
                        # T·∫°o ƒë·ªëi t∆∞·ª£ng b√†i h√°t v√† th√™m v√†o h√†ng ƒë·ª£i
                        song = SongInfo(title, url, duration, thumbnail, requester=ctx.author)
                        
                        # L∆∞u b√†i h√°t ƒë·∫ßu ti√™n ƒë·ªÉ ph√°t n·∫øu hi·ªán t·∫°i kh√¥ng c√≥ g√¨ ƒëang ph√°t
                        if i == 0:
                            first_song = song
                        
                        music_queues[guild_id].append(song)
                        success_tracks += 1
                        
                except Exception as yt_error:
                    print(f"L·ªói YouTube DL cho b√†i {track.get('title', 'Unknown')}: {str(yt_error)}")
                    continue
                
            except Exception as track_error:
                print(f"L·ªói khi th√™m b√†i {track.get('title', 'Unknown')}: {str(track_error)}")
                continue
        
        # Ki·ªÉm tra xem c√≥ th√™m ƒë∆∞·ª£c b√†i n√†o kh√¥ng
        if success_tracks == 0:
            raise Exception("Kh√¥ng th·ªÉ th√™m b·∫•t k·ª≥ b√†i h√°t n√†o t·ª´ playlist n√†y")
        
        # Ph√°t b√†i h√°t ƒë·∫ßu ti√™n n·∫øu kh√¥ng c√≥ g√¨ ƒëang ph√°t
        is_playing = voice_client.is_playing() if voice_client else False
        if not is_playing and first_song:
            await play_next(ctx, voice_client, first_song)
        
        # Th√¥ng b√°o k·∫øt qu·∫£ cu·ªëi c√πng
        final_embed = discord.Embed(
            title="üìã ƒê√£ th√™m Playlist Spotify v√†o h√†ng ƒë·ª£i",
            description=f"**{playlist_info.get('title', 'Unknown Playlist')}** ({playlist_info.get('owner', 'Unknown User')})",
            color=discord.Color.green()
        )
        
        final_embed.add_field(
            name="‚úÖ ƒê√£ th√™m", 
            value=f"{success_tracks}/{max_tracks} b√†i h√°t", 
            inline=True
        )
        
        final_embed.add_field(
            name="üë§ Y√™u c·∫ßu b·ªüi", 
            value=ctx.author.mention, 
            inline=True
        )
        
        if first_song:
            playing_status = "‚ñ∂Ô∏è ƒêang ph√°t" if not is_playing else "üéµ ƒê√£ th√™m v√†o h√†ng ƒë·ª£i"
            final_embed.add_field(
                name=playing_status, 
                value=first_song.title, 
                inline=False
            )
        
        final_embed.set_thumbnail(url=playlist_info.get('image', "https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_RGB_Green.png"))
        final_embed.set_footer(text="S·ª≠ d·ª•ng .stvq ƒë·ªÉ xem to√†n b·ªô h√†ng ƒë·ª£i")
        
        await processing_msg.edit(embed=final_embed)
    
    except Exception as e:
        error_embed = discord.Embed(
            title="‚ùå L·ªói",
            description=f"Kh√¥ng th·ªÉ x·ª≠ l√Ω Spotify playlist: {str(e)}",
            color=discord.Color.red()
        )
        await processing_msg.edit(embed=error_embed)
        print(f"L·ªói x·ª≠ l√Ω Spotify playlist: {str(e)}")

async def extract_spotify_info(track_id):
    """Tr√≠ch xu·∫•t th√¥ng tin t·ª´ Spotify track ID"""
    try:
        # S·ª≠ d·ª•ng API kh√¥ng c·∫ßn x√°c th·ª±c ƒë·ªÉ l·∫•y th√¥ng tin c∆° b·∫£n
        api_url = f"https://open.spotify.com/embed/track/{track_id}"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url, headers=headers) as response:
                if response.status != 200:
                    raise Exception(f"API returned status {response.status}")
                
                html_content = await response.text()
                
                # Extract track info from OpenGraph meta tags
                title_match = re.search(r'<meta property="og:title" content="([^"]+)"', html_content)
                artist_match = re.search(r'<meta property="og:description" content="([^"]+)"', html_content)
                image_match = re.search(r'<meta property="og:image" content="([^"]+)"', html_content)
                
                if not title_match:
                    raise Exception("Could not extract track title")
                
                title = title_match.group(1).strip()
                
                # Handle cases where artist might not be found
                artist = "Unknown Artist"
                if artist_match:
                    artist_text = artist_match.group(1).strip()
                    # Artist information is usually in format "Song by Artist"
                    if "by " in artist_text:
                        artist = artist_text.split("by ")[1].strip()
                
                # Get image if available
                image_url = image_match.group(1) if image_match else None
                
                # Try to extract JSON data if available
                json_data_match = re.search(r'<script id="resource" type="application/json">(.+?)</script>', html_content)
                
                if json_data_match:
                    try:
                        json_str = json_data_match.group(1)
                        json_data = json.loads(json_str)
                        
                        # Extract more detailed information if available
                        if 'name' in json_data:
                            title = json_data['name']
                        
                        if 'artists' in json_data and len(json_data['artists']) > 0:
                            # Ki·ªÉm tra list tr∆∞·ªõc khi truy c·∫≠p ƒë·ªÉ tr√°nh index error
                            if json_data['artists'] and len(json_data['artists']) > 0:
                                artist = json_data['artists'][0].get('name', artist)
                    except json.JSONDecodeError:
                        # Ignore JSON parsing errors
                        pass
                
                return {
                    'title': title,
                    'artist': artist,
                    'image': image_url
                }
    except Exception as e:
        # Tr·∫£ v·ªÅ th√¥ng tin t·ªëi thi·ªÉu trong tr∆∞·ªùng h·ª£p l·ªói
        return {
            'title': f"Spotify Track {track_id}",
            'artist': "Unknown Artist",
            'image': None
        }

async def extract_spotify_album_info(album_id):
    """Tr√≠ch xu·∫•t th√¥ng tin t·ª´ Spotify album ID"""
    try:
        # S·ª≠ d·ª•ng API kh√¥ng c·∫ßn x√°c th·ª±c ƒë·ªÉ l·∫•y th√¥ng tin c∆° b·∫£n
        api_url = f"https://open.spotify.com/embed/album/{album_id}"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url, headers=headers) as response:
                if response.status != 200:
                    raise Exception(f"API returned status {response.status}")
                
                html_content = await response.text()
                
                # Extract album info
                title_match = re.search(r'<meta property="og:title" content="([^"]+)"', html_content)
                artist_match = re.search(r'<meta property="og:description" content="([^"]+)"', html_content)
                image_match = re.search(r'<meta property="og:image" content="([^"]+)"', html_content)
                
                if not title_match or not artist_match:
                    raise Exception("Could not extract album information")
                
                title = title_match.group(1).strip()
                artist = artist_match.group(1).split('¬∑')[0].strip()
                
                # Clean up artist text
                if "Album by" in artist:
                    artist = artist.replace("Album by", "").strip()
                
                # Get image if available
                image_url = image_match.group(1) if image_match else None
                
                # Try to extract track list
                tracks_data = []
                
                # Regex to extract JSON data from script tags
                json_data_match = re.search(r'<script id="initial-state" type="text/plain">(.+?)</script>', html_content)
                if json_data_match:
                    try:
                        json_str = json_data_match.group(1)
                        json_data = json.loads(json_str)
                        
                        # Navigate through the JSON to find tracks
                        entities = json_data.get('entities', {})
                        items = entities.get('items', {})
                        
                        # Extract track information
                        for key, value in items.items():
                            if value.get('type') == 'track':
                                track_name = value.get('name', 'Unknown Track')
                                track_artists = []
                                
                                # Get artists
                                for artist_id in value.get('artists', []):
                                    artist_entity = entities.get('artists', {}).get(artist_id, {})
                                    if artist_entity:
                                        track_artists.append(artist_entity.get('name', 'Unknown Artist'))
                                
                                track_artist = ", ".join(track_artists) if track_artists else artist
                                
                                tracks_data.append({
                                    'title': track_name,
                                    'artist': track_artist
                                })
                    except json.JSONDecodeError:
                        # If JSON parsing fails, we'll use a fallback method
                        pass
                
                # If no tracks were found or JSON parsing failed, use a minimum fallback
                if not tracks_data:
                    # Fallback: Create dummy tracks based on album info
                    for i in range(10):  # Assume 10 tracks as fallback
                        tracks_data.append({
                            'title': f"Track {i+1} from {title}",
                            'artist': artist
                        })
                
                return {
                    'title': title,
                    'artist': artist,
                    'id': album_id,
                    'image': image_url,
                    'tracks': tracks_data
                }
    except Exception as e:
        # Fallback with minimal info
        return {
            'title': f"Spotify Album {album_id}",
            'artist': "Unknown Artist",
            'id': album_id,
            'image': None,
            'tracks': [{'title': f"Track from Album {album_id}", 'artist': "Unknown Artist"}]
        }

async def extract_spotify_playlist_info(playlist_id):
    """Tr√≠ch xu·∫•t th√¥ng tin t·ª´ Spotify playlist ID"""
    try:
        # S·ª≠ d·ª•ng API kh√¥ng c·∫ßn x√°c th·ª±c ƒë·ªÉ l·∫•y th√¥ng tin c∆° b·∫£n
        api_url = f"https://open.spotify.com/embed/playlist/{playlist_id}"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(api_url, headers=headers) as response:
                if response.status != 200:
                    raise Exception(f"API returned status {response.status}")
                
                html_content = await response.text()
                
                # Extract playlist info from OpenGraph meta tags
                title_match = re.search(r'<meta property="og:title" content="([^"]+)"', html_content)
                owner_match = re.search(r'<meta property="og:description" content="([^"]+)"', html_content)
                image_match = re.search(r'<meta property="og:image" content="([^"]+)"', html_content)
                
                if not title_match:
                    raise Exception("Could not extract playlist title")
                
                title = title_match.group(1).strip()
                owner = "Unknown"
                if owner_match:
                    owner_text = owner_match.group(1).strip()
                    if "By " in owner_text:
                        owner = owner_text.split("By ")[1].strip()
                
                # Get image if available
                image_url = image_match.group(1) if image_match else None
                
                # Try to extract track list
                tracks_data = []
                
                # Regex to extract JSON data from script tags - ti·∫øp c·∫≠n t·ª´ nhi·ªÅu m·∫´u kh√°c nhau
                json_data_matches = [
                    re.search(r'<script id="initial-state" type="text/plain">(.+?)</script>', html_content),
                    re.search(r'<script id="__NEXT_DATA__" type="application/json">(.+?)</script>', html_content),
                    re.search(r'<script type="application/json" data-testid="spotify-player">(.+?)</script>', html_content)
                ]
                
                # Th·ª≠ t·ª´ng m·∫´u JSON cho ƒë·∫øn khi t√¨m th·∫•y d·ªØ li·ªáu h·ª£p l·ªá
                for json_data_match in json_data_matches:
                    if json_data_match:
                        try:
                            # Tr√≠ch xu·∫•t JSON v√† x·ª≠ l√Ω an to√†n
                            json_str = json_data_match.group(1)
                            json_data = json.loads(json_str)
                            
                            # Th·ª≠ nhi·ªÅu ƒë∆∞·ªùng d·∫´n c·∫•u tr√∫c JSON kh√°c nhau
                            # C·∫•u tr√∫c 1: C·∫•u tr√∫c c≈© v·ªõi entities
                            if 'entities' in json_data:
                                entities = json_data.get('entities', {})
                                items = entities.get('items', {})
                                
                                # Duy·ªát qua c√°c ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ t√¨m th√¥ng tin b√†i h√°t
                                for key, item in items.items():
                                    try:
                                        if isinstance(item, dict) and 'track' in item and isinstance(item.get('track', {}), dict) and 'name' in item.get('track', {}):
                                            track = item['track']
                                            track_name = track.get('name', 'Unknown Track')
                                            
                                            # T√¨m th√¥ng tin ngh·ªá sƒ©
                                            artist_name = "Unknown Artist"
                                            if 'artists' in track:
                                                if isinstance(track['artists'], list) and track['artists']:
                                                    artist_ids = track['artists']
                                                    if artist_ids and len(artist_ids) > 0:
                                                        first_artist_id = artist_ids[0]
                                                        
                                                        if first_artist_id and isinstance(first_artist_id, str):
                                                            artist = entities.get('artists', {}).get(first_artist_id, {})
                                                            if 'name' in artist:
                                                                artist_name = artist['name']
                                            
                                            tracks_data.append({
                                                'title': track_name,
                                                'artist': artist_name
                                            })
                                    except Exception as track_error:
                                        print(f"L·ªói x·ª≠ l√Ω track t·ª´ JSON: {track_error}")
                                        continue
                            
                            # C·∫•u tr√∫c 2: C·∫•u tr√∫c m·ªõi v·ªõi props/pageProps
                            elif 'props' in json_data and 'pageProps' in json_data['props']:
                                pageProps = json_data['props']['pageProps']
                                if 'playlist' in pageProps and 'tracks' in pageProps['playlist'] and 'items' in pageProps['playlist']['tracks']:
                                    tracks = pageProps['playlist']['tracks']['items']
                                    
                                    for track_item in tracks:
                                        try:
                                            if 'track' in track_item and track_item['track']:
                                                track = track_item['track']
                                                track_name = track.get('name', 'Unknown Track')
                                                
                                                # X·ª≠ l√Ω artists
                                                artist_name = "Unknown Artist"
                                                if 'artists' in track and isinstance(track['artists'], list) and track['artists']:
                                                    artist_name = track['artists'][0].get('name', 'Unknown Artist')
                                                
                                                tracks_data.append({
                                                    'title': track_name,
                                                    'artist': artist_name
                                                })
                                        except Exception as track_error:
                                            print(f"L·ªói x·ª≠ l√Ω track t·ª´ props JSON: {track_error}")
                                            continue
                            
                            # N·∫øu t√¨m th·∫•y tracks, tho√°t kh·ªèi v√≤ng l·∫∑p
                            if tracks_data:
                                break
                                
                        except json.JSONDecodeError as e:
                            print(f"L·ªói parse JSON t·ª´ Spotify: {e}")
                            # Th·ª≠ m·∫´u JSON ti·∫øp theo
                            continue
                
                # N·∫øu kh√¥ng t√¨m th·∫•y tracks t·ª´ JSON, d√πng ph∆∞∆°ng ph√°p d·ª± ph√≤ng t·ª´ HTML
                if not tracks_data:
                    # Parse track information from HTML directly (fallback method)
                    track_rows = re.findall(r'<div data-testid="tracklist-row"[^>]*>.*?<div[^>]*>.*?<div[^>]*>(.*?)</div>.*?<span[^>]*>(.*?)</span>', html_content, re.DOTALL)
                    
                    for track_name_html, track_artist_html in track_rows:
                        try:
                            # Extract text without HTML tags
                            track_name = re.sub('<[^<]+?>', '', track_name_html).strip()
                            track_artist = re.sub('<[^<]+?>', '', track_artist_html).strip()
                            
                            if track_name and track_artist:
                                tracks_data.append({
                                    'title': track_name,
                                    'artist': track_artist
                                })
                        except Exception as html_error:
                            print(f"L·ªói x·ª≠ l√Ω track t·ª´ HTML: {html_error}")
                            continue
                
                # N·∫øu v·∫´n kh√¥ng c√≥ tracks, t·∫°o tracks gi·∫£
                if not tracks_data:
                    # Fallback: Create dummy tracks based on playlist info
                    for i in range(10):  # Assume 10 tracks as fallback
                        tracks_data.append({
                            'title': f"Track {i+1} from {title}",
                            'artist': "Unknown Artist"
                        })
                
                return {
                    'title': title,
                    'owner': owner,
                    'id': playlist_id,
                    'image': image_url,
                    'tracks': tracks_data
                }
    except Exception as e:
        print(f"L·ªói ch√≠nh khi x·ª≠ l√Ω playlist: {type(e).__name__}: {str(e)}")
        # Fallback with minimal info
        return {
            'title': f"Spotify Playlist {playlist_id}",
            'owner': "Unknown User",
            'id': playlist_id,
            'image': None,
            'tracks': [{'title': f"Track from Playlist {playlist_id}", 'artist': "Unknown Artist"}]
        }

# S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng STV_TOKEN ƒë·ªÉ l·∫•y token c·ªßa bot
bot.run("MTI1MDQyMTA4MTM5NTY5MTU5MQ.GyVIYV.XEI-1LUkK16qCjf8ulqgIhtXd2HgaY0msvAWYk")